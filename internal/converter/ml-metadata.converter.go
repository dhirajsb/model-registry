// Code generated by github.com/opendatahub-io/model-registry/gqlmapper. DO NOT EDIT.
// converter generated from ml-metadata.yaml
package converter

import (
    "github.com/opendatahub-io/model-registry/internal/model/db"
    "github.com/opendatahub-io/model-registry/internal/model/graph"
)
type MlMetadataConverter struct {
    DelegateConverter MlMetadataDelegateConverter
}
var fieldsMlmdDatasetMap = map[string]struct{}{ "intProp": struct{}{}, "secondProp": struct{}{},  }
func (c MlMetadataConverter) ConvertMlmdDataset(source *graph.MlmdDataset) (*db.Artifact, error) {
    FilterGraphQLProperties(&source.Properties, fieldsMlmdDatasetMap)
    if source.IntProp != nil {
        source.Properties = append(source.Properties, &graph.InstanceProperty{
            Name:             "intProp",
            IsCustomProperty: false,
            PropertyValue:    graph.IntValue{
                Value: *source.IntProp,
            },
        })
    }
    if source.SecondProp != nil {
        source.Properties = append(source.Properties, &graph.InstanceProperty{
            Name:             "secondProp",
            IsCustomProperty: false,
            PropertyValue:    graph.DoubleValue{
                Value: *source.SecondProp,
            },
        })
    }
    return c.DelegateConverter.ConvertMlmdDataset(source)
}
func (c MlMetadataConverter) ConvertToMlmdDataset(source *db.Artifact) (*graph.MlmdDataset, error) {
    result, err := c.DelegateConverter.ConvertToMlmdDataset(source)
    if err != nil {
        return result, err
    }
    typeProperties := FilterTypeProperties(&result.Properties, fieldsMlmdDatasetMap)
    if prop, ok := typeProperties["intProp"]; ok {
        value := prop.PropertyValue.(graph.IntValue).Value
        result.IntProp = &value
    }
    if prop, ok := typeProperties["secondProp"]; ok {
        value := prop.PropertyValue.(graph.DoubleValue).Value
        result.SecondProp = &value
    }
    return result, nil
}
var fieldsMlmdModelMap = map[string]struct{}{ "doubleProp": struct{}{},  }
func (c MlMetadataConverter) ConvertMlmdModel(source *graph.MlmdModel) (*db.Artifact, error) {
    FilterGraphQLProperties(&source.Properties, fieldsMlmdModelMap)
    if source.DoubleProp != nil {
        source.Properties = append(source.Properties, &graph.InstanceProperty{
            Name:             "doubleProp",
            IsCustomProperty: false,
            PropertyValue:    graph.DoubleValue{
                Value: *source.DoubleProp,
            },
        })
    }
    return c.DelegateConverter.ConvertMlmdModel(source)
}
func (c MlMetadataConverter) ConvertToMlmdModel(source *db.Artifact) (*graph.MlmdModel, error) {
    result, err := c.DelegateConverter.ConvertToMlmdModel(source)
    if err != nil {
        return result, err
    }
    typeProperties := FilterTypeProperties(&result.Properties, fieldsMlmdModelMap)
    if prop, ok := typeProperties["doubleProp"]; ok {
        value := prop.PropertyValue.(graph.DoubleValue).Value
        result.DoubleProp = &value
    }
    return result, nil
}
var fieldsMlmdMetricsMap = map[string]struct{}{ "stringProp": struct{}{},  }
func (c MlMetadataConverter) ConvertMlmdMetrics(source *graph.MlmdMetrics) (*db.Artifact, error) {
    FilterGraphQLProperties(&source.Properties, fieldsMlmdMetricsMap)
    if source.StringProp != nil {
        source.Properties = append(source.Properties, &graph.InstanceProperty{
            Name:             "stringProp",
            IsCustomProperty: false,
            PropertyValue:    graph.StringValue{
                Value: *source.StringProp,
            },
        })
    }
    return c.DelegateConverter.ConvertMlmdMetrics(source)
}
func (c MlMetadataConverter) ConvertToMlmdMetrics(source *db.Artifact) (*graph.MlmdMetrics, error) {
    result, err := c.DelegateConverter.ConvertToMlmdMetrics(source)
    if err != nil {
        return result, err
    }
    typeProperties := FilterTypeProperties(&result.Properties, fieldsMlmdMetricsMap)
    if prop, ok := typeProperties["stringProp"]; ok {
        value := prop.PropertyValue.(graph.StringValue).Value
        result.StringProp = &value
    }
    return result, nil
}
var fieldsMlmdStatisticsMap = map[string]struct{}{ "structProp": struct{}{},  }
func (c MlMetadataConverter) ConvertMlmdStatistics(source *graph.MlmdStatistics) (*db.Artifact, error) {
    FilterGraphQLProperties(&source.Properties, fieldsMlmdStatisticsMap)
    if source.StructProp != nil {
        source.Properties = append(source.Properties, &graph.InstanceProperty{
            Name:             "structProp",
            IsCustomProperty: false,
            PropertyValue:    graph.StructValue{
                Value: source.StructProp,
            },
        })
    }
    return c.DelegateConverter.ConvertMlmdStatistics(source)
}
func (c MlMetadataConverter) ConvertToMlmdStatistics(source *db.Artifact) (*graph.MlmdStatistics, error) {
    result, err := c.DelegateConverter.ConvertToMlmdStatistics(source)
    if err != nil {
        return result, err
    }
    typeProperties := FilterTypeProperties(&result.Properties, fieldsMlmdStatisticsMap)
    if prop, ok := typeProperties["structProp"]; ok {
        value := prop.PropertyValue.(graph.StructValue).Value
        result.StructProp = value
    }
    return result, nil
}
var fieldsMlmdTrainMap = map[string]struct{}{ "protoProp": struct{}{},  }
func (c MlMetadataConverter) ConvertMlmdTrain(source *graph.MlmdTrain) (*db.Execution, error) {
    FilterGraphQLProperties(&source.Properties, fieldsMlmdTrainMap)
    if source.ProtoProp != nil {
        source.Properties = append(source.Properties, &graph.InstanceProperty{
            Name:             "protoProp",
            IsCustomProperty: false,
            PropertyValue:    graph.ProtoValue{
                Value: source.ProtoProp,
            },
        })
    }
    return c.DelegateConverter.ConvertMlmdTrain(source)
}
func (c MlMetadataConverter) ConvertToMlmdTrain(source *db.Execution) (*graph.MlmdTrain, error) {
    result, err := c.DelegateConverter.ConvertToMlmdTrain(source)
    if err != nil {
        return result, err
    }
    typeProperties := FilterTypeProperties(&result.Properties, fieldsMlmdTrainMap)
    if prop, ok := typeProperties["protoProp"]; ok {
        value := prop.PropertyValue.(graph.ProtoValue).Value
        result.ProtoProp = value
    }
    return result, nil
}
var fieldsMlmdTransformMap = map[string]struct{}{ "booleanProp": struct{}{},  }
func (c MlMetadataConverter) ConvertMlmdTransform(source *graph.MlmdTransform) (*db.Execution, error) {
    FilterGraphQLProperties(&source.Properties, fieldsMlmdTransformMap)
    if source.BooleanProp != nil {
        source.Properties = append(source.Properties, &graph.InstanceProperty{
            Name:             "booleanProp",
            IsCustomProperty: false,
            PropertyValue:    graph.BoolValue{
                Value: *source.BooleanProp,
            },
        })
    }
    return c.DelegateConverter.ConvertMlmdTransform(source)
}
func (c MlMetadataConverter) ConvertToMlmdTransform(source *db.Execution) (*graph.MlmdTransform, error) {
    result, err := c.DelegateConverter.ConvertToMlmdTransform(source)
    if err != nil {
        return result, err
    }
    typeProperties := FilterTypeProperties(&result.Properties, fieldsMlmdTransformMap)
    if prop, ok := typeProperties["booleanProp"]; ok {
        value := prop.PropertyValue.(graph.BoolValue).Value
        result.BooleanProp = &value
    }
    return result, nil
}
func (c MlMetadataConverter) ConvertMlmdProcess(source *graph.MlmdProcess) (*db.Execution, error) {
    return c.DelegateConverter.ConvertMlmdProcess(source)
}
func (c MlMetadataConverter) ConvertToMlmdProcess(source *db.Execution) (*graph.MlmdProcess, error) {
    return c.DelegateConverter.ConvertToMlmdProcess(source)
}
func (c MlMetadataConverter) ConvertMlmdEvaluate(source *graph.MlmdEvaluate) (*db.Execution, error) {
    return c.DelegateConverter.ConvertMlmdEvaluate(source)
}
func (c MlMetadataConverter) ConvertToMlmdEvaluate(source *db.Execution) (*graph.MlmdEvaluate, error) {
    return c.DelegateConverter.ConvertToMlmdEvaluate(source)
}
func (c MlMetadataConverter) ConvertMlmdDeploy(source *graph.MlmdDeploy) (*db.Execution, error) {
    return c.DelegateConverter.ConvertMlmdDeploy(source)
}
func (c MlMetadataConverter) ConvertToMlmdDeploy(source *db.Execution) (*graph.MlmdDeploy, error) {
    return c.DelegateConverter.ConvertToMlmdDeploy(source)
}

// goverter:converter
// goverter:wrapErrors
// goverter:extend ConvertArtifactState
// goverter:extend ConvertToArtifactState
// goverter:extend ConvertExecutionState
// goverter:extend ConvertToExecutionState
type MlMetadataDelegateConverter interface {
    // goverter:map ID | ConvertArtifactID
    // goverter:map TypeID | ConvertTypeID
    // goverter:map Properties | ConvertArtifactProperties
    // goverter:ignore ArtifactType Attributions Events
    ConvertMlmdDataset(source *graph.MlmdDataset) (*db.Artifact, error)
    // goverter:map ID | ConvertToArtifactID
    // goverter:map TypeID | ConvertToTypeID
    // goverter:map Properties | ConvertToArtifactProperties
    // goverter:ignore Type Attributions Events
    // goverter:ignore IntProp SecondProp
    ConvertToMlmdDataset(source *db.Artifact) (*graph.MlmdDataset, error)
    // goverter:map ID | ConvertArtifactID
    // goverter:map TypeID | ConvertTypeID
    // goverter:map Properties | ConvertArtifactProperties
    // goverter:ignore ArtifactType Attributions Events
    ConvertMlmdModel(source *graph.MlmdModel) (*db.Artifact, error)
    // goverter:map ID | ConvertToArtifactID
    // goverter:map TypeID | ConvertToTypeID
    // goverter:map Properties | ConvertToArtifactProperties
    // goverter:ignore Type Attributions Events
    // goverter:ignore DoubleProp
    ConvertToMlmdModel(source *db.Artifact) (*graph.MlmdModel, error)
    // goverter:map ID | ConvertArtifactID
    // goverter:map TypeID | ConvertTypeID
    // goverter:map Properties | ConvertArtifactProperties
    // goverter:ignore ArtifactType Attributions Events
    ConvertMlmdMetrics(source *graph.MlmdMetrics) (*db.Artifact, error)
    // goverter:map ID | ConvertToArtifactID
    // goverter:map TypeID | ConvertToTypeID
    // goverter:map Properties | ConvertToArtifactProperties
    // goverter:ignore Type Attributions Events
    // goverter:ignore StringProp
    ConvertToMlmdMetrics(source *db.Artifact) (*graph.MlmdMetrics, error)
    // goverter:map ID | ConvertArtifactID
    // goverter:map TypeID | ConvertTypeID
    // goverter:map Properties | ConvertArtifactProperties
    // goverter:ignore ArtifactType Attributions Events
    ConvertMlmdStatistics(source *graph.MlmdStatistics) (*db.Artifact, error)
    // goverter:map ID | ConvertToArtifactID
    // goverter:map TypeID | ConvertToTypeID
    // goverter:map Properties | ConvertToArtifactProperties
    // goverter:ignore Type Attributions Events
    // goverter:ignore StructProp
    ConvertToMlmdStatistics(source *db.Artifact) (*graph.MlmdStatistics, error)
    // goverter:map ID | ConvertExecutionID
    // goverter:map TypeID | ConvertTypeID
    // goverter:map Properties | ConvertExecutionProperties
    // goverter:ignore ExecutionType Associations Events
    ConvertMlmdTrain(source *graph.MlmdTrain) (*db.Execution, error)
    // goverter:map ID | ConvertToExecutionID
    // goverter:map TypeID | ConvertToTypeID
    // goverter:map Properties | ConvertToExecutionProperties
    // goverter:ignore Type Associations Events
    // goverter:ignore ProtoProp
    ConvertToMlmdTrain(source *db.Execution) (*graph.MlmdTrain, error)
    // goverter:map ID | ConvertExecutionID
    // goverter:map TypeID | ConvertTypeID
    // goverter:map Properties | ConvertExecutionProperties
    // goverter:ignore ExecutionType Associations Events
    ConvertMlmdTransform(source *graph.MlmdTransform) (*db.Execution, error)
    // goverter:map ID | ConvertToExecutionID
    // goverter:map TypeID | ConvertToTypeID
    // goverter:map Properties | ConvertToExecutionProperties
    // goverter:ignore Type Associations Events
    // goverter:ignore BooleanProp
    ConvertToMlmdTransform(source *db.Execution) (*graph.MlmdTransform, error)
    // goverter:map ID | ConvertExecutionID
    // goverter:map TypeID | ConvertTypeID
    // goverter:map Properties | ConvertExecutionProperties
    // goverter:ignore ExecutionType Associations Events
    ConvertMlmdProcess(source *graph.MlmdProcess) (*db.Execution, error)
    // goverter:map ID | ConvertToExecutionID
    // goverter:map TypeID | ConvertToTypeID
    // goverter:map Properties | ConvertToExecutionProperties
    // goverter:ignore Type Associations Events
    ConvertToMlmdProcess(source *db.Execution) (*graph.MlmdProcess, error)
    // goverter:map ID | ConvertExecutionID
    // goverter:map TypeID | ConvertTypeID
    // goverter:map Properties | ConvertExecutionProperties
    // goverter:ignore ExecutionType Associations Events
    ConvertMlmdEvaluate(source *graph.MlmdEvaluate) (*db.Execution, error)
    // goverter:map ID | ConvertToExecutionID
    // goverter:map TypeID | ConvertToTypeID
    // goverter:map Properties | ConvertToExecutionProperties
    // goverter:ignore Type Associations Events
    ConvertToMlmdEvaluate(source *db.Execution) (*graph.MlmdEvaluate, error)
    // goverter:map ID | ConvertExecutionID
    // goverter:map TypeID | ConvertTypeID
    // goverter:map Properties | ConvertExecutionProperties
    // goverter:ignore ExecutionType Associations Events
    ConvertMlmdDeploy(source *graph.MlmdDeploy) (*db.Execution, error)
    // goverter:map ID | ConvertToExecutionID
    // goverter:map TypeID | ConvertToTypeID
    // goverter:map Properties | ConvertToExecutionProperties
    // goverter:ignore Type Associations Events
    ConvertToMlmdDeploy(source *db.Execution) (*graph.MlmdDeploy, error)
}
