// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package graph

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"strconv"
	"sync"
	"sync/atomic"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	"github.com/opendatahub-io/model-registry/internal/model/graph"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Artifact() ArtifactResolver
	Association() AssociationResolver
	Attribution() AttributionResolver
	Context() ContextResolver
	Event() EventResolver
	Execution() ExecutionResolver
	MlmdDataset() MlmdDatasetResolver
	MlmdDeploy() MlmdDeployResolver
	MlmdEvaluate() MlmdEvaluateResolver
	MlmdMetrics() MlmdMetricsResolver
	MlmdModel() MlmdModelResolver
	MlmdProcess() MlmdProcessResolver
	MlmdStatistics() MlmdStatisticsResolver
	MlmdTrain() MlmdTrainResolver
	MlmdTransform() MlmdTransformResolver
	MlschemaAlgorithm() MlschemaAlgorithmResolver
	MlschemaData() MlschemaDataResolver
	MlschemaDataCharacteristic() MlschemaDataCharacteristicResolver
	MlschemaDataSet() MlschemaDataSetResolver
	MlschemaDatasetCharacteristic() MlschemaDatasetCharacteristicResolver
	MlschemaEvaluationMeasure() MlschemaEvaluationMeasureResolver
	MlschemaEvaluationProcedure() MlschemaEvaluationProcedureResolver
	MlschemaEvaluationSpecification() MlschemaEvaluationSpecificationResolver
	MlschemaExperiment() MlschemaExperimentResolver
	MlschemaFeature() MlschemaFeatureResolver
	MlschemaFeatureCharacteristic() MlschemaFeatureCharacteristicResolver
	MlschemaHyperParameter() MlschemaHyperParameterResolver
	MlschemaHyperParameterSetting() MlschemaHyperParameterSettingResolver
	MlschemaImplementation() MlschemaImplementationResolver
	MlschemaImplementationCharacteristic() MlschemaImplementationCharacteristicResolver
	MlschemaModel() MlschemaModelResolver
	MlschemaModelEvaluation() MlschemaModelEvaluationResolver
	MlschemaModelVersion() MlschemaModelVersionResolver
	MlschemaRegisteredModel() MlschemaRegisteredModelResolver
	MlschemaRun() MlschemaRunResolver
	MlschemaSoftware() MlschemaSoftwareResolver
	MlschemaStudy() MlschemaStudyResolver
	MlschemaTask() MlschemaTaskResolver
	Mutation() MutationResolver
	Query() QueryResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	Artifact struct {
		Attributions             func(childComplexity int) int
		CreateTimeSinceEpoch     func(childComplexity int) int
		Events                   func(childComplexity int) int
		ExternalID               func(childComplexity int) int
		ID                       func(childComplexity int) int
		LastUpdateTimeSinceEpoch func(childComplexity int) int
		Name                     func(childComplexity int) int
		Properties               func(childComplexity int) int
		State                    func(childComplexity int) int
		Type                     func(childComplexity int) int
		TypeID                   func(childComplexity int) int
		URI                      func(childComplexity int) int
	}

	ArtifactType struct {
		Description func(childComplexity int) int
		ExternalID  func(childComplexity int) int
		ID          func(childComplexity int) int
		Name        func(childComplexity int) int
		Properties  func(childComplexity int) int
		TypeKind    func(childComplexity int) int
		Version     func(childComplexity int) int
	}

	Association struct {
		Context     func(childComplexity int) int
		ContextID   func(childComplexity int) int
		Execution   func(childComplexity int) int
		ExecutionID func(childComplexity int) int
		ID          func(childComplexity int) int
	}

	Attribution struct {
		Artifact   func(childComplexity int) int
		ArtifactID func(childComplexity int) int
		Context    func(childComplexity int) int
		ContextID  func(childComplexity int) int
		ID         func(childComplexity int) int
	}

	BoolValue struct {
		Value func(childComplexity int) int
	}

	Context struct {
		Associations             func(childComplexity int) int
		Attributions             func(childComplexity int) int
		Children                 func(childComplexity int) int
		CreateTimeSinceEpoch     func(childComplexity int) int
		ExternalID               func(childComplexity int) int
		ID                       func(childComplexity int) int
		LastUpdateTimeSinceEpoch func(childComplexity int) int
		Name                     func(childComplexity int) int
		Parents                  func(childComplexity int) int
		Properties               func(childComplexity int) int
		Type                     func(childComplexity int) int
		TypeID                   func(childComplexity int) int
	}

	ContextType struct {
		Description func(childComplexity int) int
		ExternalID  func(childComplexity int) int
		ID          func(childComplexity int) int
		Name        func(childComplexity int) int
		Properties  func(childComplexity int) int
		TypeKind    func(childComplexity int) int
		Version     func(childComplexity int) int
	}

	DoubleValue struct {
		Value func(childComplexity int) int
	}

	Event struct {
		Artifact               func(childComplexity int) int
		ArtifactID             func(childComplexity int) int
		Execution              func(childComplexity int) int
		ExecutionID            func(childComplexity int) int
		ID                     func(childComplexity int) int
		MillisecondsSinceEpoch func(childComplexity int) int
		Path                   func(childComplexity int) int
		Type                   func(childComplexity int) int
	}

	EventStepIndex struct {
		Index func(childComplexity int) int
	}

	EventStepKey struct {
		Key func(childComplexity int) int
	}

	Execution struct {
		Associations             func(childComplexity int) int
		CreateTimeSinceEpoch     func(childComplexity int) int
		Events                   func(childComplexity int) int
		ExternalID               func(childComplexity int) int
		ID                       func(childComplexity int) int
		LastKnownState           func(childComplexity int) int
		LastUpdateTimeSinceEpoch func(childComplexity int) int
		Name                     func(childComplexity int) int
		Properties               func(childComplexity int) int
		Type                     func(childComplexity int) int
		TypeID                   func(childComplexity int) int
	}

	ExecutionType struct {
		Description func(childComplexity int) int
		ExternalID  func(childComplexity int) int
		ID          func(childComplexity int) int
		InputType   func(childComplexity int) int
		Name        func(childComplexity int) int
		OutputType  func(childComplexity int) int
		Properties  func(childComplexity int) int
		TypeKind    func(childComplexity int) int
		Version     func(childComplexity int) int
	}

	InstanceProperty struct {
		IsCustomProperty func(childComplexity int) int
		Name             func(childComplexity int) int
		PropertyValue    func(childComplexity int) int
	}

	IntValue struct {
		Value func(childComplexity int) int
	}

	ListValue struct {
		Value func(childComplexity int) int
	}

	MlmdDataset struct {
		Attributions             func(childComplexity int) int
		CreateTimeSinceEpoch     func(childComplexity int) int
		Events                   func(childComplexity int) int
		ExternalID               func(childComplexity int) int
		ID                       func(childComplexity int) int
		IntProp                  func(childComplexity int) int
		LastUpdateTimeSinceEpoch func(childComplexity int) int
		Name                     func(childComplexity int) int
		Properties               func(childComplexity int) int
		SecondProp               func(childComplexity int) int
		State                    func(childComplexity int) int
		Type                     func(childComplexity int) int
		TypeID                   func(childComplexity int) int
		URI                      func(childComplexity int) int
	}

	MlmdDeploy struct {
		Associations             func(childComplexity int) int
		CreateTimeSinceEpoch     func(childComplexity int) int
		Events                   func(childComplexity int) int
		ExternalID               func(childComplexity int) int
		ID                       func(childComplexity int) int
		LastKnownState           func(childComplexity int) int
		LastUpdateTimeSinceEpoch func(childComplexity int) int
		Name                     func(childComplexity int) int
		Properties               func(childComplexity int) int
		Type                     func(childComplexity int) int
		TypeID                   func(childComplexity int) int
	}

	MlmdEvaluate struct {
		Associations             func(childComplexity int) int
		CreateTimeSinceEpoch     func(childComplexity int) int
		Events                   func(childComplexity int) int
		ExternalID               func(childComplexity int) int
		ID                       func(childComplexity int) int
		LastKnownState           func(childComplexity int) int
		LastUpdateTimeSinceEpoch func(childComplexity int) int
		Name                     func(childComplexity int) int
		Properties               func(childComplexity int) int
		Type                     func(childComplexity int) int
		TypeID                   func(childComplexity int) int
	}

	MlmdMetrics struct {
		Attributions             func(childComplexity int) int
		CreateTimeSinceEpoch     func(childComplexity int) int
		Events                   func(childComplexity int) int
		ExternalID               func(childComplexity int) int
		ID                       func(childComplexity int) int
		LastUpdateTimeSinceEpoch func(childComplexity int) int
		Name                     func(childComplexity int) int
		Properties               func(childComplexity int) int
		State                    func(childComplexity int) int
		StringProp               func(childComplexity int) int
		Type                     func(childComplexity int) int
		TypeID                   func(childComplexity int) int
		URI                      func(childComplexity int) int
	}

	MlmdModel struct {
		Attributions             func(childComplexity int) int
		CreateTimeSinceEpoch     func(childComplexity int) int
		DoubleProp               func(childComplexity int) int
		Events                   func(childComplexity int) int
		ExternalID               func(childComplexity int) int
		ID                       func(childComplexity int) int
		LastUpdateTimeSinceEpoch func(childComplexity int) int
		Name                     func(childComplexity int) int
		Properties               func(childComplexity int) int
		State                    func(childComplexity int) int
		Type                     func(childComplexity int) int
		TypeID                   func(childComplexity int) int
		URI                      func(childComplexity int) int
	}

	MlmdProcess struct {
		Associations             func(childComplexity int) int
		CreateTimeSinceEpoch     func(childComplexity int) int
		Events                   func(childComplexity int) int
		ExternalID               func(childComplexity int) int
		ID                       func(childComplexity int) int
		LastKnownState           func(childComplexity int) int
		LastUpdateTimeSinceEpoch func(childComplexity int) int
		Name                     func(childComplexity int) int
		Properties               func(childComplexity int) int
		Type                     func(childComplexity int) int
		TypeID                   func(childComplexity int) int
	}

	MlmdStatistics struct {
		Attributions             func(childComplexity int) int
		CreateTimeSinceEpoch     func(childComplexity int) int
		Events                   func(childComplexity int) int
		ExternalID               func(childComplexity int) int
		ID                       func(childComplexity int) int
		LastUpdateTimeSinceEpoch func(childComplexity int) int
		Name                     func(childComplexity int) int
		Properties               func(childComplexity int) int
		State                    func(childComplexity int) int
		StructProp               func(childComplexity int) int
		Type                     func(childComplexity int) int
		TypeID                   func(childComplexity int) int
		URI                      func(childComplexity int) int
	}

	MlmdTrain struct {
		Associations             func(childComplexity int) int
		CreateTimeSinceEpoch     func(childComplexity int) int
		Events                   func(childComplexity int) int
		ExternalID               func(childComplexity int) int
		ID                       func(childComplexity int) int
		LastKnownState           func(childComplexity int) int
		LastUpdateTimeSinceEpoch func(childComplexity int) int
		Name                     func(childComplexity int) int
		Properties               func(childComplexity int) int
		ProtoProp                func(childComplexity int) int
		Type                     func(childComplexity int) int
		TypeID                   func(childComplexity int) int
	}

	MlmdTransform struct {
		Associations             func(childComplexity int) int
		BooleanProp              func(childComplexity int) int
		CreateTimeSinceEpoch     func(childComplexity int) int
		Events                   func(childComplexity int) int
		ExternalID               func(childComplexity int) int
		ID                       func(childComplexity int) int
		LastKnownState           func(childComplexity int) int
		LastUpdateTimeSinceEpoch func(childComplexity int) int
		Name                     func(childComplexity int) int
		Properties               func(childComplexity int) int
		Type                     func(childComplexity int) int
		TypeID                   func(childComplexity int) int
	}

	MlschemaAlgorithm struct {
		Attributions             func(childComplexity int) int
		CreateTimeSinceEpoch     func(childComplexity int) int
		Events                   func(childComplexity int) int
		ExternalID               func(childComplexity int) int
		ID                       func(childComplexity int) int
		LastUpdateTimeSinceEpoch func(childComplexity int) int
		Name                     func(childComplexity int) int
		Properties               func(childComplexity int) int
		State                    func(childComplexity int) int
		Type                     func(childComplexity int) int
		TypeID                   func(childComplexity int) int
		URI                      func(childComplexity int) int
	}

	MlschemaData struct {
		Attributions             func(childComplexity int) int
		CreateTimeSinceEpoch     func(childComplexity int) int
		Events                   func(childComplexity int) int
		ExternalID               func(childComplexity int) int
		ID                       func(childComplexity int) int
		LastUpdateTimeSinceEpoch func(childComplexity int) int
		Name                     func(childComplexity int) int
		Properties               func(childComplexity int) int
		State                    func(childComplexity int) int
		Type                     func(childComplexity int) int
		TypeID                   func(childComplexity int) int
		URI                      func(childComplexity int) int
	}

	MlschemaDataCharacteristic struct {
		Associations             func(childComplexity int) int
		Attributions             func(childComplexity int) int
		Children                 func(childComplexity int) int
		CreateTimeSinceEpoch     func(childComplexity int) int
		ExternalID               func(childComplexity int) int
		ID                       func(childComplexity int) int
		LastUpdateTimeSinceEpoch func(childComplexity int) int
		Name                     func(childComplexity int) int
		Parents                  func(childComplexity int) int
		Properties               func(childComplexity int) int
		Type                     func(childComplexity int) int
		TypeID                   func(childComplexity int) int
	}

	MlschemaDataSet struct {
		Attributions             func(childComplexity int) int
		CreateTimeSinceEpoch     func(childComplexity int) int
		Events                   func(childComplexity int) int
		ExternalID               func(childComplexity int) int
		ID                       func(childComplexity int) int
		LastUpdateTimeSinceEpoch func(childComplexity int) int
		Name                     func(childComplexity int) int
		Properties               func(childComplexity int) int
		State                    func(childComplexity int) int
		Type                     func(childComplexity int) int
		TypeID                   func(childComplexity int) int
		URI                      func(childComplexity int) int
	}

	MlschemaDatasetCharacteristic struct {
		Attributions             func(childComplexity int) int
		CreateTimeSinceEpoch     func(childComplexity int) int
		Events                   func(childComplexity int) int
		ExternalID               func(childComplexity int) int
		ID                       func(childComplexity int) int
		LastUpdateTimeSinceEpoch func(childComplexity int) int
		Name                     func(childComplexity int) int
		Properties               func(childComplexity int) int
		State                    func(childComplexity int) int
		Type                     func(childComplexity int) int
		TypeID                   func(childComplexity int) int
		URI                      func(childComplexity int) int
	}

	MlschemaEvaluationMeasure struct {
		Attributions             func(childComplexity int) int
		CreateTimeSinceEpoch     func(childComplexity int) int
		Events                   func(childComplexity int) int
		ExternalID               func(childComplexity int) int
		ID                       func(childComplexity int) int
		LastUpdateTimeSinceEpoch func(childComplexity int) int
		Name                     func(childComplexity int) int
		Properties               func(childComplexity int) int
		State                    func(childComplexity int) int
		Type                     func(childComplexity int) int
		TypeID                   func(childComplexity int) int
		URI                      func(childComplexity int) int
	}

	MlschemaEvaluationProcedure struct {
		Attributions             func(childComplexity int) int
		CreateTimeSinceEpoch     func(childComplexity int) int
		Events                   func(childComplexity int) int
		ExternalID               func(childComplexity int) int
		ID                       func(childComplexity int) int
		LastUpdateTimeSinceEpoch func(childComplexity int) int
		Name                     func(childComplexity int) int
		Properties               func(childComplexity int) int
		State                    func(childComplexity int) int
		Type                     func(childComplexity int) int
		TypeID                   func(childComplexity int) int
		URI                      func(childComplexity int) int
	}

	MlschemaEvaluationSpecification struct {
		Attributions             func(childComplexity int) int
		CreateTimeSinceEpoch     func(childComplexity int) int
		Events                   func(childComplexity int) int
		ExternalID               func(childComplexity int) int
		ID                       func(childComplexity int) int
		LastUpdateTimeSinceEpoch func(childComplexity int) int
		Name                     func(childComplexity int) int
		Properties               func(childComplexity int) int
		State                    func(childComplexity int) int
		Type                     func(childComplexity int) int
		TypeID                   func(childComplexity int) int
		URI                      func(childComplexity int) int
	}

	MlschemaExperiment struct {
		Associations             func(childComplexity int) int
		CreateTimeSinceEpoch     func(childComplexity int) int
		Events                   func(childComplexity int) int
		ExternalID               func(childComplexity int) int
		ID                       func(childComplexity int) int
		LastKnownState           func(childComplexity int) int
		LastUpdateTimeSinceEpoch func(childComplexity int) int
		Name                     func(childComplexity int) int
		Properties               func(childComplexity int) int
		Type                     func(childComplexity int) int
		TypeID                   func(childComplexity int) int
	}

	MlschemaFeature struct {
		Attributions             func(childComplexity int) int
		CreateTimeSinceEpoch     func(childComplexity int) int
		Events                   func(childComplexity int) int
		ExternalID               func(childComplexity int) int
		ID                       func(childComplexity int) int
		LastUpdateTimeSinceEpoch func(childComplexity int) int
		Name                     func(childComplexity int) int
		Properties               func(childComplexity int) int
		State                    func(childComplexity int) int
		Type                     func(childComplexity int) int
		TypeID                   func(childComplexity int) int
		URI                      func(childComplexity int) int
	}

	MlschemaFeatureCharacteristic struct {
		Attributions             func(childComplexity int) int
		CreateTimeSinceEpoch     func(childComplexity int) int
		Events                   func(childComplexity int) int
		ExternalID               func(childComplexity int) int
		ID                       func(childComplexity int) int
		LastUpdateTimeSinceEpoch func(childComplexity int) int
		Name                     func(childComplexity int) int
		Properties               func(childComplexity int) int
		State                    func(childComplexity int) int
		Type                     func(childComplexity int) int
		TypeID                   func(childComplexity int) int
		URI                      func(childComplexity int) int
	}

	MlschemaHyperParameter struct {
		Attributions             func(childComplexity int) int
		CreateTimeSinceEpoch     func(childComplexity int) int
		Events                   func(childComplexity int) int
		ExternalID               func(childComplexity int) int
		ID                       func(childComplexity int) int
		LastUpdateTimeSinceEpoch func(childComplexity int) int
		Name                     func(childComplexity int) int
		Properties               func(childComplexity int) int
		State                    func(childComplexity int) int
		Type                     func(childComplexity int) int
		TypeID                   func(childComplexity int) int
		URI                      func(childComplexity int) int
	}

	MlschemaHyperParameterSetting struct {
		Attributions             func(childComplexity int) int
		CreateTimeSinceEpoch     func(childComplexity int) int
		Events                   func(childComplexity int) int
		ExternalID               func(childComplexity int) int
		ID                       func(childComplexity int) int
		LastUpdateTimeSinceEpoch func(childComplexity int) int
		Name                     func(childComplexity int) int
		Properties               func(childComplexity int) int
		State                    func(childComplexity int) int
		Type                     func(childComplexity int) int
		TypeID                   func(childComplexity int) int
		URI                      func(childComplexity int) int
	}

	MlschemaImplementation struct {
		Attributions             func(childComplexity int) int
		CreateTimeSinceEpoch     func(childComplexity int) int
		Events                   func(childComplexity int) int
		ExternalID               func(childComplexity int) int
		ID                       func(childComplexity int) int
		LastUpdateTimeSinceEpoch func(childComplexity int) int
		Name                     func(childComplexity int) int
		Properties               func(childComplexity int) int
		State                    func(childComplexity int) int
		Type                     func(childComplexity int) int
		TypeID                   func(childComplexity int) int
		URI                      func(childComplexity int) int
	}

	MlschemaImplementationCharacteristic struct {
		Attributions             func(childComplexity int) int
		CreateTimeSinceEpoch     func(childComplexity int) int
		Events                   func(childComplexity int) int
		ExternalID               func(childComplexity int) int
		ID                       func(childComplexity int) int
		LastUpdateTimeSinceEpoch func(childComplexity int) int
		Name                     func(childComplexity int) int
		Properties               func(childComplexity int) int
		State                    func(childComplexity int) int
		Type                     func(childComplexity int) int
		TypeID                   func(childComplexity int) int
		URI                      func(childComplexity int) int
	}

	MlschemaModel struct {
		Attributions             func(childComplexity int) int
		CreateTimeSinceEpoch     func(childComplexity int) int
		Events                   func(childComplexity int) int
		ExternalID               func(childComplexity int) int
		ID                       func(childComplexity int) int
		LastUpdateTimeSinceEpoch func(childComplexity int) int
		Name                     func(childComplexity int) int
		Properties               func(childComplexity int) int
		State                    func(childComplexity int) int
		Type                     func(childComplexity int) int
		TypeID                   func(childComplexity int) int
		URI                      func(childComplexity int) int
	}

	MlschemaModelEvaluation struct {
		Attributions             func(childComplexity int) int
		CreateTimeSinceEpoch     func(childComplexity int) int
		Events                   func(childComplexity int) int
		ExternalID               func(childComplexity int) int
		ID                       func(childComplexity int) int
		LastUpdateTimeSinceEpoch func(childComplexity int) int
		Name                     func(childComplexity int) int
		Properties               func(childComplexity int) int
		State                    func(childComplexity int) int
		Type                     func(childComplexity int) int
		TypeID                   func(childComplexity int) int
		URI                      func(childComplexity int) int
	}

	MlschemaModelVersion struct {
		Associations             func(childComplexity int) int
		Attributions             func(childComplexity int) int
		Children                 func(childComplexity int) int
		CreateTimeSinceEpoch     func(childComplexity int) int
		ExternalID               func(childComplexity int) int
		ID                       func(childComplexity int) int
		LastUpdateTimeSinceEpoch func(childComplexity int) int
		Name                     func(childComplexity int) int
		Parents                  func(childComplexity int) int
		Properties               func(childComplexity int) int
		Type                     func(childComplexity int) int
		TypeID                   func(childComplexity int) int
	}

	MlschemaRegisteredModel struct {
		Associations             func(childComplexity int) int
		Attributions             func(childComplexity int) int
		Children                 func(childComplexity int) int
		CreateTimeSinceEpoch     func(childComplexity int) int
		ExternalID               func(childComplexity int) int
		ID                       func(childComplexity int) int
		LastUpdateTimeSinceEpoch func(childComplexity int) int
		Name                     func(childComplexity int) int
		Parents                  func(childComplexity int) int
		Properties               func(childComplexity int) int
		Type                     func(childComplexity int) int
		TypeID                   func(childComplexity int) int
	}

	MlschemaRun struct {
		Associations             func(childComplexity int) int
		CreateTimeSinceEpoch     func(childComplexity int) int
		Events                   func(childComplexity int) int
		ExternalID               func(childComplexity int) int
		ID                       func(childComplexity int) int
		LastKnownState           func(childComplexity int) int
		LastUpdateTimeSinceEpoch func(childComplexity int) int
		Name                     func(childComplexity int) int
		Properties               func(childComplexity int) int
		Type                     func(childComplexity int) int
		TypeID                   func(childComplexity int) int
	}

	MlschemaSoftware struct {
		Attributions             func(childComplexity int) int
		CreateTimeSinceEpoch     func(childComplexity int) int
		Events                   func(childComplexity int) int
		ExternalID               func(childComplexity int) int
		ID                       func(childComplexity int) int
		LastUpdateTimeSinceEpoch func(childComplexity int) int
		Name                     func(childComplexity int) int
		Properties               func(childComplexity int) int
		State                    func(childComplexity int) int
		Type                     func(childComplexity int) int
		TypeID                   func(childComplexity int) int
		URI                      func(childComplexity int) int
	}

	MlschemaStudy struct {
		Associations             func(childComplexity int) int
		CreateTimeSinceEpoch     func(childComplexity int) int
		Events                   func(childComplexity int) int
		ExternalID               func(childComplexity int) int
		ID                       func(childComplexity int) int
		LastKnownState           func(childComplexity int) int
		LastUpdateTimeSinceEpoch func(childComplexity int) int
		Name                     func(childComplexity int) int
		Properties               func(childComplexity int) int
		Type                     func(childComplexity int) int
		TypeID                   func(childComplexity int) int
	}

	MlschemaTask struct {
		Attributions             func(childComplexity int) int
		CreateTimeSinceEpoch     func(childComplexity int) int
		Events                   func(childComplexity int) int
		ExternalID               func(childComplexity int) int
		ID                       func(childComplexity int) int
		LastUpdateTimeSinceEpoch func(childComplexity int) int
		Name                     func(childComplexity int) int
		Properties               func(childComplexity int) int
		State                    func(childComplexity int) int
		Type                     func(childComplexity int) int
		TypeID                   func(childComplexity int) int
		URI                      func(childComplexity int) int
	}

	Mutation struct {
		CreateArtifactType func(childComplexity int, input *graph.ArtifactTypeInput) int
	}

	ProtoTypeValue struct {
		TypeURL func(childComplexity int) int
		Value   func(childComplexity int) int
	}

	ProtoValue struct {
		Value func(childComplexity int) int
	}

	Query struct {
		ArtifactTypes                         func(childComplexity int, filter *graph.TypeFilter) int
		Artifacts                             func(childComplexity int, filter *graph.InstanceFilter) int
		ContextTypes                          func(childComplexity int, filter *graph.TypeFilter) int
		Contexts                              func(childComplexity int, filter *graph.InstanceFilter) int
		Events                                func(childComplexity int) int
		ExecutionTypes                        func(childComplexity int, filter *graph.TypeFilter) int
		Executions                            func(childComplexity int, filter *graph.InstanceFilter) int
		MlmdDatasets                          func(childComplexity int, filter *graph.InstanceFilter) int
		MlmdDeploys                           func(childComplexity int, filter *graph.InstanceFilter) int
		MlmdEvaluates                         func(childComplexity int, filter *graph.InstanceFilter) int
		MlmdMetrics                           func(childComplexity int, filter *graph.InstanceFilter) int
		MlmdModels                            func(childComplexity int, filter *graph.InstanceFilter) int
		MlmdProcesses                         func(childComplexity int, filter *graph.InstanceFilter) int
		MlmdStatistics                        func(childComplexity int, filter *graph.InstanceFilter) int
		MlmdTrains                            func(childComplexity int, filter *graph.InstanceFilter) int
		MlmdTransforms                        func(childComplexity int, filter *graph.InstanceFilter) int
		MlschemaAlgorithms                    func(childComplexity int, filter *graph.InstanceFilter) int
		MlschemaData                          func(childComplexity int, filter *graph.InstanceFilter) int
		MlschemaDataCharacteristics           func(childComplexity int, filter *graph.InstanceFilter) int
		MlschemaDataSets                      func(childComplexity int, filter *graph.InstanceFilter) int
		MlschemaDatasetCharacteristics        func(childComplexity int, filter *graph.InstanceFilter) int
		MlschemaEvaluationMeasures            func(childComplexity int, filter *graph.InstanceFilter) int
		MlschemaEvaluationProcedures          func(childComplexity int, filter *graph.InstanceFilter) int
		MlschemaEvaluationSpecifications      func(childComplexity int, filter *graph.InstanceFilter) int
		MlschemaExperiments                   func(childComplexity int, filter *graph.InstanceFilter) int
		MlschemaFeatureCharacteristics        func(childComplexity int, filter *graph.InstanceFilter) int
		MlschemaFeatures                      func(childComplexity int, filter *graph.InstanceFilter) int
		MlschemaHyperParameterSettings        func(childComplexity int, filter *graph.InstanceFilter) int
		MlschemaHyperParameters               func(childComplexity int, filter *graph.InstanceFilter) int
		MlschemaImplementationCharacteristics func(childComplexity int, filter *graph.InstanceFilter) int
		MlschemaImplementations               func(childComplexity int, filter *graph.InstanceFilter) int
		MlschemaModelEvaluations              func(childComplexity int, filter *graph.InstanceFilter) int
		MlschemaModelVersions                 func(childComplexity int, filter *graph.InstanceFilter) int
		MlschemaModels                        func(childComplexity int, filter *graph.InstanceFilter) int
		MlschemaRegisteredModels              func(childComplexity int, filter *graph.InstanceFilter) int
		MlschemaRuns                          func(childComplexity int, filter *graph.InstanceFilter) int
		MlschemaSoftwares                     func(childComplexity int, filter *graph.InstanceFilter) int
		MlschemaStudies                       func(childComplexity int, filter *graph.InstanceFilter) int
		MlschemaTasks                         func(childComplexity int, filter *graph.InstanceFilter) int
		Types                                 func(childComplexity int, filter *graph.TypeFilter) int
	}

	StringValue struct {
		Value func(childComplexity int) int
	}

	StructTuple struct {
		Key   func(childComplexity int) int
		Value func(childComplexity int) int
	}

	StructValue struct {
		Value func(childComplexity int) int
	}

	TypeProperty struct {
		DataType func(childComplexity int) int
		Name     func(childComplexity int) int
	}
}

type ArtifactResolver interface {
	Type(ctx context.Context, obj *graph.Artifact) (*graph.ArtifactType, error)

	Attributions(ctx context.Context, obj *graph.Artifact) ([]*graph.Attribution, error)
	Events(ctx context.Context, obj *graph.Artifact) ([]*graph.Event, error)
}
type AssociationResolver interface {
	Context(ctx context.Context, obj *graph.Association) (graph.ContextInterface, error)
	Execution(ctx context.Context, obj *graph.Association) (graph.ExecutionInterface, error)
}
type AttributionResolver interface {
	Context(ctx context.Context, obj *graph.Attribution) (graph.ContextInterface, error)
	Artifact(ctx context.Context, obj *graph.Attribution) (graph.ArtifactInterface, error)
}
type ContextResolver interface {
	Type(ctx context.Context, obj *graph.Context) (*graph.ContextType, error)

	Parents(ctx context.Context, obj *graph.Context) ([]graph.ContextInterface, error)
	Children(ctx context.Context, obj *graph.Context) ([]graph.ContextInterface, error)
	Attributions(ctx context.Context, obj *graph.Context) ([]*graph.Attribution, error)
	Associations(ctx context.Context, obj *graph.Context) ([]*graph.Association, error)
}
type EventResolver interface {
	Artifact(ctx context.Context, obj *graph.Event) (graph.ArtifactInterface, error)
	Execution(ctx context.Context, obj *graph.Event) (graph.ExecutionInterface, error)
}
type ExecutionResolver interface {
	Type(ctx context.Context, obj *graph.Execution) (*graph.ExecutionType, error)

	Associations(ctx context.Context, obj *graph.Execution) ([]*graph.InstanceProperty, error)
	Events(ctx context.Context, obj *graph.Execution) ([]*graph.InstanceProperty, error)
}
type MlmdDatasetResolver interface {
	Type(ctx context.Context, obj *graph.MlmdDataset) (*graph.ArtifactType, error)

	Attributions(ctx context.Context, obj *graph.MlmdDataset) ([]*graph.Attribution, error)
	Events(ctx context.Context, obj *graph.MlmdDataset) ([]*graph.Event, error)
}
type MlmdDeployResolver interface {
	Type(ctx context.Context, obj *graph.MlmdDeploy) (*graph.ExecutionType, error)

	Associations(ctx context.Context, obj *graph.MlmdDeploy) ([]*graph.Association, error)
	Events(ctx context.Context, obj *graph.MlmdDeploy) ([]*graph.Event, error)
}
type MlmdEvaluateResolver interface {
	Type(ctx context.Context, obj *graph.MlmdEvaluate) (*graph.ExecutionType, error)

	Associations(ctx context.Context, obj *graph.MlmdEvaluate) ([]*graph.Association, error)
	Events(ctx context.Context, obj *graph.MlmdEvaluate) ([]*graph.Event, error)
}
type MlmdMetricsResolver interface {
	Type(ctx context.Context, obj *graph.MlmdMetrics) (*graph.ArtifactType, error)

	Attributions(ctx context.Context, obj *graph.MlmdMetrics) ([]*graph.Attribution, error)
	Events(ctx context.Context, obj *graph.MlmdMetrics) ([]*graph.Event, error)
}
type MlmdModelResolver interface {
	Type(ctx context.Context, obj *graph.MlmdModel) (*graph.ArtifactType, error)

	Attributions(ctx context.Context, obj *graph.MlmdModel) ([]*graph.Attribution, error)
	Events(ctx context.Context, obj *graph.MlmdModel) ([]*graph.Event, error)
}
type MlmdProcessResolver interface {
	Type(ctx context.Context, obj *graph.MlmdProcess) (*graph.ExecutionType, error)

	Associations(ctx context.Context, obj *graph.MlmdProcess) ([]*graph.Association, error)
	Events(ctx context.Context, obj *graph.MlmdProcess) ([]*graph.Event, error)
}
type MlmdStatisticsResolver interface {
	Type(ctx context.Context, obj *graph.MlmdStatistics) (*graph.ArtifactType, error)

	Attributions(ctx context.Context, obj *graph.MlmdStatistics) ([]*graph.Attribution, error)
	Events(ctx context.Context, obj *graph.MlmdStatistics) ([]*graph.Event, error)
}
type MlmdTrainResolver interface {
	Type(ctx context.Context, obj *graph.MlmdTrain) (*graph.ExecutionType, error)

	Associations(ctx context.Context, obj *graph.MlmdTrain) ([]*graph.Association, error)
	Events(ctx context.Context, obj *graph.MlmdTrain) ([]*graph.Event, error)
}
type MlmdTransformResolver interface {
	Type(ctx context.Context, obj *graph.MlmdTransform) (*graph.ExecutionType, error)

	Associations(ctx context.Context, obj *graph.MlmdTransform) ([]*graph.Association, error)
	Events(ctx context.Context, obj *graph.MlmdTransform) ([]*graph.Event, error)
}
type MlschemaAlgorithmResolver interface {
	Type(ctx context.Context, obj *graph.MlschemaAlgorithm) (*graph.ArtifactType, error)

	Attributions(ctx context.Context, obj *graph.MlschemaAlgorithm) ([]*graph.Attribution, error)
	Events(ctx context.Context, obj *graph.MlschemaAlgorithm) ([]*graph.Event, error)
}
type MlschemaDataResolver interface {
	Type(ctx context.Context, obj *graph.MlschemaData) (*graph.ArtifactType, error)

	Attributions(ctx context.Context, obj *graph.MlschemaData) ([]*graph.Attribution, error)
	Events(ctx context.Context, obj *graph.MlschemaData) ([]*graph.Event, error)
}
type MlschemaDataCharacteristicResolver interface {
	Type(ctx context.Context, obj *graph.MlschemaDataCharacteristic) (*graph.ContextType, error)

	Parents(ctx context.Context, obj *graph.MlschemaDataCharacteristic) ([]graph.ContextInterface, error)
	Children(ctx context.Context, obj *graph.MlschemaDataCharacteristic) ([]graph.ContextInterface, error)
	Attributions(ctx context.Context, obj *graph.MlschemaDataCharacteristic) ([]*graph.Attribution, error)
	Associations(ctx context.Context, obj *graph.MlschemaDataCharacteristic) ([]*graph.Association, error)
}
type MlschemaDataSetResolver interface {
	Type(ctx context.Context, obj *graph.MlschemaDataSet) (*graph.ArtifactType, error)

	Attributions(ctx context.Context, obj *graph.MlschemaDataSet) ([]*graph.Attribution, error)
	Events(ctx context.Context, obj *graph.MlschemaDataSet) ([]*graph.Event, error)
}
type MlschemaDatasetCharacteristicResolver interface {
	Type(ctx context.Context, obj *graph.MlschemaDatasetCharacteristic) (*graph.ArtifactType, error)

	Attributions(ctx context.Context, obj *graph.MlschemaDatasetCharacteristic) ([]*graph.Attribution, error)
	Events(ctx context.Context, obj *graph.MlschemaDatasetCharacteristic) ([]*graph.Event, error)
}
type MlschemaEvaluationMeasureResolver interface {
	Type(ctx context.Context, obj *graph.MlschemaEvaluationMeasure) (*graph.ArtifactType, error)

	Attributions(ctx context.Context, obj *graph.MlschemaEvaluationMeasure) ([]*graph.Attribution, error)
	Events(ctx context.Context, obj *graph.MlschemaEvaluationMeasure) ([]*graph.Event, error)
}
type MlschemaEvaluationProcedureResolver interface {
	Type(ctx context.Context, obj *graph.MlschemaEvaluationProcedure) (*graph.ArtifactType, error)

	Attributions(ctx context.Context, obj *graph.MlschemaEvaluationProcedure) ([]*graph.Attribution, error)
	Events(ctx context.Context, obj *graph.MlschemaEvaluationProcedure) ([]*graph.Event, error)
}
type MlschemaEvaluationSpecificationResolver interface {
	Type(ctx context.Context, obj *graph.MlschemaEvaluationSpecification) (*graph.ArtifactType, error)

	Attributions(ctx context.Context, obj *graph.MlschemaEvaluationSpecification) ([]*graph.Attribution, error)
	Events(ctx context.Context, obj *graph.MlschemaEvaluationSpecification) ([]*graph.Event, error)
}
type MlschemaExperimentResolver interface {
	Type(ctx context.Context, obj *graph.MlschemaExperiment) (*graph.ExecutionType, error)

	Associations(ctx context.Context, obj *graph.MlschemaExperiment) ([]*graph.Association, error)
	Events(ctx context.Context, obj *graph.MlschemaExperiment) ([]*graph.Event, error)
}
type MlschemaFeatureResolver interface {
	Type(ctx context.Context, obj *graph.MlschemaFeature) (*graph.ArtifactType, error)

	Attributions(ctx context.Context, obj *graph.MlschemaFeature) ([]*graph.Attribution, error)
	Events(ctx context.Context, obj *graph.MlschemaFeature) ([]*graph.Event, error)
}
type MlschemaFeatureCharacteristicResolver interface {
	Type(ctx context.Context, obj *graph.MlschemaFeatureCharacteristic) (*graph.ArtifactType, error)

	Attributions(ctx context.Context, obj *graph.MlschemaFeatureCharacteristic) ([]*graph.Attribution, error)
	Events(ctx context.Context, obj *graph.MlschemaFeatureCharacteristic) ([]*graph.Event, error)
}
type MlschemaHyperParameterResolver interface {
	Type(ctx context.Context, obj *graph.MlschemaHyperParameter) (*graph.ArtifactType, error)

	Attributions(ctx context.Context, obj *graph.MlschemaHyperParameter) ([]*graph.Attribution, error)
	Events(ctx context.Context, obj *graph.MlschemaHyperParameter) ([]*graph.Event, error)
}
type MlschemaHyperParameterSettingResolver interface {
	Type(ctx context.Context, obj *graph.MlschemaHyperParameterSetting) (*graph.ArtifactType, error)

	Attributions(ctx context.Context, obj *graph.MlschemaHyperParameterSetting) ([]*graph.Attribution, error)
	Events(ctx context.Context, obj *graph.MlschemaHyperParameterSetting) ([]*graph.Event, error)
}
type MlschemaImplementationResolver interface {
	Type(ctx context.Context, obj *graph.MlschemaImplementation) (*graph.ArtifactType, error)

	Attributions(ctx context.Context, obj *graph.MlschemaImplementation) ([]*graph.Attribution, error)
	Events(ctx context.Context, obj *graph.MlschemaImplementation) ([]*graph.Event, error)
}
type MlschemaImplementationCharacteristicResolver interface {
	Type(ctx context.Context, obj *graph.MlschemaImplementationCharacteristic) (*graph.ArtifactType, error)

	Attributions(ctx context.Context, obj *graph.MlschemaImplementationCharacteristic) ([]*graph.Attribution, error)
	Events(ctx context.Context, obj *graph.MlschemaImplementationCharacteristic) ([]*graph.Event, error)
}
type MlschemaModelResolver interface {
	Type(ctx context.Context, obj *graph.MlschemaModel) (*graph.ArtifactType, error)

	Attributions(ctx context.Context, obj *graph.MlschemaModel) ([]*graph.Attribution, error)
	Events(ctx context.Context, obj *graph.MlschemaModel) ([]*graph.Event, error)
}
type MlschemaModelEvaluationResolver interface {
	Type(ctx context.Context, obj *graph.MlschemaModelEvaluation) (*graph.ArtifactType, error)

	Attributions(ctx context.Context, obj *graph.MlschemaModelEvaluation) ([]*graph.Attribution, error)
	Events(ctx context.Context, obj *graph.MlschemaModelEvaluation) ([]*graph.Event, error)
}
type MlschemaModelVersionResolver interface {
	Type(ctx context.Context, obj *graph.MlschemaModelVersion) (*graph.ContextType, error)

	Parents(ctx context.Context, obj *graph.MlschemaModelVersion) ([]graph.ContextInterface, error)
	Children(ctx context.Context, obj *graph.MlschemaModelVersion) ([]graph.ContextInterface, error)
	Attributions(ctx context.Context, obj *graph.MlschemaModelVersion) ([]*graph.Attribution, error)
	Associations(ctx context.Context, obj *graph.MlschemaModelVersion) ([]*graph.Association, error)
}
type MlschemaRegisteredModelResolver interface {
	Type(ctx context.Context, obj *graph.MlschemaRegisteredModel) (*graph.ContextType, error)

	Parents(ctx context.Context, obj *graph.MlschemaRegisteredModel) ([]graph.ContextInterface, error)
	Children(ctx context.Context, obj *graph.MlschemaRegisteredModel) ([]graph.ContextInterface, error)
	Attributions(ctx context.Context, obj *graph.MlschemaRegisteredModel) ([]*graph.Attribution, error)
	Associations(ctx context.Context, obj *graph.MlschemaRegisteredModel) ([]*graph.Association, error)
}
type MlschemaRunResolver interface {
	Type(ctx context.Context, obj *graph.MlschemaRun) (*graph.ExecutionType, error)

	Associations(ctx context.Context, obj *graph.MlschemaRun) ([]*graph.Association, error)
	Events(ctx context.Context, obj *graph.MlschemaRun) ([]*graph.Event, error)
}
type MlschemaSoftwareResolver interface {
	Type(ctx context.Context, obj *graph.MlschemaSoftware) (*graph.ArtifactType, error)

	Attributions(ctx context.Context, obj *graph.MlschemaSoftware) ([]*graph.Attribution, error)
	Events(ctx context.Context, obj *graph.MlschemaSoftware) ([]*graph.Event, error)
}
type MlschemaStudyResolver interface {
	Type(ctx context.Context, obj *graph.MlschemaStudy) (*graph.ExecutionType, error)

	Associations(ctx context.Context, obj *graph.MlschemaStudy) ([]*graph.Association, error)
	Events(ctx context.Context, obj *graph.MlschemaStudy) ([]*graph.Event, error)
}
type MlschemaTaskResolver interface {
	Type(ctx context.Context, obj *graph.MlschemaTask) (*graph.ArtifactType, error)

	Attributions(ctx context.Context, obj *graph.MlschemaTask) ([]*graph.Attribution, error)
	Events(ctx context.Context, obj *graph.MlschemaTask) ([]*graph.Event, error)
}
type MutationResolver interface {
	CreateArtifactType(ctx context.Context, input *graph.ArtifactTypeInput) (*graph.ArtifactType, error)
}
type QueryResolver interface {
	Types(ctx context.Context, filter *graph.TypeFilter) ([]graph.Type, error)
	ArtifactTypes(ctx context.Context, filter *graph.TypeFilter) ([]*graph.ArtifactType, error)
	ContextTypes(ctx context.Context, filter *graph.TypeFilter) ([]*graph.ContextType, error)
	ExecutionTypes(ctx context.Context, filter *graph.TypeFilter) ([]*graph.ExecutionType, error)
	Artifacts(ctx context.Context, filter *graph.InstanceFilter) ([]graph.ArtifactInterface, error)
	Contexts(ctx context.Context, filter *graph.InstanceFilter) ([]graph.ContextInterface, error)
	Executions(ctx context.Context, filter *graph.InstanceFilter) ([]graph.ExecutionInterface, error)
	Events(ctx context.Context) ([]*graph.Event, error)
	MlmdDatasets(ctx context.Context, filter *graph.InstanceFilter) ([]*graph.MlmdDataset, error)
	MlmdModels(ctx context.Context, filter *graph.InstanceFilter) ([]*graph.MlmdModel, error)
	MlmdMetrics(ctx context.Context, filter *graph.InstanceFilter) ([]*graph.MlmdMetrics, error)
	MlmdStatistics(ctx context.Context, filter *graph.InstanceFilter) ([]*graph.MlmdStatistics, error)
	MlmdTrains(ctx context.Context, filter *graph.InstanceFilter) ([]*graph.MlmdTrain, error)
	MlmdTransforms(ctx context.Context, filter *graph.InstanceFilter) ([]*graph.MlmdTransform, error)
	MlmdProcesses(ctx context.Context, filter *graph.InstanceFilter) ([]*graph.MlmdProcess, error)
	MlmdEvaluates(ctx context.Context, filter *graph.InstanceFilter) ([]*graph.MlmdEvaluate, error)
	MlmdDeploys(ctx context.Context, filter *graph.InstanceFilter) ([]*graph.MlmdDeploy, error)
	MlschemaModels(ctx context.Context, filter *graph.InstanceFilter) ([]*graph.MlschemaModel, error)
	MlschemaModelEvaluations(ctx context.Context, filter *graph.InstanceFilter) ([]*graph.MlschemaModelEvaluation, error)
	MlschemaEvaluationMeasures(ctx context.Context, filter *graph.InstanceFilter) ([]*graph.MlschemaEvaluationMeasure, error)
	MlschemaEvaluationSpecifications(ctx context.Context, filter *graph.InstanceFilter) ([]*graph.MlschemaEvaluationSpecification, error)
	MlschemaEvaluationProcedures(ctx context.Context, filter *graph.InstanceFilter) ([]*graph.MlschemaEvaluationProcedure, error)
	MlschemaTasks(ctx context.Context, filter *graph.InstanceFilter) ([]*graph.MlschemaTask, error)
	MlschemaData(ctx context.Context, filter *graph.InstanceFilter) ([]*graph.MlschemaData, error)
	MlschemaDataSets(ctx context.Context, filter *graph.InstanceFilter) ([]*graph.MlschemaDataSet, error)
	MlschemaFeatures(ctx context.Context, filter *graph.InstanceFilter) ([]*graph.MlschemaFeature, error)
	MlschemaAlgorithms(ctx context.Context, filter *graph.InstanceFilter) ([]*graph.MlschemaAlgorithm, error)
	MlschemaSoftwares(ctx context.Context, filter *graph.InstanceFilter) ([]*graph.MlschemaSoftware, error)
	MlschemaImplementations(ctx context.Context, filter *graph.InstanceFilter) ([]*graph.MlschemaImplementation, error)
	MlschemaHyperParameters(ctx context.Context, filter *graph.InstanceFilter) ([]*graph.MlschemaHyperParameter, error)
	MlschemaHyperParameterSettings(ctx context.Context, filter *graph.InstanceFilter) ([]*graph.MlschemaHyperParameterSetting, error)
	MlschemaImplementationCharacteristics(ctx context.Context, filter *graph.InstanceFilter) ([]*graph.MlschemaImplementationCharacteristic, error)
	MlschemaDatasetCharacteristics(ctx context.Context, filter *graph.InstanceFilter) ([]*graph.MlschemaDatasetCharacteristic, error)
	MlschemaFeatureCharacteristics(ctx context.Context, filter *graph.InstanceFilter) ([]*graph.MlschemaFeatureCharacteristic, error)
	MlschemaRegisteredModels(ctx context.Context, filter *graph.InstanceFilter) ([]*graph.MlschemaRegisteredModel, error)
	MlschemaModelVersions(ctx context.Context, filter *graph.InstanceFilter) ([]*graph.MlschemaModelVersion, error)
	MlschemaDataCharacteristics(ctx context.Context, filter *graph.InstanceFilter) ([]*graph.MlschemaDataCharacteristic, error)
	MlschemaStudies(ctx context.Context, filter *graph.InstanceFilter) ([]*graph.MlschemaStudy, error)
	MlschemaExperiments(ctx context.Context, filter *graph.InstanceFilter) ([]*graph.MlschemaExperiment, error)
	MlschemaRuns(ctx context.Context, filter *graph.InstanceFilter) ([]*graph.MlschemaRun, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e, 0, 0, nil}
	_ = ec
	switch typeName + "." + field {

	case "Artifact.attributions":
		if e.complexity.Artifact.Attributions == nil {
			break
		}

		return e.complexity.Artifact.Attributions(childComplexity), true

	case "Artifact.createTimeSinceEpoch":
		if e.complexity.Artifact.CreateTimeSinceEpoch == nil {
			break
		}

		return e.complexity.Artifact.CreateTimeSinceEpoch(childComplexity), true

	case "Artifact.events":
		if e.complexity.Artifact.Events == nil {
			break
		}

		return e.complexity.Artifact.Events(childComplexity), true

	case "Artifact.externalId":
		if e.complexity.Artifact.ExternalID == nil {
			break
		}

		return e.complexity.Artifact.ExternalID(childComplexity), true

	case "Artifact.id":
		if e.complexity.Artifact.ID == nil {
			break
		}

		return e.complexity.Artifact.ID(childComplexity), true

	case "Artifact.lastUpdateTimeSinceEpoch":
		if e.complexity.Artifact.LastUpdateTimeSinceEpoch == nil {
			break
		}

		return e.complexity.Artifact.LastUpdateTimeSinceEpoch(childComplexity), true

	case "Artifact.name":
		if e.complexity.Artifact.Name == nil {
			break
		}

		return e.complexity.Artifact.Name(childComplexity), true

	case "Artifact.properties":
		if e.complexity.Artifact.Properties == nil {
			break
		}

		return e.complexity.Artifact.Properties(childComplexity), true

	case "Artifact.state":
		if e.complexity.Artifact.State == nil {
			break
		}

		return e.complexity.Artifact.State(childComplexity), true

	case "Artifact.type":
		if e.complexity.Artifact.Type == nil {
			break
		}

		return e.complexity.Artifact.Type(childComplexity), true

	case "Artifact.typeId":
		if e.complexity.Artifact.TypeID == nil {
			break
		}

		return e.complexity.Artifact.TypeID(childComplexity), true

	case "Artifact.uri":
		if e.complexity.Artifact.URI == nil {
			break
		}

		return e.complexity.Artifact.URI(childComplexity), true

	case "ArtifactType.description":
		if e.complexity.ArtifactType.Description == nil {
			break
		}

		return e.complexity.ArtifactType.Description(childComplexity), true

	case "ArtifactType.externalId":
		if e.complexity.ArtifactType.ExternalID == nil {
			break
		}

		return e.complexity.ArtifactType.ExternalID(childComplexity), true

	case "ArtifactType.id":
		if e.complexity.ArtifactType.ID == nil {
			break
		}

		return e.complexity.ArtifactType.ID(childComplexity), true

	case "ArtifactType.name":
		if e.complexity.ArtifactType.Name == nil {
			break
		}

		return e.complexity.ArtifactType.Name(childComplexity), true

	case "ArtifactType.properties":
		if e.complexity.ArtifactType.Properties == nil {
			break
		}

		return e.complexity.ArtifactType.Properties(childComplexity), true

	case "ArtifactType.typeKind":
		if e.complexity.ArtifactType.TypeKind == nil {
			break
		}

		return e.complexity.ArtifactType.TypeKind(childComplexity), true

	case "ArtifactType.version":
		if e.complexity.ArtifactType.Version == nil {
			break
		}

		return e.complexity.ArtifactType.Version(childComplexity), true

	case "Association.context":
		if e.complexity.Association.Context == nil {
			break
		}

		return e.complexity.Association.Context(childComplexity), true

	case "Association.contextId":
		if e.complexity.Association.ContextID == nil {
			break
		}

		return e.complexity.Association.ContextID(childComplexity), true

	case "Association.execution":
		if e.complexity.Association.Execution == nil {
			break
		}

		return e.complexity.Association.Execution(childComplexity), true

	case "Association.executionId":
		if e.complexity.Association.ExecutionID == nil {
			break
		}

		return e.complexity.Association.ExecutionID(childComplexity), true

	case "Association.id":
		if e.complexity.Association.ID == nil {
			break
		}

		return e.complexity.Association.ID(childComplexity), true

	case "Attribution.artifact":
		if e.complexity.Attribution.Artifact == nil {
			break
		}

		return e.complexity.Attribution.Artifact(childComplexity), true

	case "Attribution.artifactId":
		if e.complexity.Attribution.ArtifactID == nil {
			break
		}

		return e.complexity.Attribution.ArtifactID(childComplexity), true

	case "Attribution.context":
		if e.complexity.Attribution.Context == nil {
			break
		}

		return e.complexity.Attribution.Context(childComplexity), true

	case "Attribution.contextId":
		if e.complexity.Attribution.ContextID == nil {
			break
		}

		return e.complexity.Attribution.ContextID(childComplexity), true

	case "Attribution.id":
		if e.complexity.Attribution.ID == nil {
			break
		}

		return e.complexity.Attribution.ID(childComplexity), true

	case "BoolValue.value":
		if e.complexity.BoolValue.Value == nil {
			break
		}

		return e.complexity.BoolValue.Value(childComplexity), true

	case "Context.associations":
		if e.complexity.Context.Associations == nil {
			break
		}

		return e.complexity.Context.Associations(childComplexity), true

	case "Context.attributions":
		if e.complexity.Context.Attributions == nil {
			break
		}

		return e.complexity.Context.Attributions(childComplexity), true

	case "Context.children":
		if e.complexity.Context.Children == nil {
			break
		}

		return e.complexity.Context.Children(childComplexity), true

	case "Context.createTimeSinceEpoch":
		if e.complexity.Context.CreateTimeSinceEpoch == nil {
			break
		}

		return e.complexity.Context.CreateTimeSinceEpoch(childComplexity), true

	case "Context.externalId":
		if e.complexity.Context.ExternalID == nil {
			break
		}

		return e.complexity.Context.ExternalID(childComplexity), true

	case "Context.id":
		if e.complexity.Context.ID == nil {
			break
		}

		return e.complexity.Context.ID(childComplexity), true

	case "Context.lastUpdateTimeSinceEpoch":
		if e.complexity.Context.LastUpdateTimeSinceEpoch == nil {
			break
		}

		return e.complexity.Context.LastUpdateTimeSinceEpoch(childComplexity), true

	case "Context.name":
		if e.complexity.Context.Name == nil {
			break
		}

		return e.complexity.Context.Name(childComplexity), true

	case "Context.parents":
		if e.complexity.Context.Parents == nil {
			break
		}

		return e.complexity.Context.Parents(childComplexity), true

	case "Context.properties":
		if e.complexity.Context.Properties == nil {
			break
		}

		return e.complexity.Context.Properties(childComplexity), true

	case "Context.type":
		if e.complexity.Context.Type == nil {
			break
		}

		return e.complexity.Context.Type(childComplexity), true

	case "Context.typeId":
		if e.complexity.Context.TypeID == nil {
			break
		}

		return e.complexity.Context.TypeID(childComplexity), true

	case "ContextType.description":
		if e.complexity.ContextType.Description == nil {
			break
		}

		return e.complexity.ContextType.Description(childComplexity), true

	case "ContextType.externalId":
		if e.complexity.ContextType.ExternalID == nil {
			break
		}

		return e.complexity.ContextType.ExternalID(childComplexity), true

	case "ContextType.id":
		if e.complexity.ContextType.ID == nil {
			break
		}

		return e.complexity.ContextType.ID(childComplexity), true

	case "ContextType.name":
		if e.complexity.ContextType.Name == nil {
			break
		}

		return e.complexity.ContextType.Name(childComplexity), true

	case "ContextType.properties":
		if e.complexity.ContextType.Properties == nil {
			break
		}

		return e.complexity.ContextType.Properties(childComplexity), true

	case "ContextType.typeKind":
		if e.complexity.ContextType.TypeKind == nil {
			break
		}

		return e.complexity.ContextType.TypeKind(childComplexity), true

	case "ContextType.version":
		if e.complexity.ContextType.Version == nil {
			break
		}

		return e.complexity.ContextType.Version(childComplexity), true

	case "DoubleValue.value":
		if e.complexity.DoubleValue.Value == nil {
			break
		}

		return e.complexity.DoubleValue.Value(childComplexity), true

	case "Event.artifact":
		if e.complexity.Event.Artifact == nil {
			break
		}

		return e.complexity.Event.Artifact(childComplexity), true

	case "Event.artifactId":
		if e.complexity.Event.ArtifactID == nil {
			break
		}

		return e.complexity.Event.ArtifactID(childComplexity), true

	case "Event.execution":
		if e.complexity.Event.Execution == nil {
			break
		}

		return e.complexity.Event.Execution(childComplexity), true

	case "Event.executionId":
		if e.complexity.Event.ExecutionID == nil {
			break
		}

		return e.complexity.Event.ExecutionID(childComplexity), true

	case "Event.id":
		if e.complexity.Event.ID == nil {
			break
		}

		return e.complexity.Event.ID(childComplexity), true

	case "Event.millisecondsSinceEpoch":
		if e.complexity.Event.MillisecondsSinceEpoch == nil {
			break
		}

		return e.complexity.Event.MillisecondsSinceEpoch(childComplexity), true

	case "Event.path":
		if e.complexity.Event.Path == nil {
			break
		}

		return e.complexity.Event.Path(childComplexity), true

	case "Event.type":
		if e.complexity.Event.Type == nil {
			break
		}

		return e.complexity.Event.Type(childComplexity), true

	case "EventStepIndex.index":
		if e.complexity.EventStepIndex.Index == nil {
			break
		}

		return e.complexity.EventStepIndex.Index(childComplexity), true

	case "EventStepKey.key":
		if e.complexity.EventStepKey.Key == nil {
			break
		}

		return e.complexity.EventStepKey.Key(childComplexity), true

	case "Execution.associations":
		if e.complexity.Execution.Associations == nil {
			break
		}

		return e.complexity.Execution.Associations(childComplexity), true

	case "Execution.createTimeSinceEpoch":
		if e.complexity.Execution.CreateTimeSinceEpoch == nil {
			break
		}

		return e.complexity.Execution.CreateTimeSinceEpoch(childComplexity), true

	case "Execution.events":
		if e.complexity.Execution.Events == nil {
			break
		}

		return e.complexity.Execution.Events(childComplexity), true

	case "Execution.externalId":
		if e.complexity.Execution.ExternalID == nil {
			break
		}

		return e.complexity.Execution.ExternalID(childComplexity), true

	case "Execution.id":
		if e.complexity.Execution.ID == nil {
			break
		}

		return e.complexity.Execution.ID(childComplexity), true

	case "Execution.lastKnownState":
		if e.complexity.Execution.LastKnownState == nil {
			break
		}

		return e.complexity.Execution.LastKnownState(childComplexity), true

	case "Execution.lastUpdateTimeSinceEpoch":
		if e.complexity.Execution.LastUpdateTimeSinceEpoch == nil {
			break
		}

		return e.complexity.Execution.LastUpdateTimeSinceEpoch(childComplexity), true

	case "Execution.name":
		if e.complexity.Execution.Name == nil {
			break
		}

		return e.complexity.Execution.Name(childComplexity), true

	case "Execution.properties":
		if e.complexity.Execution.Properties == nil {
			break
		}

		return e.complexity.Execution.Properties(childComplexity), true

	case "Execution.type":
		if e.complexity.Execution.Type == nil {
			break
		}

		return e.complexity.Execution.Type(childComplexity), true

	case "Execution.typeId":
		if e.complexity.Execution.TypeID == nil {
			break
		}

		return e.complexity.Execution.TypeID(childComplexity), true

	case "ExecutionType.description":
		if e.complexity.ExecutionType.Description == nil {
			break
		}

		return e.complexity.ExecutionType.Description(childComplexity), true

	case "ExecutionType.externalId":
		if e.complexity.ExecutionType.ExternalID == nil {
			break
		}

		return e.complexity.ExecutionType.ExternalID(childComplexity), true

	case "ExecutionType.id":
		if e.complexity.ExecutionType.ID == nil {
			break
		}

		return e.complexity.ExecutionType.ID(childComplexity), true

	case "ExecutionType.inputType":
		if e.complexity.ExecutionType.InputType == nil {
			break
		}

		return e.complexity.ExecutionType.InputType(childComplexity), true

	case "ExecutionType.name":
		if e.complexity.ExecutionType.Name == nil {
			break
		}

		return e.complexity.ExecutionType.Name(childComplexity), true

	case "ExecutionType.outputType":
		if e.complexity.ExecutionType.OutputType == nil {
			break
		}

		return e.complexity.ExecutionType.OutputType(childComplexity), true

	case "ExecutionType.properties":
		if e.complexity.ExecutionType.Properties == nil {
			break
		}

		return e.complexity.ExecutionType.Properties(childComplexity), true

	case "ExecutionType.typeKind":
		if e.complexity.ExecutionType.TypeKind == nil {
			break
		}

		return e.complexity.ExecutionType.TypeKind(childComplexity), true

	case "ExecutionType.version":
		if e.complexity.ExecutionType.Version == nil {
			break
		}

		return e.complexity.ExecutionType.Version(childComplexity), true

	case "InstanceProperty.isCustomProperty":
		if e.complexity.InstanceProperty.IsCustomProperty == nil {
			break
		}

		return e.complexity.InstanceProperty.IsCustomProperty(childComplexity), true

	case "InstanceProperty.name":
		if e.complexity.InstanceProperty.Name == nil {
			break
		}

		return e.complexity.InstanceProperty.Name(childComplexity), true

	case "InstanceProperty.propertyValue":
		if e.complexity.InstanceProperty.PropertyValue == nil {
			break
		}

		return e.complexity.InstanceProperty.PropertyValue(childComplexity), true

	case "IntValue.value":
		if e.complexity.IntValue.Value == nil {
			break
		}

		return e.complexity.IntValue.Value(childComplexity), true

	case "ListValue.value":
		if e.complexity.ListValue.Value == nil {
			break
		}

		return e.complexity.ListValue.Value(childComplexity), true

	case "MlmdDataset.attributions":
		if e.complexity.MlmdDataset.Attributions == nil {
			break
		}

		return e.complexity.MlmdDataset.Attributions(childComplexity), true

	case "MlmdDataset.createTimeSinceEpoch":
		if e.complexity.MlmdDataset.CreateTimeSinceEpoch == nil {
			break
		}

		return e.complexity.MlmdDataset.CreateTimeSinceEpoch(childComplexity), true

	case "MlmdDataset.events":
		if e.complexity.MlmdDataset.Events == nil {
			break
		}

		return e.complexity.MlmdDataset.Events(childComplexity), true

	case "MlmdDataset.externalId":
		if e.complexity.MlmdDataset.ExternalID == nil {
			break
		}

		return e.complexity.MlmdDataset.ExternalID(childComplexity), true

	case "MlmdDataset.id":
		if e.complexity.MlmdDataset.ID == nil {
			break
		}

		return e.complexity.MlmdDataset.ID(childComplexity), true

	case "MlmdDataset.intProp":
		if e.complexity.MlmdDataset.IntProp == nil {
			break
		}

		return e.complexity.MlmdDataset.IntProp(childComplexity), true

	case "MlmdDataset.lastUpdateTimeSinceEpoch":
		if e.complexity.MlmdDataset.LastUpdateTimeSinceEpoch == nil {
			break
		}

		return e.complexity.MlmdDataset.LastUpdateTimeSinceEpoch(childComplexity), true

	case "MlmdDataset.name":
		if e.complexity.MlmdDataset.Name == nil {
			break
		}

		return e.complexity.MlmdDataset.Name(childComplexity), true

	case "MlmdDataset.properties":
		if e.complexity.MlmdDataset.Properties == nil {
			break
		}

		return e.complexity.MlmdDataset.Properties(childComplexity), true

	case "MlmdDataset.secondProp":
		if e.complexity.MlmdDataset.SecondProp == nil {
			break
		}

		return e.complexity.MlmdDataset.SecondProp(childComplexity), true

	case "MlmdDataset.state":
		if e.complexity.MlmdDataset.State == nil {
			break
		}

		return e.complexity.MlmdDataset.State(childComplexity), true

	case "MlmdDataset.type":
		if e.complexity.MlmdDataset.Type == nil {
			break
		}

		return e.complexity.MlmdDataset.Type(childComplexity), true

	case "MlmdDataset.typeId":
		if e.complexity.MlmdDataset.TypeID == nil {
			break
		}

		return e.complexity.MlmdDataset.TypeID(childComplexity), true

	case "MlmdDataset.uri":
		if e.complexity.MlmdDataset.URI == nil {
			break
		}

		return e.complexity.MlmdDataset.URI(childComplexity), true

	case "MlmdDeploy.associations":
		if e.complexity.MlmdDeploy.Associations == nil {
			break
		}

		return e.complexity.MlmdDeploy.Associations(childComplexity), true

	case "MlmdDeploy.createTimeSinceEpoch":
		if e.complexity.MlmdDeploy.CreateTimeSinceEpoch == nil {
			break
		}

		return e.complexity.MlmdDeploy.CreateTimeSinceEpoch(childComplexity), true

	case "MlmdDeploy.events":
		if e.complexity.MlmdDeploy.Events == nil {
			break
		}

		return e.complexity.MlmdDeploy.Events(childComplexity), true

	case "MlmdDeploy.externalId":
		if e.complexity.MlmdDeploy.ExternalID == nil {
			break
		}

		return e.complexity.MlmdDeploy.ExternalID(childComplexity), true

	case "MlmdDeploy.id":
		if e.complexity.MlmdDeploy.ID == nil {
			break
		}

		return e.complexity.MlmdDeploy.ID(childComplexity), true

	case "MlmdDeploy.lastKnownState":
		if e.complexity.MlmdDeploy.LastKnownState == nil {
			break
		}

		return e.complexity.MlmdDeploy.LastKnownState(childComplexity), true

	case "MlmdDeploy.lastUpdateTimeSinceEpoch":
		if e.complexity.MlmdDeploy.LastUpdateTimeSinceEpoch == nil {
			break
		}

		return e.complexity.MlmdDeploy.LastUpdateTimeSinceEpoch(childComplexity), true

	case "MlmdDeploy.name":
		if e.complexity.MlmdDeploy.Name == nil {
			break
		}

		return e.complexity.MlmdDeploy.Name(childComplexity), true

	case "MlmdDeploy.properties":
		if e.complexity.MlmdDeploy.Properties == nil {
			break
		}

		return e.complexity.MlmdDeploy.Properties(childComplexity), true

	case "MlmdDeploy.type":
		if e.complexity.MlmdDeploy.Type == nil {
			break
		}

		return e.complexity.MlmdDeploy.Type(childComplexity), true

	case "MlmdDeploy.typeId":
		if e.complexity.MlmdDeploy.TypeID == nil {
			break
		}

		return e.complexity.MlmdDeploy.TypeID(childComplexity), true

	case "MlmdEvaluate.associations":
		if e.complexity.MlmdEvaluate.Associations == nil {
			break
		}

		return e.complexity.MlmdEvaluate.Associations(childComplexity), true

	case "MlmdEvaluate.createTimeSinceEpoch":
		if e.complexity.MlmdEvaluate.CreateTimeSinceEpoch == nil {
			break
		}

		return e.complexity.MlmdEvaluate.CreateTimeSinceEpoch(childComplexity), true

	case "MlmdEvaluate.events":
		if e.complexity.MlmdEvaluate.Events == nil {
			break
		}

		return e.complexity.MlmdEvaluate.Events(childComplexity), true

	case "MlmdEvaluate.externalId":
		if e.complexity.MlmdEvaluate.ExternalID == nil {
			break
		}

		return e.complexity.MlmdEvaluate.ExternalID(childComplexity), true

	case "MlmdEvaluate.id":
		if e.complexity.MlmdEvaluate.ID == nil {
			break
		}

		return e.complexity.MlmdEvaluate.ID(childComplexity), true

	case "MlmdEvaluate.lastKnownState":
		if e.complexity.MlmdEvaluate.LastKnownState == nil {
			break
		}

		return e.complexity.MlmdEvaluate.LastKnownState(childComplexity), true

	case "MlmdEvaluate.lastUpdateTimeSinceEpoch":
		if e.complexity.MlmdEvaluate.LastUpdateTimeSinceEpoch == nil {
			break
		}

		return e.complexity.MlmdEvaluate.LastUpdateTimeSinceEpoch(childComplexity), true

	case "MlmdEvaluate.name":
		if e.complexity.MlmdEvaluate.Name == nil {
			break
		}

		return e.complexity.MlmdEvaluate.Name(childComplexity), true

	case "MlmdEvaluate.properties":
		if e.complexity.MlmdEvaluate.Properties == nil {
			break
		}

		return e.complexity.MlmdEvaluate.Properties(childComplexity), true

	case "MlmdEvaluate.type":
		if e.complexity.MlmdEvaluate.Type == nil {
			break
		}

		return e.complexity.MlmdEvaluate.Type(childComplexity), true

	case "MlmdEvaluate.typeId":
		if e.complexity.MlmdEvaluate.TypeID == nil {
			break
		}

		return e.complexity.MlmdEvaluate.TypeID(childComplexity), true

	case "MlmdMetrics.attributions":
		if e.complexity.MlmdMetrics.Attributions == nil {
			break
		}

		return e.complexity.MlmdMetrics.Attributions(childComplexity), true

	case "MlmdMetrics.createTimeSinceEpoch":
		if e.complexity.MlmdMetrics.CreateTimeSinceEpoch == nil {
			break
		}

		return e.complexity.MlmdMetrics.CreateTimeSinceEpoch(childComplexity), true

	case "MlmdMetrics.events":
		if e.complexity.MlmdMetrics.Events == nil {
			break
		}

		return e.complexity.MlmdMetrics.Events(childComplexity), true

	case "MlmdMetrics.externalId":
		if e.complexity.MlmdMetrics.ExternalID == nil {
			break
		}

		return e.complexity.MlmdMetrics.ExternalID(childComplexity), true

	case "MlmdMetrics.id":
		if e.complexity.MlmdMetrics.ID == nil {
			break
		}

		return e.complexity.MlmdMetrics.ID(childComplexity), true

	case "MlmdMetrics.lastUpdateTimeSinceEpoch":
		if e.complexity.MlmdMetrics.LastUpdateTimeSinceEpoch == nil {
			break
		}

		return e.complexity.MlmdMetrics.LastUpdateTimeSinceEpoch(childComplexity), true

	case "MlmdMetrics.name":
		if e.complexity.MlmdMetrics.Name == nil {
			break
		}

		return e.complexity.MlmdMetrics.Name(childComplexity), true

	case "MlmdMetrics.properties":
		if e.complexity.MlmdMetrics.Properties == nil {
			break
		}

		return e.complexity.MlmdMetrics.Properties(childComplexity), true

	case "MlmdMetrics.state":
		if e.complexity.MlmdMetrics.State == nil {
			break
		}

		return e.complexity.MlmdMetrics.State(childComplexity), true

	case "MlmdMetrics.stringProp":
		if e.complexity.MlmdMetrics.StringProp == nil {
			break
		}

		return e.complexity.MlmdMetrics.StringProp(childComplexity), true

	case "MlmdMetrics.type":
		if e.complexity.MlmdMetrics.Type == nil {
			break
		}

		return e.complexity.MlmdMetrics.Type(childComplexity), true

	case "MlmdMetrics.typeId":
		if e.complexity.MlmdMetrics.TypeID == nil {
			break
		}

		return e.complexity.MlmdMetrics.TypeID(childComplexity), true

	case "MlmdMetrics.uri":
		if e.complexity.MlmdMetrics.URI == nil {
			break
		}

		return e.complexity.MlmdMetrics.URI(childComplexity), true

	case "MlmdModel.attributions":
		if e.complexity.MlmdModel.Attributions == nil {
			break
		}

		return e.complexity.MlmdModel.Attributions(childComplexity), true

	case "MlmdModel.createTimeSinceEpoch":
		if e.complexity.MlmdModel.CreateTimeSinceEpoch == nil {
			break
		}

		return e.complexity.MlmdModel.CreateTimeSinceEpoch(childComplexity), true

	case "MlmdModel.doubleProp":
		if e.complexity.MlmdModel.DoubleProp == nil {
			break
		}

		return e.complexity.MlmdModel.DoubleProp(childComplexity), true

	case "MlmdModel.events":
		if e.complexity.MlmdModel.Events == nil {
			break
		}

		return e.complexity.MlmdModel.Events(childComplexity), true

	case "MlmdModel.externalId":
		if e.complexity.MlmdModel.ExternalID == nil {
			break
		}

		return e.complexity.MlmdModel.ExternalID(childComplexity), true

	case "MlmdModel.id":
		if e.complexity.MlmdModel.ID == nil {
			break
		}

		return e.complexity.MlmdModel.ID(childComplexity), true

	case "MlmdModel.lastUpdateTimeSinceEpoch":
		if e.complexity.MlmdModel.LastUpdateTimeSinceEpoch == nil {
			break
		}

		return e.complexity.MlmdModel.LastUpdateTimeSinceEpoch(childComplexity), true

	case "MlmdModel.name":
		if e.complexity.MlmdModel.Name == nil {
			break
		}

		return e.complexity.MlmdModel.Name(childComplexity), true

	case "MlmdModel.properties":
		if e.complexity.MlmdModel.Properties == nil {
			break
		}

		return e.complexity.MlmdModel.Properties(childComplexity), true

	case "MlmdModel.state":
		if e.complexity.MlmdModel.State == nil {
			break
		}

		return e.complexity.MlmdModel.State(childComplexity), true

	case "MlmdModel.type":
		if e.complexity.MlmdModel.Type == nil {
			break
		}

		return e.complexity.MlmdModel.Type(childComplexity), true

	case "MlmdModel.typeId":
		if e.complexity.MlmdModel.TypeID == nil {
			break
		}

		return e.complexity.MlmdModel.TypeID(childComplexity), true

	case "MlmdModel.uri":
		if e.complexity.MlmdModel.URI == nil {
			break
		}

		return e.complexity.MlmdModel.URI(childComplexity), true

	case "MlmdProcess.associations":
		if e.complexity.MlmdProcess.Associations == nil {
			break
		}

		return e.complexity.MlmdProcess.Associations(childComplexity), true

	case "MlmdProcess.createTimeSinceEpoch":
		if e.complexity.MlmdProcess.CreateTimeSinceEpoch == nil {
			break
		}

		return e.complexity.MlmdProcess.CreateTimeSinceEpoch(childComplexity), true

	case "MlmdProcess.events":
		if e.complexity.MlmdProcess.Events == nil {
			break
		}

		return e.complexity.MlmdProcess.Events(childComplexity), true

	case "MlmdProcess.externalId":
		if e.complexity.MlmdProcess.ExternalID == nil {
			break
		}

		return e.complexity.MlmdProcess.ExternalID(childComplexity), true

	case "MlmdProcess.id":
		if e.complexity.MlmdProcess.ID == nil {
			break
		}

		return e.complexity.MlmdProcess.ID(childComplexity), true

	case "MlmdProcess.lastKnownState":
		if e.complexity.MlmdProcess.LastKnownState == nil {
			break
		}

		return e.complexity.MlmdProcess.LastKnownState(childComplexity), true

	case "MlmdProcess.lastUpdateTimeSinceEpoch":
		if e.complexity.MlmdProcess.LastUpdateTimeSinceEpoch == nil {
			break
		}

		return e.complexity.MlmdProcess.LastUpdateTimeSinceEpoch(childComplexity), true

	case "MlmdProcess.name":
		if e.complexity.MlmdProcess.Name == nil {
			break
		}

		return e.complexity.MlmdProcess.Name(childComplexity), true

	case "MlmdProcess.properties":
		if e.complexity.MlmdProcess.Properties == nil {
			break
		}

		return e.complexity.MlmdProcess.Properties(childComplexity), true

	case "MlmdProcess.type":
		if e.complexity.MlmdProcess.Type == nil {
			break
		}

		return e.complexity.MlmdProcess.Type(childComplexity), true

	case "MlmdProcess.typeId":
		if e.complexity.MlmdProcess.TypeID == nil {
			break
		}

		return e.complexity.MlmdProcess.TypeID(childComplexity), true

	case "MlmdStatistics.attributions":
		if e.complexity.MlmdStatistics.Attributions == nil {
			break
		}

		return e.complexity.MlmdStatistics.Attributions(childComplexity), true

	case "MlmdStatistics.createTimeSinceEpoch":
		if e.complexity.MlmdStatistics.CreateTimeSinceEpoch == nil {
			break
		}

		return e.complexity.MlmdStatistics.CreateTimeSinceEpoch(childComplexity), true

	case "MlmdStatistics.events":
		if e.complexity.MlmdStatistics.Events == nil {
			break
		}

		return e.complexity.MlmdStatistics.Events(childComplexity), true

	case "MlmdStatistics.externalId":
		if e.complexity.MlmdStatistics.ExternalID == nil {
			break
		}

		return e.complexity.MlmdStatistics.ExternalID(childComplexity), true

	case "MlmdStatistics.id":
		if e.complexity.MlmdStatistics.ID == nil {
			break
		}

		return e.complexity.MlmdStatistics.ID(childComplexity), true

	case "MlmdStatistics.lastUpdateTimeSinceEpoch":
		if e.complexity.MlmdStatistics.LastUpdateTimeSinceEpoch == nil {
			break
		}

		return e.complexity.MlmdStatistics.LastUpdateTimeSinceEpoch(childComplexity), true

	case "MlmdStatistics.name":
		if e.complexity.MlmdStatistics.Name == nil {
			break
		}

		return e.complexity.MlmdStatistics.Name(childComplexity), true

	case "MlmdStatistics.properties":
		if e.complexity.MlmdStatistics.Properties == nil {
			break
		}

		return e.complexity.MlmdStatistics.Properties(childComplexity), true

	case "MlmdStatistics.state":
		if e.complexity.MlmdStatistics.State == nil {
			break
		}

		return e.complexity.MlmdStatistics.State(childComplexity), true

	case "MlmdStatistics.structProp":
		if e.complexity.MlmdStatistics.StructProp == nil {
			break
		}

		return e.complexity.MlmdStatistics.StructProp(childComplexity), true

	case "MlmdStatistics.type":
		if e.complexity.MlmdStatistics.Type == nil {
			break
		}

		return e.complexity.MlmdStatistics.Type(childComplexity), true

	case "MlmdStatistics.typeId":
		if e.complexity.MlmdStatistics.TypeID == nil {
			break
		}

		return e.complexity.MlmdStatistics.TypeID(childComplexity), true

	case "MlmdStatistics.uri":
		if e.complexity.MlmdStatistics.URI == nil {
			break
		}

		return e.complexity.MlmdStatistics.URI(childComplexity), true

	case "MlmdTrain.associations":
		if e.complexity.MlmdTrain.Associations == nil {
			break
		}

		return e.complexity.MlmdTrain.Associations(childComplexity), true

	case "MlmdTrain.createTimeSinceEpoch":
		if e.complexity.MlmdTrain.CreateTimeSinceEpoch == nil {
			break
		}

		return e.complexity.MlmdTrain.CreateTimeSinceEpoch(childComplexity), true

	case "MlmdTrain.events":
		if e.complexity.MlmdTrain.Events == nil {
			break
		}

		return e.complexity.MlmdTrain.Events(childComplexity), true

	case "MlmdTrain.externalId":
		if e.complexity.MlmdTrain.ExternalID == nil {
			break
		}

		return e.complexity.MlmdTrain.ExternalID(childComplexity), true

	case "MlmdTrain.id":
		if e.complexity.MlmdTrain.ID == nil {
			break
		}

		return e.complexity.MlmdTrain.ID(childComplexity), true

	case "MlmdTrain.lastKnownState":
		if e.complexity.MlmdTrain.LastKnownState == nil {
			break
		}

		return e.complexity.MlmdTrain.LastKnownState(childComplexity), true

	case "MlmdTrain.lastUpdateTimeSinceEpoch":
		if e.complexity.MlmdTrain.LastUpdateTimeSinceEpoch == nil {
			break
		}

		return e.complexity.MlmdTrain.LastUpdateTimeSinceEpoch(childComplexity), true

	case "MlmdTrain.name":
		if e.complexity.MlmdTrain.Name == nil {
			break
		}

		return e.complexity.MlmdTrain.Name(childComplexity), true

	case "MlmdTrain.properties":
		if e.complexity.MlmdTrain.Properties == nil {
			break
		}

		return e.complexity.MlmdTrain.Properties(childComplexity), true

	case "MlmdTrain.protoProp":
		if e.complexity.MlmdTrain.ProtoProp == nil {
			break
		}

		return e.complexity.MlmdTrain.ProtoProp(childComplexity), true

	case "MlmdTrain.type":
		if e.complexity.MlmdTrain.Type == nil {
			break
		}

		return e.complexity.MlmdTrain.Type(childComplexity), true

	case "MlmdTrain.typeId":
		if e.complexity.MlmdTrain.TypeID == nil {
			break
		}

		return e.complexity.MlmdTrain.TypeID(childComplexity), true

	case "MlmdTransform.associations":
		if e.complexity.MlmdTransform.Associations == nil {
			break
		}

		return e.complexity.MlmdTransform.Associations(childComplexity), true

	case "MlmdTransform.booleanProp":
		if e.complexity.MlmdTransform.BooleanProp == nil {
			break
		}

		return e.complexity.MlmdTransform.BooleanProp(childComplexity), true

	case "MlmdTransform.createTimeSinceEpoch":
		if e.complexity.MlmdTransform.CreateTimeSinceEpoch == nil {
			break
		}

		return e.complexity.MlmdTransform.CreateTimeSinceEpoch(childComplexity), true

	case "MlmdTransform.events":
		if e.complexity.MlmdTransform.Events == nil {
			break
		}

		return e.complexity.MlmdTransform.Events(childComplexity), true

	case "MlmdTransform.externalId":
		if e.complexity.MlmdTransform.ExternalID == nil {
			break
		}

		return e.complexity.MlmdTransform.ExternalID(childComplexity), true

	case "MlmdTransform.id":
		if e.complexity.MlmdTransform.ID == nil {
			break
		}

		return e.complexity.MlmdTransform.ID(childComplexity), true

	case "MlmdTransform.lastKnownState":
		if e.complexity.MlmdTransform.LastKnownState == nil {
			break
		}

		return e.complexity.MlmdTransform.LastKnownState(childComplexity), true

	case "MlmdTransform.lastUpdateTimeSinceEpoch":
		if e.complexity.MlmdTransform.LastUpdateTimeSinceEpoch == nil {
			break
		}

		return e.complexity.MlmdTransform.LastUpdateTimeSinceEpoch(childComplexity), true

	case "MlmdTransform.name":
		if e.complexity.MlmdTransform.Name == nil {
			break
		}

		return e.complexity.MlmdTransform.Name(childComplexity), true

	case "MlmdTransform.properties":
		if e.complexity.MlmdTransform.Properties == nil {
			break
		}

		return e.complexity.MlmdTransform.Properties(childComplexity), true

	case "MlmdTransform.type":
		if e.complexity.MlmdTransform.Type == nil {
			break
		}

		return e.complexity.MlmdTransform.Type(childComplexity), true

	case "MlmdTransform.typeId":
		if e.complexity.MlmdTransform.TypeID == nil {
			break
		}

		return e.complexity.MlmdTransform.TypeID(childComplexity), true

	case "MlschemaAlgorithm.attributions":
		if e.complexity.MlschemaAlgorithm.Attributions == nil {
			break
		}

		return e.complexity.MlschemaAlgorithm.Attributions(childComplexity), true

	case "MlschemaAlgorithm.createTimeSinceEpoch":
		if e.complexity.MlschemaAlgorithm.CreateTimeSinceEpoch == nil {
			break
		}

		return e.complexity.MlschemaAlgorithm.CreateTimeSinceEpoch(childComplexity), true

	case "MlschemaAlgorithm.events":
		if e.complexity.MlschemaAlgorithm.Events == nil {
			break
		}

		return e.complexity.MlschemaAlgorithm.Events(childComplexity), true

	case "MlschemaAlgorithm.externalId":
		if e.complexity.MlschemaAlgorithm.ExternalID == nil {
			break
		}

		return e.complexity.MlschemaAlgorithm.ExternalID(childComplexity), true

	case "MlschemaAlgorithm.id":
		if e.complexity.MlschemaAlgorithm.ID == nil {
			break
		}

		return e.complexity.MlschemaAlgorithm.ID(childComplexity), true

	case "MlschemaAlgorithm.lastUpdateTimeSinceEpoch":
		if e.complexity.MlschemaAlgorithm.LastUpdateTimeSinceEpoch == nil {
			break
		}

		return e.complexity.MlschemaAlgorithm.LastUpdateTimeSinceEpoch(childComplexity), true

	case "MlschemaAlgorithm.name":
		if e.complexity.MlschemaAlgorithm.Name == nil {
			break
		}

		return e.complexity.MlschemaAlgorithm.Name(childComplexity), true

	case "MlschemaAlgorithm.properties":
		if e.complexity.MlschemaAlgorithm.Properties == nil {
			break
		}

		return e.complexity.MlschemaAlgorithm.Properties(childComplexity), true

	case "MlschemaAlgorithm.state":
		if e.complexity.MlschemaAlgorithm.State == nil {
			break
		}

		return e.complexity.MlschemaAlgorithm.State(childComplexity), true

	case "MlschemaAlgorithm.type":
		if e.complexity.MlschemaAlgorithm.Type == nil {
			break
		}

		return e.complexity.MlschemaAlgorithm.Type(childComplexity), true

	case "MlschemaAlgorithm.typeId":
		if e.complexity.MlschemaAlgorithm.TypeID == nil {
			break
		}

		return e.complexity.MlschemaAlgorithm.TypeID(childComplexity), true

	case "MlschemaAlgorithm.uri":
		if e.complexity.MlschemaAlgorithm.URI == nil {
			break
		}

		return e.complexity.MlschemaAlgorithm.URI(childComplexity), true

	case "MlschemaData.attributions":
		if e.complexity.MlschemaData.Attributions == nil {
			break
		}

		return e.complexity.MlschemaData.Attributions(childComplexity), true

	case "MlschemaData.createTimeSinceEpoch":
		if e.complexity.MlschemaData.CreateTimeSinceEpoch == nil {
			break
		}

		return e.complexity.MlschemaData.CreateTimeSinceEpoch(childComplexity), true

	case "MlschemaData.events":
		if e.complexity.MlschemaData.Events == nil {
			break
		}

		return e.complexity.MlschemaData.Events(childComplexity), true

	case "MlschemaData.externalId":
		if e.complexity.MlschemaData.ExternalID == nil {
			break
		}

		return e.complexity.MlschemaData.ExternalID(childComplexity), true

	case "MlschemaData.id":
		if e.complexity.MlschemaData.ID == nil {
			break
		}

		return e.complexity.MlschemaData.ID(childComplexity), true

	case "MlschemaData.lastUpdateTimeSinceEpoch":
		if e.complexity.MlschemaData.LastUpdateTimeSinceEpoch == nil {
			break
		}

		return e.complexity.MlschemaData.LastUpdateTimeSinceEpoch(childComplexity), true

	case "MlschemaData.name":
		if e.complexity.MlschemaData.Name == nil {
			break
		}

		return e.complexity.MlschemaData.Name(childComplexity), true

	case "MlschemaData.properties":
		if e.complexity.MlschemaData.Properties == nil {
			break
		}

		return e.complexity.MlschemaData.Properties(childComplexity), true

	case "MlschemaData.state":
		if e.complexity.MlschemaData.State == nil {
			break
		}

		return e.complexity.MlschemaData.State(childComplexity), true

	case "MlschemaData.type":
		if e.complexity.MlschemaData.Type == nil {
			break
		}

		return e.complexity.MlschemaData.Type(childComplexity), true

	case "MlschemaData.typeId":
		if e.complexity.MlschemaData.TypeID == nil {
			break
		}

		return e.complexity.MlschemaData.TypeID(childComplexity), true

	case "MlschemaData.uri":
		if e.complexity.MlschemaData.URI == nil {
			break
		}

		return e.complexity.MlschemaData.URI(childComplexity), true

	case "MlschemaDataCharacteristic.associations":
		if e.complexity.MlschemaDataCharacteristic.Associations == nil {
			break
		}

		return e.complexity.MlschemaDataCharacteristic.Associations(childComplexity), true

	case "MlschemaDataCharacteristic.attributions":
		if e.complexity.MlschemaDataCharacteristic.Attributions == nil {
			break
		}

		return e.complexity.MlschemaDataCharacteristic.Attributions(childComplexity), true

	case "MlschemaDataCharacteristic.children":
		if e.complexity.MlschemaDataCharacteristic.Children == nil {
			break
		}

		return e.complexity.MlschemaDataCharacteristic.Children(childComplexity), true

	case "MlschemaDataCharacteristic.createTimeSinceEpoch":
		if e.complexity.MlschemaDataCharacteristic.CreateTimeSinceEpoch == nil {
			break
		}

		return e.complexity.MlschemaDataCharacteristic.CreateTimeSinceEpoch(childComplexity), true

	case "MlschemaDataCharacteristic.externalId":
		if e.complexity.MlschemaDataCharacteristic.ExternalID == nil {
			break
		}

		return e.complexity.MlschemaDataCharacteristic.ExternalID(childComplexity), true

	case "MlschemaDataCharacteristic.id":
		if e.complexity.MlschemaDataCharacteristic.ID == nil {
			break
		}

		return e.complexity.MlschemaDataCharacteristic.ID(childComplexity), true

	case "MlschemaDataCharacteristic.lastUpdateTimeSinceEpoch":
		if e.complexity.MlschemaDataCharacteristic.LastUpdateTimeSinceEpoch == nil {
			break
		}

		return e.complexity.MlschemaDataCharacteristic.LastUpdateTimeSinceEpoch(childComplexity), true

	case "MlschemaDataCharacteristic.name":
		if e.complexity.MlschemaDataCharacteristic.Name == nil {
			break
		}

		return e.complexity.MlschemaDataCharacteristic.Name(childComplexity), true

	case "MlschemaDataCharacteristic.parents":
		if e.complexity.MlschemaDataCharacteristic.Parents == nil {
			break
		}

		return e.complexity.MlschemaDataCharacteristic.Parents(childComplexity), true

	case "MlschemaDataCharacteristic.properties":
		if e.complexity.MlschemaDataCharacteristic.Properties == nil {
			break
		}

		return e.complexity.MlschemaDataCharacteristic.Properties(childComplexity), true

	case "MlschemaDataCharacteristic.type":
		if e.complexity.MlschemaDataCharacteristic.Type == nil {
			break
		}

		return e.complexity.MlschemaDataCharacteristic.Type(childComplexity), true

	case "MlschemaDataCharacteristic.typeId":
		if e.complexity.MlschemaDataCharacteristic.TypeID == nil {
			break
		}

		return e.complexity.MlschemaDataCharacteristic.TypeID(childComplexity), true

	case "MlschemaDataSet.attributions":
		if e.complexity.MlschemaDataSet.Attributions == nil {
			break
		}

		return e.complexity.MlschemaDataSet.Attributions(childComplexity), true

	case "MlschemaDataSet.createTimeSinceEpoch":
		if e.complexity.MlschemaDataSet.CreateTimeSinceEpoch == nil {
			break
		}

		return e.complexity.MlschemaDataSet.CreateTimeSinceEpoch(childComplexity), true

	case "MlschemaDataSet.events":
		if e.complexity.MlschemaDataSet.Events == nil {
			break
		}

		return e.complexity.MlschemaDataSet.Events(childComplexity), true

	case "MlschemaDataSet.externalId":
		if e.complexity.MlschemaDataSet.ExternalID == nil {
			break
		}

		return e.complexity.MlschemaDataSet.ExternalID(childComplexity), true

	case "MlschemaDataSet.id":
		if e.complexity.MlschemaDataSet.ID == nil {
			break
		}

		return e.complexity.MlschemaDataSet.ID(childComplexity), true

	case "MlschemaDataSet.lastUpdateTimeSinceEpoch":
		if e.complexity.MlschemaDataSet.LastUpdateTimeSinceEpoch == nil {
			break
		}

		return e.complexity.MlschemaDataSet.LastUpdateTimeSinceEpoch(childComplexity), true

	case "MlschemaDataSet.name":
		if e.complexity.MlschemaDataSet.Name == nil {
			break
		}

		return e.complexity.MlschemaDataSet.Name(childComplexity), true

	case "MlschemaDataSet.properties":
		if e.complexity.MlschemaDataSet.Properties == nil {
			break
		}

		return e.complexity.MlschemaDataSet.Properties(childComplexity), true

	case "MlschemaDataSet.state":
		if e.complexity.MlschemaDataSet.State == nil {
			break
		}

		return e.complexity.MlschemaDataSet.State(childComplexity), true

	case "MlschemaDataSet.type":
		if e.complexity.MlschemaDataSet.Type == nil {
			break
		}

		return e.complexity.MlschemaDataSet.Type(childComplexity), true

	case "MlschemaDataSet.typeId":
		if e.complexity.MlschemaDataSet.TypeID == nil {
			break
		}

		return e.complexity.MlschemaDataSet.TypeID(childComplexity), true

	case "MlschemaDataSet.uri":
		if e.complexity.MlschemaDataSet.URI == nil {
			break
		}

		return e.complexity.MlschemaDataSet.URI(childComplexity), true

	case "MlschemaDatasetCharacteristic.attributions":
		if e.complexity.MlschemaDatasetCharacteristic.Attributions == nil {
			break
		}

		return e.complexity.MlschemaDatasetCharacteristic.Attributions(childComplexity), true

	case "MlschemaDatasetCharacteristic.createTimeSinceEpoch":
		if e.complexity.MlschemaDatasetCharacteristic.CreateTimeSinceEpoch == nil {
			break
		}

		return e.complexity.MlschemaDatasetCharacteristic.CreateTimeSinceEpoch(childComplexity), true

	case "MlschemaDatasetCharacteristic.events":
		if e.complexity.MlschemaDatasetCharacteristic.Events == nil {
			break
		}

		return e.complexity.MlschemaDatasetCharacteristic.Events(childComplexity), true

	case "MlschemaDatasetCharacteristic.externalId":
		if e.complexity.MlschemaDatasetCharacteristic.ExternalID == nil {
			break
		}

		return e.complexity.MlschemaDatasetCharacteristic.ExternalID(childComplexity), true

	case "MlschemaDatasetCharacteristic.id":
		if e.complexity.MlschemaDatasetCharacteristic.ID == nil {
			break
		}

		return e.complexity.MlschemaDatasetCharacteristic.ID(childComplexity), true

	case "MlschemaDatasetCharacteristic.lastUpdateTimeSinceEpoch":
		if e.complexity.MlschemaDatasetCharacteristic.LastUpdateTimeSinceEpoch == nil {
			break
		}

		return e.complexity.MlschemaDatasetCharacteristic.LastUpdateTimeSinceEpoch(childComplexity), true

	case "MlschemaDatasetCharacteristic.name":
		if e.complexity.MlschemaDatasetCharacteristic.Name == nil {
			break
		}

		return e.complexity.MlschemaDatasetCharacteristic.Name(childComplexity), true

	case "MlschemaDatasetCharacteristic.properties":
		if e.complexity.MlschemaDatasetCharacteristic.Properties == nil {
			break
		}

		return e.complexity.MlschemaDatasetCharacteristic.Properties(childComplexity), true

	case "MlschemaDatasetCharacteristic.state":
		if e.complexity.MlschemaDatasetCharacteristic.State == nil {
			break
		}

		return e.complexity.MlschemaDatasetCharacteristic.State(childComplexity), true

	case "MlschemaDatasetCharacteristic.type":
		if e.complexity.MlschemaDatasetCharacteristic.Type == nil {
			break
		}

		return e.complexity.MlschemaDatasetCharacteristic.Type(childComplexity), true

	case "MlschemaDatasetCharacteristic.typeId":
		if e.complexity.MlschemaDatasetCharacteristic.TypeID == nil {
			break
		}

		return e.complexity.MlschemaDatasetCharacteristic.TypeID(childComplexity), true

	case "MlschemaDatasetCharacteristic.uri":
		if e.complexity.MlschemaDatasetCharacteristic.URI == nil {
			break
		}

		return e.complexity.MlschemaDatasetCharacteristic.URI(childComplexity), true

	case "MlschemaEvaluationMeasure.attributions":
		if e.complexity.MlschemaEvaluationMeasure.Attributions == nil {
			break
		}

		return e.complexity.MlschemaEvaluationMeasure.Attributions(childComplexity), true

	case "MlschemaEvaluationMeasure.createTimeSinceEpoch":
		if e.complexity.MlschemaEvaluationMeasure.CreateTimeSinceEpoch == nil {
			break
		}

		return e.complexity.MlschemaEvaluationMeasure.CreateTimeSinceEpoch(childComplexity), true

	case "MlschemaEvaluationMeasure.events":
		if e.complexity.MlschemaEvaluationMeasure.Events == nil {
			break
		}

		return e.complexity.MlschemaEvaluationMeasure.Events(childComplexity), true

	case "MlschemaEvaluationMeasure.externalId":
		if e.complexity.MlschemaEvaluationMeasure.ExternalID == nil {
			break
		}

		return e.complexity.MlschemaEvaluationMeasure.ExternalID(childComplexity), true

	case "MlschemaEvaluationMeasure.id":
		if e.complexity.MlschemaEvaluationMeasure.ID == nil {
			break
		}

		return e.complexity.MlschemaEvaluationMeasure.ID(childComplexity), true

	case "MlschemaEvaluationMeasure.lastUpdateTimeSinceEpoch":
		if e.complexity.MlschemaEvaluationMeasure.LastUpdateTimeSinceEpoch == nil {
			break
		}

		return e.complexity.MlschemaEvaluationMeasure.LastUpdateTimeSinceEpoch(childComplexity), true

	case "MlschemaEvaluationMeasure.name":
		if e.complexity.MlschemaEvaluationMeasure.Name == nil {
			break
		}

		return e.complexity.MlschemaEvaluationMeasure.Name(childComplexity), true

	case "MlschemaEvaluationMeasure.properties":
		if e.complexity.MlschemaEvaluationMeasure.Properties == nil {
			break
		}

		return e.complexity.MlschemaEvaluationMeasure.Properties(childComplexity), true

	case "MlschemaEvaluationMeasure.state":
		if e.complexity.MlschemaEvaluationMeasure.State == nil {
			break
		}

		return e.complexity.MlschemaEvaluationMeasure.State(childComplexity), true

	case "MlschemaEvaluationMeasure.type":
		if e.complexity.MlschemaEvaluationMeasure.Type == nil {
			break
		}

		return e.complexity.MlschemaEvaluationMeasure.Type(childComplexity), true

	case "MlschemaEvaluationMeasure.typeId":
		if e.complexity.MlschemaEvaluationMeasure.TypeID == nil {
			break
		}

		return e.complexity.MlschemaEvaluationMeasure.TypeID(childComplexity), true

	case "MlschemaEvaluationMeasure.uri":
		if e.complexity.MlschemaEvaluationMeasure.URI == nil {
			break
		}

		return e.complexity.MlschemaEvaluationMeasure.URI(childComplexity), true

	case "MlschemaEvaluationProcedure.attributions":
		if e.complexity.MlschemaEvaluationProcedure.Attributions == nil {
			break
		}

		return e.complexity.MlschemaEvaluationProcedure.Attributions(childComplexity), true

	case "MlschemaEvaluationProcedure.createTimeSinceEpoch":
		if e.complexity.MlschemaEvaluationProcedure.CreateTimeSinceEpoch == nil {
			break
		}

		return e.complexity.MlschemaEvaluationProcedure.CreateTimeSinceEpoch(childComplexity), true

	case "MlschemaEvaluationProcedure.events":
		if e.complexity.MlschemaEvaluationProcedure.Events == nil {
			break
		}

		return e.complexity.MlschemaEvaluationProcedure.Events(childComplexity), true

	case "MlschemaEvaluationProcedure.externalId":
		if e.complexity.MlschemaEvaluationProcedure.ExternalID == nil {
			break
		}

		return e.complexity.MlschemaEvaluationProcedure.ExternalID(childComplexity), true

	case "MlschemaEvaluationProcedure.id":
		if e.complexity.MlschemaEvaluationProcedure.ID == nil {
			break
		}

		return e.complexity.MlschemaEvaluationProcedure.ID(childComplexity), true

	case "MlschemaEvaluationProcedure.lastUpdateTimeSinceEpoch":
		if e.complexity.MlschemaEvaluationProcedure.LastUpdateTimeSinceEpoch == nil {
			break
		}

		return e.complexity.MlschemaEvaluationProcedure.LastUpdateTimeSinceEpoch(childComplexity), true

	case "MlschemaEvaluationProcedure.name":
		if e.complexity.MlschemaEvaluationProcedure.Name == nil {
			break
		}

		return e.complexity.MlschemaEvaluationProcedure.Name(childComplexity), true

	case "MlschemaEvaluationProcedure.properties":
		if e.complexity.MlschemaEvaluationProcedure.Properties == nil {
			break
		}

		return e.complexity.MlschemaEvaluationProcedure.Properties(childComplexity), true

	case "MlschemaEvaluationProcedure.state":
		if e.complexity.MlschemaEvaluationProcedure.State == nil {
			break
		}

		return e.complexity.MlschemaEvaluationProcedure.State(childComplexity), true

	case "MlschemaEvaluationProcedure.type":
		if e.complexity.MlschemaEvaluationProcedure.Type == nil {
			break
		}

		return e.complexity.MlschemaEvaluationProcedure.Type(childComplexity), true

	case "MlschemaEvaluationProcedure.typeId":
		if e.complexity.MlschemaEvaluationProcedure.TypeID == nil {
			break
		}

		return e.complexity.MlschemaEvaluationProcedure.TypeID(childComplexity), true

	case "MlschemaEvaluationProcedure.uri":
		if e.complexity.MlschemaEvaluationProcedure.URI == nil {
			break
		}

		return e.complexity.MlschemaEvaluationProcedure.URI(childComplexity), true

	case "MlschemaEvaluationSpecification.attributions":
		if e.complexity.MlschemaEvaluationSpecification.Attributions == nil {
			break
		}

		return e.complexity.MlschemaEvaluationSpecification.Attributions(childComplexity), true

	case "MlschemaEvaluationSpecification.createTimeSinceEpoch":
		if e.complexity.MlschemaEvaluationSpecification.CreateTimeSinceEpoch == nil {
			break
		}

		return e.complexity.MlschemaEvaluationSpecification.CreateTimeSinceEpoch(childComplexity), true

	case "MlschemaEvaluationSpecification.events":
		if e.complexity.MlschemaEvaluationSpecification.Events == nil {
			break
		}

		return e.complexity.MlschemaEvaluationSpecification.Events(childComplexity), true

	case "MlschemaEvaluationSpecification.externalId":
		if e.complexity.MlschemaEvaluationSpecification.ExternalID == nil {
			break
		}

		return e.complexity.MlschemaEvaluationSpecification.ExternalID(childComplexity), true

	case "MlschemaEvaluationSpecification.id":
		if e.complexity.MlschemaEvaluationSpecification.ID == nil {
			break
		}

		return e.complexity.MlschemaEvaluationSpecification.ID(childComplexity), true

	case "MlschemaEvaluationSpecification.lastUpdateTimeSinceEpoch":
		if e.complexity.MlschemaEvaluationSpecification.LastUpdateTimeSinceEpoch == nil {
			break
		}

		return e.complexity.MlschemaEvaluationSpecification.LastUpdateTimeSinceEpoch(childComplexity), true

	case "MlschemaEvaluationSpecification.name":
		if e.complexity.MlschemaEvaluationSpecification.Name == nil {
			break
		}

		return e.complexity.MlschemaEvaluationSpecification.Name(childComplexity), true

	case "MlschemaEvaluationSpecification.properties":
		if e.complexity.MlschemaEvaluationSpecification.Properties == nil {
			break
		}

		return e.complexity.MlschemaEvaluationSpecification.Properties(childComplexity), true

	case "MlschemaEvaluationSpecification.state":
		if e.complexity.MlschemaEvaluationSpecification.State == nil {
			break
		}

		return e.complexity.MlschemaEvaluationSpecification.State(childComplexity), true

	case "MlschemaEvaluationSpecification.type":
		if e.complexity.MlschemaEvaluationSpecification.Type == nil {
			break
		}

		return e.complexity.MlschemaEvaluationSpecification.Type(childComplexity), true

	case "MlschemaEvaluationSpecification.typeId":
		if e.complexity.MlschemaEvaluationSpecification.TypeID == nil {
			break
		}

		return e.complexity.MlschemaEvaluationSpecification.TypeID(childComplexity), true

	case "MlschemaEvaluationSpecification.uri":
		if e.complexity.MlschemaEvaluationSpecification.URI == nil {
			break
		}

		return e.complexity.MlschemaEvaluationSpecification.URI(childComplexity), true

	case "MlschemaExperiment.associations":
		if e.complexity.MlschemaExperiment.Associations == nil {
			break
		}

		return e.complexity.MlschemaExperiment.Associations(childComplexity), true

	case "MlschemaExperiment.createTimeSinceEpoch":
		if e.complexity.MlschemaExperiment.CreateTimeSinceEpoch == nil {
			break
		}

		return e.complexity.MlschemaExperiment.CreateTimeSinceEpoch(childComplexity), true

	case "MlschemaExperiment.events":
		if e.complexity.MlschemaExperiment.Events == nil {
			break
		}

		return e.complexity.MlschemaExperiment.Events(childComplexity), true

	case "MlschemaExperiment.externalId":
		if e.complexity.MlschemaExperiment.ExternalID == nil {
			break
		}

		return e.complexity.MlschemaExperiment.ExternalID(childComplexity), true

	case "MlschemaExperiment.id":
		if e.complexity.MlschemaExperiment.ID == nil {
			break
		}

		return e.complexity.MlschemaExperiment.ID(childComplexity), true

	case "MlschemaExperiment.lastKnownState":
		if e.complexity.MlschemaExperiment.LastKnownState == nil {
			break
		}

		return e.complexity.MlschemaExperiment.LastKnownState(childComplexity), true

	case "MlschemaExperiment.lastUpdateTimeSinceEpoch":
		if e.complexity.MlschemaExperiment.LastUpdateTimeSinceEpoch == nil {
			break
		}

		return e.complexity.MlschemaExperiment.LastUpdateTimeSinceEpoch(childComplexity), true

	case "MlschemaExperiment.name":
		if e.complexity.MlschemaExperiment.Name == nil {
			break
		}

		return e.complexity.MlschemaExperiment.Name(childComplexity), true

	case "MlschemaExperiment.properties":
		if e.complexity.MlschemaExperiment.Properties == nil {
			break
		}

		return e.complexity.MlschemaExperiment.Properties(childComplexity), true

	case "MlschemaExperiment.type":
		if e.complexity.MlschemaExperiment.Type == nil {
			break
		}

		return e.complexity.MlschemaExperiment.Type(childComplexity), true

	case "MlschemaExperiment.typeId":
		if e.complexity.MlschemaExperiment.TypeID == nil {
			break
		}

		return e.complexity.MlschemaExperiment.TypeID(childComplexity), true

	case "MlschemaFeature.attributions":
		if e.complexity.MlschemaFeature.Attributions == nil {
			break
		}

		return e.complexity.MlschemaFeature.Attributions(childComplexity), true

	case "MlschemaFeature.createTimeSinceEpoch":
		if e.complexity.MlschemaFeature.CreateTimeSinceEpoch == nil {
			break
		}

		return e.complexity.MlschemaFeature.CreateTimeSinceEpoch(childComplexity), true

	case "MlschemaFeature.events":
		if e.complexity.MlschemaFeature.Events == nil {
			break
		}

		return e.complexity.MlschemaFeature.Events(childComplexity), true

	case "MlschemaFeature.externalId":
		if e.complexity.MlschemaFeature.ExternalID == nil {
			break
		}

		return e.complexity.MlschemaFeature.ExternalID(childComplexity), true

	case "MlschemaFeature.id":
		if e.complexity.MlschemaFeature.ID == nil {
			break
		}

		return e.complexity.MlschemaFeature.ID(childComplexity), true

	case "MlschemaFeature.lastUpdateTimeSinceEpoch":
		if e.complexity.MlschemaFeature.LastUpdateTimeSinceEpoch == nil {
			break
		}

		return e.complexity.MlschemaFeature.LastUpdateTimeSinceEpoch(childComplexity), true

	case "MlschemaFeature.name":
		if e.complexity.MlschemaFeature.Name == nil {
			break
		}

		return e.complexity.MlschemaFeature.Name(childComplexity), true

	case "MlschemaFeature.properties":
		if e.complexity.MlschemaFeature.Properties == nil {
			break
		}

		return e.complexity.MlschemaFeature.Properties(childComplexity), true

	case "MlschemaFeature.state":
		if e.complexity.MlschemaFeature.State == nil {
			break
		}

		return e.complexity.MlschemaFeature.State(childComplexity), true

	case "MlschemaFeature.type":
		if e.complexity.MlschemaFeature.Type == nil {
			break
		}

		return e.complexity.MlschemaFeature.Type(childComplexity), true

	case "MlschemaFeature.typeId":
		if e.complexity.MlschemaFeature.TypeID == nil {
			break
		}

		return e.complexity.MlschemaFeature.TypeID(childComplexity), true

	case "MlschemaFeature.uri":
		if e.complexity.MlschemaFeature.URI == nil {
			break
		}

		return e.complexity.MlschemaFeature.URI(childComplexity), true

	case "MlschemaFeatureCharacteristic.attributions":
		if e.complexity.MlschemaFeatureCharacteristic.Attributions == nil {
			break
		}

		return e.complexity.MlschemaFeatureCharacteristic.Attributions(childComplexity), true

	case "MlschemaFeatureCharacteristic.createTimeSinceEpoch":
		if e.complexity.MlschemaFeatureCharacteristic.CreateTimeSinceEpoch == nil {
			break
		}

		return e.complexity.MlschemaFeatureCharacteristic.CreateTimeSinceEpoch(childComplexity), true

	case "MlschemaFeatureCharacteristic.events":
		if e.complexity.MlschemaFeatureCharacteristic.Events == nil {
			break
		}

		return e.complexity.MlschemaFeatureCharacteristic.Events(childComplexity), true

	case "MlschemaFeatureCharacteristic.externalId":
		if e.complexity.MlschemaFeatureCharacteristic.ExternalID == nil {
			break
		}

		return e.complexity.MlschemaFeatureCharacteristic.ExternalID(childComplexity), true

	case "MlschemaFeatureCharacteristic.id":
		if e.complexity.MlschemaFeatureCharacteristic.ID == nil {
			break
		}

		return e.complexity.MlschemaFeatureCharacteristic.ID(childComplexity), true

	case "MlschemaFeatureCharacteristic.lastUpdateTimeSinceEpoch":
		if e.complexity.MlschemaFeatureCharacteristic.LastUpdateTimeSinceEpoch == nil {
			break
		}

		return e.complexity.MlschemaFeatureCharacteristic.LastUpdateTimeSinceEpoch(childComplexity), true

	case "MlschemaFeatureCharacteristic.name":
		if e.complexity.MlschemaFeatureCharacteristic.Name == nil {
			break
		}

		return e.complexity.MlschemaFeatureCharacteristic.Name(childComplexity), true

	case "MlschemaFeatureCharacteristic.properties":
		if e.complexity.MlschemaFeatureCharacteristic.Properties == nil {
			break
		}

		return e.complexity.MlschemaFeatureCharacteristic.Properties(childComplexity), true

	case "MlschemaFeatureCharacteristic.state":
		if e.complexity.MlschemaFeatureCharacteristic.State == nil {
			break
		}

		return e.complexity.MlschemaFeatureCharacteristic.State(childComplexity), true

	case "MlschemaFeatureCharacteristic.type":
		if e.complexity.MlschemaFeatureCharacteristic.Type == nil {
			break
		}

		return e.complexity.MlschemaFeatureCharacteristic.Type(childComplexity), true

	case "MlschemaFeatureCharacteristic.typeId":
		if e.complexity.MlschemaFeatureCharacteristic.TypeID == nil {
			break
		}

		return e.complexity.MlschemaFeatureCharacteristic.TypeID(childComplexity), true

	case "MlschemaFeatureCharacteristic.uri":
		if e.complexity.MlschemaFeatureCharacteristic.URI == nil {
			break
		}

		return e.complexity.MlschemaFeatureCharacteristic.URI(childComplexity), true

	case "MlschemaHyperParameter.attributions":
		if e.complexity.MlschemaHyperParameter.Attributions == nil {
			break
		}

		return e.complexity.MlschemaHyperParameter.Attributions(childComplexity), true

	case "MlschemaHyperParameter.createTimeSinceEpoch":
		if e.complexity.MlschemaHyperParameter.CreateTimeSinceEpoch == nil {
			break
		}

		return e.complexity.MlschemaHyperParameter.CreateTimeSinceEpoch(childComplexity), true

	case "MlschemaHyperParameter.events":
		if e.complexity.MlschemaHyperParameter.Events == nil {
			break
		}

		return e.complexity.MlschemaHyperParameter.Events(childComplexity), true

	case "MlschemaHyperParameter.externalId":
		if e.complexity.MlschemaHyperParameter.ExternalID == nil {
			break
		}

		return e.complexity.MlschemaHyperParameter.ExternalID(childComplexity), true

	case "MlschemaHyperParameter.id":
		if e.complexity.MlschemaHyperParameter.ID == nil {
			break
		}

		return e.complexity.MlschemaHyperParameter.ID(childComplexity), true

	case "MlschemaHyperParameter.lastUpdateTimeSinceEpoch":
		if e.complexity.MlschemaHyperParameter.LastUpdateTimeSinceEpoch == nil {
			break
		}

		return e.complexity.MlschemaHyperParameter.LastUpdateTimeSinceEpoch(childComplexity), true

	case "MlschemaHyperParameter.name":
		if e.complexity.MlschemaHyperParameter.Name == nil {
			break
		}

		return e.complexity.MlschemaHyperParameter.Name(childComplexity), true

	case "MlschemaHyperParameter.properties":
		if e.complexity.MlschemaHyperParameter.Properties == nil {
			break
		}

		return e.complexity.MlschemaHyperParameter.Properties(childComplexity), true

	case "MlschemaHyperParameter.state":
		if e.complexity.MlschemaHyperParameter.State == nil {
			break
		}

		return e.complexity.MlschemaHyperParameter.State(childComplexity), true

	case "MlschemaHyperParameter.type":
		if e.complexity.MlschemaHyperParameter.Type == nil {
			break
		}

		return e.complexity.MlschemaHyperParameter.Type(childComplexity), true

	case "MlschemaHyperParameter.typeId":
		if e.complexity.MlschemaHyperParameter.TypeID == nil {
			break
		}

		return e.complexity.MlschemaHyperParameter.TypeID(childComplexity), true

	case "MlschemaHyperParameter.uri":
		if e.complexity.MlschemaHyperParameter.URI == nil {
			break
		}

		return e.complexity.MlschemaHyperParameter.URI(childComplexity), true

	case "MlschemaHyperParameterSetting.attributions":
		if e.complexity.MlschemaHyperParameterSetting.Attributions == nil {
			break
		}

		return e.complexity.MlschemaHyperParameterSetting.Attributions(childComplexity), true

	case "MlschemaHyperParameterSetting.createTimeSinceEpoch":
		if e.complexity.MlschemaHyperParameterSetting.CreateTimeSinceEpoch == nil {
			break
		}

		return e.complexity.MlschemaHyperParameterSetting.CreateTimeSinceEpoch(childComplexity), true

	case "MlschemaHyperParameterSetting.events":
		if e.complexity.MlschemaHyperParameterSetting.Events == nil {
			break
		}

		return e.complexity.MlschemaHyperParameterSetting.Events(childComplexity), true

	case "MlschemaHyperParameterSetting.externalId":
		if e.complexity.MlschemaHyperParameterSetting.ExternalID == nil {
			break
		}

		return e.complexity.MlschemaHyperParameterSetting.ExternalID(childComplexity), true

	case "MlschemaHyperParameterSetting.id":
		if e.complexity.MlschemaHyperParameterSetting.ID == nil {
			break
		}

		return e.complexity.MlschemaHyperParameterSetting.ID(childComplexity), true

	case "MlschemaHyperParameterSetting.lastUpdateTimeSinceEpoch":
		if e.complexity.MlschemaHyperParameterSetting.LastUpdateTimeSinceEpoch == nil {
			break
		}

		return e.complexity.MlschemaHyperParameterSetting.LastUpdateTimeSinceEpoch(childComplexity), true

	case "MlschemaHyperParameterSetting.name":
		if e.complexity.MlschemaHyperParameterSetting.Name == nil {
			break
		}

		return e.complexity.MlschemaHyperParameterSetting.Name(childComplexity), true

	case "MlschemaHyperParameterSetting.properties":
		if e.complexity.MlschemaHyperParameterSetting.Properties == nil {
			break
		}

		return e.complexity.MlschemaHyperParameterSetting.Properties(childComplexity), true

	case "MlschemaHyperParameterSetting.state":
		if e.complexity.MlschemaHyperParameterSetting.State == nil {
			break
		}

		return e.complexity.MlschemaHyperParameterSetting.State(childComplexity), true

	case "MlschemaHyperParameterSetting.type":
		if e.complexity.MlschemaHyperParameterSetting.Type == nil {
			break
		}

		return e.complexity.MlschemaHyperParameterSetting.Type(childComplexity), true

	case "MlschemaHyperParameterSetting.typeId":
		if e.complexity.MlschemaHyperParameterSetting.TypeID == nil {
			break
		}

		return e.complexity.MlschemaHyperParameterSetting.TypeID(childComplexity), true

	case "MlschemaHyperParameterSetting.uri":
		if e.complexity.MlschemaHyperParameterSetting.URI == nil {
			break
		}

		return e.complexity.MlschemaHyperParameterSetting.URI(childComplexity), true

	case "MlschemaImplementation.attributions":
		if e.complexity.MlschemaImplementation.Attributions == nil {
			break
		}

		return e.complexity.MlschemaImplementation.Attributions(childComplexity), true

	case "MlschemaImplementation.createTimeSinceEpoch":
		if e.complexity.MlschemaImplementation.CreateTimeSinceEpoch == nil {
			break
		}

		return e.complexity.MlschemaImplementation.CreateTimeSinceEpoch(childComplexity), true

	case "MlschemaImplementation.events":
		if e.complexity.MlschemaImplementation.Events == nil {
			break
		}

		return e.complexity.MlschemaImplementation.Events(childComplexity), true

	case "MlschemaImplementation.externalId":
		if e.complexity.MlschemaImplementation.ExternalID == nil {
			break
		}

		return e.complexity.MlschemaImplementation.ExternalID(childComplexity), true

	case "MlschemaImplementation.id":
		if e.complexity.MlschemaImplementation.ID == nil {
			break
		}

		return e.complexity.MlschemaImplementation.ID(childComplexity), true

	case "MlschemaImplementation.lastUpdateTimeSinceEpoch":
		if e.complexity.MlschemaImplementation.LastUpdateTimeSinceEpoch == nil {
			break
		}

		return e.complexity.MlschemaImplementation.LastUpdateTimeSinceEpoch(childComplexity), true

	case "MlschemaImplementation.name":
		if e.complexity.MlschemaImplementation.Name == nil {
			break
		}

		return e.complexity.MlschemaImplementation.Name(childComplexity), true

	case "MlschemaImplementation.properties":
		if e.complexity.MlschemaImplementation.Properties == nil {
			break
		}

		return e.complexity.MlschemaImplementation.Properties(childComplexity), true

	case "MlschemaImplementation.state":
		if e.complexity.MlschemaImplementation.State == nil {
			break
		}

		return e.complexity.MlschemaImplementation.State(childComplexity), true

	case "MlschemaImplementation.type":
		if e.complexity.MlschemaImplementation.Type == nil {
			break
		}

		return e.complexity.MlschemaImplementation.Type(childComplexity), true

	case "MlschemaImplementation.typeId":
		if e.complexity.MlschemaImplementation.TypeID == nil {
			break
		}

		return e.complexity.MlschemaImplementation.TypeID(childComplexity), true

	case "MlschemaImplementation.uri":
		if e.complexity.MlschemaImplementation.URI == nil {
			break
		}

		return e.complexity.MlschemaImplementation.URI(childComplexity), true

	case "MlschemaImplementationCharacteristic.attributions":
		if e.complexity.MlschemaImplementationCharacteristic.Attributions == nil {
			break
		}

		return e.complexity.MlschemaImplementationCharacteristic.Attributions(childComplexity), true

	case "MlschemaImplementationCharacteristic.createTimeSinceEpoch":
		if e.complexity.MlschemaImplementationCharacteristic.CreateTimeSinceEpoch == nil {
			break
		}

		return e.complexity.MlschemaImplementationCharacteristic.CreateTimeSinceEpoch(childComplexity), true

	case "MlschemaImplementationCharacteristic.events":
		if e.complexity.MlschemaImplementationCharacteristic.Events == nil {
			break
		}

		return e.complexity.MlschemaImplementationCharacteristic.Events(childComplexity), true

	case "MlschemaImplementationCharacteristic.externalId":
		if e.complexity.MlschemaImplementationCharacteristic.ExternalID == nil {
			break
		}

		return e.complexity.MlschemaImplementationCharacteristic.ExternalID(childComplexity), true

	case "MlschemaImplementationCharacteristic.id":
		if e.complexity.MlschemaImplementationCharacteristic.ID == nil {
			break
		}

		return e.complexity.MlschemaImplementationCharacteristic.ID(childComplexity), true

	case "MlschemaImplementationCharacteristic.lastUpdateTimeSinceEpoch":
		if e.complexity.MlschemaImplementationCharacteristic.LastUpdateTimeSinceEpoch == nil {
			break
		}

		return e.complexity.MlschemaImplementationCharacteristic.LastUpdateTimeSinceEpoch(childComplexity), true

	case "MlschemaImplementationCharacteristic.name":
		if e.complexity.MlschemaImplementationCharacteristic.Name == nil {
			break
		}

		return e.complexity.MlschemaImplementationCharacteristic.Name(childComplexity), true

	case "MlschemaImplementationCharacteristic.properties":
		if e.complexity.MlschemaImplementationCharacteristic.Properties == nil {
			break
		}

		return e.complexity.MlschemaImplementationCharacteristic.Properties(childComplexity), true

	case "MlschemaImplementationCharacteristic.state":
		if e.complexity.MlschemaImplementationCharacteristic.State == nil {
			break
		}

		return e.complexity.MlschemaImplementationCharacteristic.State(childComplexity), true

	case "MlschemaImplementationCharacteristic.type":
		if e.complexity.MlschemaImplementationCharacteristic.Type == nil {
			break
		}

		return e.complexity.MlschemaImplementationCharacteristic.Type(childComplexity), true

	case "MlschemaImplementationCharacteristic.typeId":
		if e.complexity.MlschemaImplementationCharacteristic.TypeID == nil {
			break
		}

		return e.complexity.MlschemaImplementationCharacteristic.TypeID(childComplexity), true

	case "MlschemaImplementationCharacteristic.uri":
		if e.complexity.MlschemaImplementationCharacteristic.URI == nil {
			break
		}

		return e.complexity.MlschemaImplementationCharacteristic.URI(childComplexity), true

	case "MlschemaModel.attributions":
		if e.complexity.MlschemaModel.Attributions == nil {
			break
		}

		return e.complexity.MlschemaModel.Attributions(childComplexity), true

	case "MlschemaModel.createTimeSinceEpoch":
		if e.complexity.MlschemaModel.CreateTimeSinceEpoch == nil {
			break
		}

		return e.complexity.MlschemaModel.CreateTimeSinceEpoch(childComplexity), true

	case "MlschemaModel.events":
		if e.complexity.MlschemaModel.Events == nil {
			break
		}

		return e.complexity.MlschemaModel.Events(childComplexity), true

	case "MlschemaModel.externalId":
		if e.complexity.MlschemaModel.ExternalID == nil {
			break
		}

		return e.complexity.MlschemaModel.ExternalID(childComplexity), true

	case "MlschemaModel.id":
		if e.complexity.MlschemaModel.ID == nil {
			break
		}

		return e.complexity.MlschemaModel.ID(childComplexity), true

	case "MlschemaModel.lastUpdateTimeSinceEpoch":
		if e.complexity.MlschemaModel.LastUpdateTimeSinceEpoch == nil {
			break
		}

		return e.complexity.MlschemaModel.LastUpdateTimeSinceEpoch(childComplexity), true

	case "MlschemaModel.name":
		if e.complexity.MlschemaModel.Name == nil {
			break
		}

		return e.complexity.MlschemaModel.Name(childComplexity), true

	case "MlschemaModel.properties":
		if e.complexity.MlschemaModel.Properties == nil {
			break
		}

		return e.complexity.MlschemaModel.Properties(childComplexity), true

	case "MlschemaModel.state":
		if e.complexity.MlschemaModel.State == nil {
			break
		}

		return e.complexity.MlschemaModel.State(childComplexity), true

	case "MlschemaModel.type":
		if e.complexity.MlschemaModel.Type == nil {
			break
		}

		return e.complexity.MlschemaModel.Type(childComplexity), true

	case "MlschemaModel.typeId":
		if e.complexity.MlschemaModel.TypeID == nil {
			break
		}

		return e.complexity.MlschemaModel.TypeID(childComplexity), true

	case "MlschemaModel.uri":
		if e.complexity.MlschemaModel.URI == nil {
			break
		}

		return e.complexity.MlschemaModel.URI(childComplexity), true

	case "MlschemaModelEvaluation.attributions":
		if e.complexity.MlschemaModelEvaluation.Attributions == nil {
			break
		}

		return e.complexity.MlschemaModelEvaluation.Attributions(childComplexity), true

	case "MlschemaModelEvaluation.createTimeSinceEpoch":
		if e.complexity.MlschemaModelEvaluation.CreateTimeSinceEpoch == nil {
			break
		}

		return e.complexity.MlschemaModelEvaluation.CreateTimeSinceEpoch(childComplexity), true

	case "MlschemaModelEvaluation.events":
		if e.complexity.MlschemaModelEvaluation.Events == nil {
			break
		}

		return e.complexity.MlschemaModelEvaluation.Events(childComplexity), true

	case "MlschemaModelEvaluation.externalId":
		if e.complexity.MlschemaModelEvaluation.ExternalID == nil {
			break
		}

		return e.complexity.MlschemaModelEvaluation.ExternalID(childComplexity), true

	case "MlschemaModelEvaluation.id":
		if e.complexity.MlschemaModelEvaluation.ID == nil {
			break
		}

		return e.complexity.MlschemaModelEvaluation.ID(childComplexity), true

	case "MlschemaModelEvaluation.lastUpdateTimeSinceEpoch":
		if e.complexity.MlschemaModelEvaluation.LastUpdateTimeSinceEpoch == nil {
			break
		}

		return e.complexity.MlschemaModelEvaluation.LastUpdateTimeSinceEpoch(childComplexity), true

	case "MlschemaModelEvaluation.name":
		if e.complexity.MlschemaModelEvaluation.Name == nil {
			break
		}

		return e.complexity.MlschemaModelEvaluation.Name(childComplexity), true

	case "MlschemaModelEvaluation.properties":
		if e.complexity.MlschemaModelEvaluation.Properties == nil {
			break
		}

		return e.complexity.MlschemaModelEvaluation.Properties(childComplexity), true

	case "MlschemaModelEvaluation.state":
		if e.complexity.MlschemaModelEvaluation.State == nil {
			break
		}

		return e.complexity.MlschemaModelEvaluation.State(childComplexity), true

	case "MlschemaModelEvaluation.type":
		if e.complexity.MlschemaModelEvaluation.Type == nil {
			break
		}

		return e.complexity.MlschemaModelEvaluation.Type(childComplexity), true

	case "MlschemaModelEvaluation.typeId":
		if e.complexity.MlschemaModelEvaluation.TypeID == nil {
			break
		}

		return e.complexity.MlschemaModelEvaluation.TypeID(childComplexity), true

	case "MlschemaModelEvaluation.uri":
		if e.complexity.MlschemaModelEvaluation.URI == nil {
			break
		}

		return e.complexity.MlschemaModelEvaluation.URI(childComplexity), true

	case "MlschemaModelVersion.associations":
		if e.complexity.MlschemaModelVersion.Associations == nil {
			break
		}

		return e.complexity.MlschemaModelVersion.Associations(childComplexity), true

	case "MlschemaModelVersion.attributions":
		if e.complexity.MlschemaModelVersion.Attributions == nil {
			break
		}

		return e.complexity.MlschemaModelVersion.Attributions(childComplexity), true

	case "MlschemaModelVersion.children":
		if e.complexity.MlschemaModelVersion.Children == nil {
			break
		}

		return e.complexity.MlschemaModelVersion.Children(childComplexity), true

	case "MlschemaModelVersion.createTimeSinceEpoch":
		if e.complexity.MlschemaModelVersion.CreateTimeSinceEpoch == nil {
			break
		}

		return e.complexity.MlschemaModelVersion.CreateTimeSinceEpoch(childComplexity), true

	case "MlschemaModelVersion.externalId":
		if e.complexity.MlschemaModelVersion.ExternalID == nil {
			break
		}

		return e.complexity.MlschemaModelVersion.ExternalID(childComplexity), true

	case "MlschemaModelVersion.id":
		if e.complexity.MlschemaModelVersion.ID == nil {
			break
		}

		return e.complexity.MlschemaModelVersion.ID(childComplexity), true

	case "MlschemaModelVersion.lastUpdateTimeSinceEpoch":
		if e.complexity.MlschemaModelVersion.LastUpdateTimeSinceEpoch == nil {
			break
		}

		return e.complexity.MlschemaModelVersion.LastUpdateTimeSinceEpoch(childComplexity), true

	case "MlschemaModelVersion.name":
		if e.complexity.MlschemaModelVersion.Name == nil {
			break
		}

		return e.complexity.MlschemaModelVersion.Name(childComplexity), true

	case "MlschemaModelVersion.parents":
		if e.complexity.MlschemaModelVersion.Parents == nil {
			break
		}

		return e.complexity.MlschemaModelVersion.Parents(childComplexity), true

	case "MlschemaModelVersion.properties":
		if e.complexity.MlschemaModelVersion.Properties == nil {
			break
		}

		return e.complexity.MlschemaModelVersion.Properties(childComplexity), true

	case "MlschemaModelVersion.type":
		if e.complexity.MlschemaModelVersion.Type == nil {
			break
		}

		return e.complexity.MlschemaModelVersion.Type(childComplexity), true

	case "MlschemaModelVersion.typeId":
		if e.complexity.MlschemaModelVersion.TypeID == nil {
			break
		}

		return e.complexity.MlschemaModelVersion.TypeID(childComplexity), true

	case "MlschemaRegisteredModel.associations":
		if e.complexity.MlschemaRegisteredModel.Associations == nil {
			break
		}

		return e.complexity.MlschemaRegisteredModel.Associations(childComplexity), true

	case "MlschemaRegisteredModel.attributions":
		if e.complexity.MlschemaRegisteredModel.Attributions == nil {
			break
		}

		return e.complexity.MlschemaRegisteredModel.Attributions(childComplexity), true

	case "MlschemaRegisteredModel.children":
		if e.complexity.MlschemaRegisteredModel.Children == nil {
			break
		}

		return e.complexity.MlschemaRegisteredModel.Children(childComplexity), true

	case "MlschemaRegisteredModel.createTimeSinceEpoch":
		if e.complexity.MlschemaRegisteredModel.CreateTimeSinceEpoch == nil {
			break
		}

		return e.complexity.MlschemaRegisteredModel.CreateTimeSinceEpoch(childComplexity), true

	case "MlschemaRegisteredModel.externalId":
		if e.complexity.MlschemaRegisteredModel.ExternalID == nil {
			break
		}

		return e.complexity.MlschemaRegisteredModel.ExternalID(childComplexity), true

	case "MlschemaRegisteredModel.id":
		if e.complexity.MlschemaRegisteredModel.ID == nil {
			break
		}

		return e.complexity.MlschemaRegisteredModel.ID(childComplexity), true

	case "MlschemaRegisteredModel.lastUpdateTimeSinceEpoch":
		if e.complexity.MlschemaRegisteredModel.LastUpdateTimeSinceEpoch == nil {
			break
		}

		return e.complexity.MlschemaRegisteredModel.LastUpdateTimeSinceEpoch(childComplexity), true

	case "MlschemaRegisteredModel.name":
		if e.complexity.MlschemaRegisteredModel.Name == nil {
			break
		}

		return e.complexity.MlschemaRegisteredModel.Name(childComplexity), true

	case "MlschemaRegisteredModel.parents":
		if e.complexity.MlschemaRegisteredModel.Parents == nil {
			break
		}

		return e.complexity.MlschemaRegisteredModel.Parents(childComplexity), true

	case "MlschemaRegisteredModel.properties":
		if e.complexity.MlschemaRegisteredModel.Properties == nil {
			break
		}

		return e.complexity.MlschemaRegisteredModel.Properties(childComplexity), true

	case "MlschemaRegisteredModel.type":
		if e.complexity.MlschemaRegisteredModel.Type == nil {
			break
		}

		return e.complexity.MlschemaRegisteredModel.Type(childComplexity), true

	case "MlschemaRegisteredModel.typeId":
		if e.complexity.MlschemaRegisteredModel.TypeID == nil {
			break
		}

		return e.complexity.MlschemaRegisteredModel.TypeID(childComplexity), true

	case "MlschemaRun.associations":
		if e.complexity.MlschemaRun.Associations == nil {
			break
		}

		return e.complexity.MlschemaRun.Associations(childComplexity), true

	case "MlschemaRun.createTimeSinceEpoch":
		if e.complexity.MlschemaRun.CreateTimeSinceEpoch == nil {
			break
		}

		return e.complexity.MlschemaRun.CreateTimeSinceEpoch(childComplexity), true

	case "MlschemaRun.events":
		if e.complexity.MlschemaRun.Events == nil {
			break
		}

		return e.complexity.MlschemaRun.Events(childComplexity), true

	case "MlschemaRun.externalId":
		if e.complexity.MlschemaRun.ExternalID == nil {
			break
		}

		return e.complexity.MlschemaRun.ExternalID(childComplexity), true

	case "MlschemaRun.id":
		if e.complexity.MlschemaRun.ID == nil {
			break
		}

		return e.complexity.MlschemaRun.ID(childComplexity), true

	case "MlschemaRun.lastKnownState":
		if e.complexity.MlschemaRun.LastKnownState == nil {
			break
		}

		return e.complexity.MlschemaRun.LastKnownState(childComplexity), true

	case "MlschemaRun.lastUpdateTimeSinceEpoch":
		if e.complexity.MlschemaRun.LastUpdateTimeSinceEpoch == nil {
			break
		}

		return e.complexity.MlschemaRun.LastUpdateTimeSinceEpoch(childComplexity), true

	case "MlschemaRun.name":
		if e.complexity.MlschemaRun.Name == nil {
			break
		}

		return e.complexity.MlschemaRun.Name(childComplexity), true

	case "MlschemaRun.properties":
		if e.complexity.MlschemaRun.Properties == nil {
			break
		}

		return e.complexity.MlschemaRun.Properties(childComplexity), true

	case "MlschemaRun.type":
		if e.complexity.MlschemaRun.Type == nil {
			break
		}

		return e.complexity.MlschemaRun.Type(childComplexity), true

	case "MlschemaRun.typeId":
		if e.complexity.MlschemaRun.TypeID == nil {
			break
		}

		return e.complexity.MlschemaRun.TypeID(childComplexity), true

	case "MlschemaSoftware.attributions":
		if e.complexity.MlschemaSoftware.Attributions == nil {
			break
		}

		return e.complexity.MlschemaSoftware.Attributions(childComplexity), true

	case "MlschemaSoftware.createTimeSinceEpoch":
		if e.complexity.MlschemaSoftware.CreateTimeSinceEpoch == nil {
			break
		}

		return e.complexity.MlschemaSoftware.CreateTimeSinceEpoch(childComplexity), true

	case "MlschemaSoftware.events":
		if e.complexity.MlschemaSoftware.Events == nil {
			break
		}

		return e.complexity.MlschemaSoftware.Events(childComplexity), true

	case "MlschemaSoftware.externalId":
		if e.complexity.MlschemaSoftware.ExternalID == nil {
			break
		}

		return e.complexity.MlschemaSoftware.ExternalID(childComplexity), true

	case "MlschemaSoftware.id":
		if e.complexity.MlschemaSoftware.ID == nil {
			break
		}

		return e.complexity.MlschemaSoftware.ID(childComplexity), true

	case "MlschemaSoftware.lastUpdateTimeSinceEpoch":
		if e.complexity.MlschemaSoftware.LastUpdateTimeSinceEpoch == nil {
			break
		}

		return e.complexity.MlschemaSoftware.LastUpdateTimeSinceEpoch(childComplexity), true

	case "MlschemaSoftware.name":
		if e.complexity.MlschemaSoftware.Name == nil {
			break
		}

		return e.complexity.MlschemaSoftware.Name(childComplexity), true

	case "MlschemaSoftware.properties":
		if e.complexity.MlschemaSoftware.Properties == nil {
			break
		}

		return e.complexity.MlschemaSoftware.Properties(childComplexity), true

	case "MlschemaSoftware.state":
		if e.complexity.MlschemaSoftware.State == nil {
			break
		}

		return e.complexity.MlschemaSoftware.State(childComplexity), true

	case "MlschemaSoftware.type":
		if e.complexity.MlschemaSoftware.Type == nil {
			break
		}

		return e.complexity.MlschemaSoftware.Type(childComplexity), true

	case "MlschemaSoftware.typeId":
		if e.complexity.MlschemaSoftware.TypeID == nil {
			break
		}

		return e.complexity.MlschemaSoftware.TypeID(childComplexity), true

	case "MlschemaSoftware.uri":
		if e.complexity.MlschemaSoftware.URI == nil {
			break
		}

		return e.complexity.MlschemaSoftware.URI(childComplexity), true

	case "MlschemaStudy.associations":
		if e.complexity.MlschemaStudy.Associations == nil {
			break
		}

		return e.complexity.MlschemaStudy.Associations(childComplexity), true

	case "MlschemaStudy.createTimeSinceEpoch":
		if e.complexity.MlschemaStudy.CreateTimeSinceEpoch == nil {
			break
		}

		return e.complexity.MlschemaStudy.CreateTimeSinceEpoch(childComplexity), true

	case "MlschemaStudy.events":
		if e.complexity.MlschemaStudy.Events == nil {
			break
		}

		return e.complexity.MlschemaStudy.Events(childComplexity), true

	case "MlschemaStudy.externalId":
		if e.complexity.MlschemaStudy.ExternalID == nil {
			break
		}

		return e.complexity.MlschemaStudy.ExternalID(childComplexity), true

	case "MlschemaStudy.id":
		if e.complexity.MlschemaStudy.ID == nil {
			break
		}

		return e.complexity.MlschemaStudy.ID(childComplexity), true

	case "MlschemaStudy.lastKnownState":
		if e.complexity.MlschemaStudy.LastKnownState == nil {
			break
		}

		return e.complexity.MlschemaStudy.LastKnownState(childComplexity), true

	case "MlschemaStudy.lastUpdateTimeSinceEpoch":
		if e.complexity.MlschemaStudy.LastUpdateTimeSinceEpoch == nil {
			break
		}

		return e.complexity.MlschemaStudy.LastUpdateTimeSinceEpoch(childComplexity), true

	case "MlschemaStudy.name":
		if e.complexity.MlschemaStudy.Name == nil {
			break
		}

		return e.complexity.MlschemaStudy.Name(childComplexity), true

	case "MlschemaStudy.properties":
		if e.complexity.MlschemaStudy.Properties == nil {
			break
		}

		return e.complexity.MlschemaStudy.Properties(childComplexity), true

	case "MlschemaStudy.type":
		if e.complexity.MlschemaStudy.Type == nil {
			break
		}

		return e.complexity.MlschemaStudy.Type(childComplexity), true

	case "MlschemaStudy.typeId":
		if e.complexity.MlschemaStudy.TypeID == nil {
			break
		}

		return e.complexity.MlschemaStudy.TypeID(childComplexity), true

	case "MlschemaTask.attributions":
		if e.complexity.MlschemaTask.Attributions == nil {
			break
		}

		return e.complexity.MlschemaTask.Attributions(childComplexity), true

	case "MlschemaTask.createTimeSinceEpoch":
		if e.complexity.MlschemaTask.CreateTimeSinceEpoch == nil {
			break
		}

		return e.complexity.MlschemaTask.CreateTimeSinceEpoch(childComplexity), true

	case "MlschemaTask.events":
		if e.complexity.MlschemaTask.Events == nil {
			break
		}

		return e.complexity.MlschemaTask.Events(childComplexity), true

	case "MlschemaTask.externalId":
		if e.complexity.MlschemaTask.ExternalID == nil {
			break
		}

		return e.complexity.MlschemaTask.ExternalID(childComplexity), true

	case "MlschemaTask.id":
		if e.complexity.MlschemaTask.ID == nil {
			break
		}

		return e.complexity.MlschemaTask.ID(childComplexity), true

	case "MlschemaTask.lastUpdateTimeSinceEpoch":
		if e.complexity.MlschemaTask.LastUpdateTimeSinceEpoch == nil {
			break
		}

		return e.complexity.MlschemaTask.LastUpdateTimeSinceEpoch(childComplexity), true

	case "MlschemaTask.name":
		if e.complexity.MlschemaTask.Name == nil {
			break
		}

		return e.complexity.MlschemaTask.Name(childComplexity), true

	case "MlschemaTask.properties":
		if e.complexity.MlschemaTask.Properties == nil {
			break
		}

		return e.complexity.MlschemaTask.Properties(childComplexity), true

	case "MlschemaTask.state":
		if e.complexity.MlschemaTask.State == nil {
			break
		}

		return e.complexity.MlschemaTask.State(childComplexity), true

	case "MlschemaTask.type":
		if e.complexity.MlschemaTask.Type == nil {
			break
		}

		return e.complexity.MlschemaTask.Type(childComplexity), true

	case "MlschemaTask.typeId":
		if e.complexity.MlschemaTask.TypeID == nil {
			break
		}

		return e.complexity.MlschemaTask.TypeID(childComplexity), true

	case "MlschemaTask.uri":
		if e.complexity.MlschemaTask.URI == nil {
			break
		}

		return e.complexity.MlschemaTask.URI(childComplexity), true

	case "Mutation.createArtifactType":
		if e.complexity.Mutation.CreateArtifactType == nil {
			break
		}

		args, err := ec.field_Mutation_createArtifactType_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateArtifactType(childComplexity, args["input"].(*graph.ArtifactTypeInput)), true

	case "ProtoTypeValue.typeUrl":
		if e.complexity.ProtoTypeValue.TypeURL == nil {
			break
		}

		return e.complexity.ProtoTypeValue.TypeURL(childComplexity), true

	case "ProtoTypeValue.value":
		if e.complexity.ProtoTypeValue.Value == nil {
			break
		}

		return e.complexity.ProtoTypeValue.Value(childComplexity), true

	case "ProtoValue.value":
		if e.complexity.ProtoValue.Value == nil {
			break
		}

		return e.complexity.ProtoValue.Value(childComplexity), true

	case "Query.artifactTypes":
		if e.complexity.Query.ArtifactTypes == nil {
			break
		}

		args, err := ec.field_Query_artifactTypes_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ArtifactTypes(childComplexity, args["filter"].(*graph.TypeFilter)), true

	case "Query.artifacts":
		if e.complexity.Query.Artifacts == nil {
			break
		}

		args, err := ec.field_Query_artifacts_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Artifacts(childComplexity, args["filter"].(*graph.InstanceFilter)), true

	case "Query.contextTypes":
		if e.complexity.Query.ContextTypes == nil {
			break
		}

		args, err := ec.field_Query_contextTypes_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ContextTypes(childComplexity, args["filter"].(*graph.TypeFilter)), true

	case "Query.contexts":
		if e.complexity.Query.Contexts == nil {
			break
		}

		args, err := ec.field_Query_contexts_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Contexts(childComplexity, args["filter"].(*graph.InstanceFilter)), true

	case "Query.events":
		if e.complexity.Query.Events == nil {
			break
		}

		return e.complexity.Query.Events(childComplexity), true

	case "Query.executionTypes":
		if e.complexity.Query.ExecutionTypes == nil {
			break
		}

		args, err := ec.field_Query_executionTypes_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ExecutionTypes(childComplexity, args["filter"].(*graph.TypeFilter)), true

	case "Query.executions":
		if e.complexity.Query.Executions == nil {
			break
		}

		args, err := ec.field_Query_executions_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Executions(childComplexity, args["filter"].(*graph.InstanceFilter)), true

	case "Query.mlmdDatasets":
		if e.complexity.Query.MlmdDatasets == nil {
			break
		}

		args, err := ec.field_Query_mlmdDatasets_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.MlmdDatasets(childComplexity, args["filter"].(*graph.InstanceFilter)), true

	case "Query.mlmdDeploys":
		if e.complexity.Query.MlmdDeploys == nil {
			break
		}

		args, err := ec.field_Query_mlmdDeploys_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.MlmdDeploys(childComplexity, args["filter"].(*graph.InstanceFilter)), true

	case "Query.mlmdEvaluates":
		if e.complexity.Query.MlmdEvaluates == nil {
			break
		}

		args, err := ec.field_Query_mlmdEvaluates_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.MlmdEvaluates(childComplexity, args["filter"].(*graph.InstanceFilter)), true

	case "Query.mlmdMetrics":
		if e.complexity.Query.MlmdMetrics == nil {
			break
		}

		args, err := ec.field_Query_mlmdMetrics_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.MlmdMetrics(childComplexity, args["filter"].(*graph.InstanceFilter)), true

	case "Query.mlmdModels":
		if e.complexity.Query.MlmdModels == nil {
			break
		}

		args, err := ec.field_Query_mlmdModels_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.MlmdModels(childComplexity, args["filter"].(*graph.InstanceFilter)), true

	case "Query.mlmdProcesses":
		if e.complexity.Query.MlmdProcesses == nil {
			break
		}

		args, err := ec.field_Query_mlmdProcesses_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.MlmdProcesses(childComplexity, args["filter"].(*graph.InstanceFilter)), true

	case "Query.mlmdStatistics":
		if e.complexity.Query.MlmdStatistics == nil {
			break
		}

		args, err := ec.field_Query_mlmdStatistics_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.MlmdStatistics(childComplexity, args["filter"].(*graph.InstanceFilter)), true

	case "Query.mlmdTrains":
		if e.complexity.Query.MlmdTrains == nil {
			break
		}

		args, err := ec.field_Query_mlmdTrains_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.MlmdTrains(childComplexity, args["filter"].(*graph.InstanceFilter)), true

	case "Query.mlmdTransforms":
		if e.complexity.Query.MlmdTransforms == nil {
			break
		}

		args, err := ec.field_Query_mlmdTransforms_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.MlmdTransforms(childComplexity, args["filter"].(*graph.InstanceFilter)), true

	case "Query.mlschemaAlgorithms":
		if e.complexity.Query.MlschemaAlgorithms == nil {
			break
		}

		args, err := ec.field_Query_mlschemaAlgorithms_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.MlschemaAlgorithms(childComplexity, args["filter"].(*graph.InstanceFilter)), true

	case "Query.mlschemaData":
		if e.complexity.Query.MlschemaData == nil {
			break
		}

		args, err := ec.field_Query_mlschemaData_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.MlschemaData(childComplexity, args["filter"].(*graph.InstanceFilter)), true

	case "Query.mlschemaDataCharacteristics":
		if e.complexity.Query.MlschemaDataCharacteristics == nil {
			break
		}

		args, err := ec.field_Query_mlschemaDataCharacteristics_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.MlschemaDataCharacteristics(childComplexity, args["filter"].(*graph.InstanceFilter)), true

	case "Query.mlschemaDataSets":
		if e.complexity.Query.MlschemaDataSets == nil {
			break
		}

		args, err := ec.field_Query_mlschemaDataSets_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.MlschemaDataSets(childComplexity, args["filter"].(*graph.InstanceFilter)), true

	case "Query.mlschemaDatasetCharacteristics":
		if e.complexity.Query.MlschemaDatasetCharacteristics == nil {
			break
		}

		args, err := ec.field_Query_mlschemaDatasetCharacteristics_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.MlschemaDatasetCharacteristics(childComplexity, args["filter"].(*graph.InstanceFilter)), true

	case "Query.mlschemaEvaluationMeasures":
		if e.complexity.Query.MlschemaEvaluationMeasures == nil {
			break
		}

		args, err := ec.field_Query_mlschemaEvaluationMeasures_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.MlschemaEvaluationMeasures(childComplexity, args["filter"].(*graph.InstanceFilter)), true

	case "Query.mlschemaEvaluationProcedures":
		if e.complexity.Query.MlschemaEvaluationProcedures == nil {
			break
		}

		args, err := ec.field_Query_mlschemaEvaluationProcedures_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.MlschemaEvaluationProcedures(childComplexity, args["filter"].(*graph.InstanceFilter)), true

	case "Query.mlschemaEvaluationSpecifications":
		if e.complexity.Query.MlschemaEvaluationSpecifications == nil {
			break
		}

		args, err := ec.field_Query_mlschemaEvaluationSpecifications_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.MlschemaEvaluationSpecifications(childComplexity, args["filter"].(*graph.InstanceFilter)), true

	case "Query.mlschemaExperiments":
		if e.complexity.Query.MlschemaExperiments == nil {
			break
		}

		args, err := ec.field_Query_mlschemaExperiments_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.MlschemaExperiments(childComplexity, args["filter"].(*graph.InstanceFilter)), true

	case "Query.mlschemaFeatureCharacteristics":
		if e.complexity.Query.MlschemaFeatureCharacteristics == nil {
			break
		}

		args, err := ec.field_Query_mlschemaFeatureCharacteristics_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.MlschemaFeatureCharacteristics(childComplexity, args["filter"].(*graph.InstanceFilter)), true

	case "Query.mlschemaFeatures":
		if e.complexity.Query.MlschemaFeatures == nil {
			break
		}

		args, err := ec.field_Query_mlschemaFeatures_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.MlschemaFeatures(childComplexity, args["filter"].(*graph.InstanceFilter)), true

	case "Query.mlschemaHyperParameterSettings":
		if e.complexity.Query.MlschemaHyperParameterSettings == nil {
			break
		}

		args, err := ec.field_Query_mlschemaHyperParameterSettings_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.MlschemaHyperParameterSettings(childComplexity, args["filter"].(*graph.InstanceFilter)), true

	case "Query.mlschemaHyperParameters":
		if e.complexity.Query.MlschemaHyperParameters == nil {
			break
		}

		args, err := ec.field_Query_mlschemaHyperParameters_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.MlschemaHyperParameters(childComplexity, args["filter"].(*graph.InstanceFilter)), true

	case "Query.mlschemaImplementationCharacteristics":
		if e.complexity.Query.MlschemaImplementationCharacteristics == nil {
			break
		}

		args, err := ec.field_Query_mlschemaImplementationCharacteristics_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.MlschemaImplementationCharacteristics(childComplexity, args["filter"].(*graph.InstanceFilter)), true

	case "Query.mlschemaImplementations":
		if e.complexity.Query.MlschemaImplementations == nil {
			break
		}

		args, err := ec.field_Query_mlschemaImplementations_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.MlschemaImplementations(childComplexity, args["filter"].(*graph.InstanceFilter)), true

	case "Query.mlschemaModelEvaluations":
		if e.complexity.Query.MlschemaModelEvaluations == nil {
			break
		}

		args, err := ec.field_Query_mlschemaModelEvaluations_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.MlschemaModelEvaluations(childComplexity, args["filter"].(*graph.InstanceFilter)), true

	case "Query.mlschemaModelVersions":
		if e.complexity.Query.MlschemaModelVersions == nil {
			break
		}

		args, err := ec.field_Query_mlschemaModelVersions_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.MlschemaModelVersions(childComplexity, args["filter"].(*graph.InstanceFilter)), true

	case "Query.mlschemaModels":
		if e.complexity.Query.MlschemaModels == nil {
			break
		}

		args, err := ec.field_Query_mlschemaModels_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.MlschemaModels(childComplexity, args["filter"].(*graph.InstanceFilter)), true

	case "Query.mlschemaRegisteredModels":
		if e.complexity.Query.MlschemaRegisteredModels == nil {
			break
		}

		args, err := ec.field_Query_mlschemaRegisteredModels_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.MlschemaRegisteredModels(childComplexity, args["filter"].(*graph.InstanceFilter)), true

	case "Query.mlschemaRuns":
		if e.complexity.Query.MlschemaRuns == nil {
			break
		}

		args, err := ec.field_Query_mlschemaRuns_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.MlschemaRuns(childComplexity, args["filter"].(*graph.InstanceFilter)), true

	case "Query.mlschemaSoftwares":
		if e.complexity.Query.MlschemaSoftwares == nil {
			break
		}

		args, err := ec.field_Query_mlschemaSoftwares_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.MlschemaSoftwares(childComplexity, args["filter"].(*graph.InstanceFilter)), true

	case "Query.mlschemaStudies":
		if e.complexity.Query.MlschemaStudies == nil {
			break
		}

		args, err := ec.field_Query_mlschemaStudies_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.MlschemaStudies(childComplexity, args["filter"].(*graph.InstanceFilter)), true

	case "Query.mlschemaTasks":
		if e.complexity.Query.MlschemaTasks == nil {
			break
		}

		args, err := ec.field_Query_mlschemaTasks_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.MlschemaTasks(childComplexity, args["filter"].(*graph.InstanceFilter)), true

	case "Query.types":
		if e.complexity.Query.Types == nil {
			break
		}

		args, err := ec.field_Query_types_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Types(childComplexity, args["filter"].(*graph.TypeFilter)), true

	case "StringValue.value":
		if e.complexity.StringValue.Value == nil {
			break
		}

		return e.complexity.StringValue.Value(childComplexity), true

	case "StructTuple.key":
		if e.complexity.StructTuple.Key == nil {
			break
		}

		return e.complexity.StructTuple.Key(childComplexity), true

	case "StructTuple.value":
		if e.complexity.StructTuple.Value == nil {
			break
		}

		return e.complexity.StructTuple.Value(childComplexity), true

	case "StructValue.value":
		if e.complexity.StructValue.Value == nil {
			break
		}

		return e.complexity.StructValue.Value(childComplexity), true

	case "TypeProperty.dataType":
		if e.complexity.TypeProperty.DataType == nil {
			break
		}

		return e.complexity.TypeProperty.DataType(childComplexity), true

	case "TypeProperty.name":
		if e.complexity.TypeProperty.Name == nil {
			break
		}

		return e.complexity.TypeProperty.Name(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e, 0, 0, make(chan graphql.DeferredResult)}
	inputUnmarshalMap := graphql.BuildUnmarshalerMap(
		ec.unmarshalInputArtifactTypeInput,
		ec.unmarshalInputInstanceFilter,
		ec.unmarshalInputTypeFilter,
		ec.unmarshalInputTypePropertyInput,
	)
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			var response graphql.Response
			var data graphql.Marshaler
			if first {
				first = false
				ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
				data = ec._Query(ctx, rc.Operation.SelectionSet)
			} else {
				if atomic.LoadInt32(&ec.pendingDeferred) > 0 {
					result := <-ec.deferredResults
					atomic.AddInt32(&ec.pendingDeferred, -1)
					data = result.Result
					response.Path = result.Path
					response.Label = result.Label
					response.Errors = result.Errors
				} else {
					return nil
				}
			}
			var buf bytes.Buffer
			data.MarshalGQL(&buf)
			response.Data = buf.Bytes()
			if atomic.LoadInt32(&ec.deferred) > 0 {
				hasNext := atomic.LoadInt32(&ec.pendingDeferred) > 0
				response.HasNext = &hasNext
			}

			return &response
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
	deferred        int32
	pendingDeferred int32
	deferredResults chan graphql.DeferredResult
}

func (ec *executionContext) processDeferredGroup(dg graphql.DeferredGroup) {
	atomic.AddInt32(&ec.pendingDeferred, 1)
	go func() {
		ctx := graphql.WithFreshResponseContext(dg.Context)
		dg.FieldSet.Dispatch(ctx)
		ds := graphql.DeferredResult{
			Path:   dg.Path,
			Label:  dg.Label,
			Result: dg.FieldSet,
			Errors: graphql.GetErrors(ctx),
		}
		// null fields should bubble up
		if dg.FieldSet.Invalids > 0 {
			ds.Result = graphql.Null
		}
		ec.deferredResults <- ds
	}()
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "../../../api/graphql/base-schema.graphqls", Input: `scalar Int64

"""
State of an Artifact
"""
enum ArtifactState {
    UNKNOWN
    """
    A state indicating that the artifact may exist.
    """
    PENDING
    """
    A state indicating that the artifact should exist, unless something
    external to the system deletes it.
    """
    LIVE
    """
    A state indicating that the artifact should be deleted.
    """
    MARKED_FOR_DELETION
    """
    A state indicating that the artifact has been deleted.
    """
    DELETED
    """
    A state indicating that the artifact has been abandoned, which may be
    due to a failed or cancelled execution.
    """
    ABANDONED
    """
    A state indicating that the artifact is a reference artifact. At
    execution start time, the orchestrator produces an output artifact for
    each output key with state PENDING. However, for an intermediate
    artifact, this first artifact's state will be REFERENCE. Intermediate
    artifacts emitted during a component's execution will copy the REFERENCE
    artifact's attributes. At the end of an execution, the artifact state
    should remain REFERENCE instead of being changed to LIVE.
    """
    REFERENCE
}

"""
Generic Artifact Interface implemented by all Artifact instances
"""
interface ArtifactInterface {
    id: ID!
    typeId: ID!
    uri: String
    state: ArtifactState
    name: String
    externalId: String
    createTimeSinceEpoch: Int64!
    lastUpdateTimeSinceEpoch: Int64!
    type: ArtifactType!
    properties: [InstanceProperty!]
    attributions: [Attribution!]
    events: [Event!]
}

"""
Generic Artifact instance
"""
type Artifact implements ArtifactInterface {
    id: ID!
    typeId: ID!
    uri: String
    state: ArtifactState
    name: String
    externalId: String
    createTimeSinceEpoch: Int64!
    lastUpdateTimeSinceEpoch: Int64!
    type: ArtifactType!
    properties: [InstanceProperty!]
    attributions: [Attribution!]
    events: [Event!]
}

"""
Instance property
"""
type InstanceProperty {
    name: String!
    isCustomProperty: Boolean!
    propertyValue: Value!
}

type Attribution {
    id: ID!
    contextId: ID!
    artifactId: ID!
    context: ContextInterface!
    artifact: ArtifactInterface!
}

type Association {
    id: ID!
    contextId: ID!
    executionId: ID!
    context: ContextInterface!
    execution: ExecutionInterface!
}

"""
Generic Context interface implemented by all Context instances
"""
interface ContextInterface {
    id: ID!
    typeId: ID!
    name: String!
    externalId: String
    createTimeSinceEpoch: Int64!
    lastUpdateTimeSinceEpoch: Int64!
    type: ContextType!
    properties: [InstanceProperty!]
    parents: [ContextInterface!]
    children: [ContextInterface!]
    attributions: [Attribution!]
    associations: [Association!]
}

"""
Generic Context instance
"""
type Context implements ContextInterface {
    id: ID!
    typeId: ID!
    name: String!
    externalId: String
    createTimeSinceEpoch: Int64!
    lastUpdateTimeSinceEpoch: Int64!
    type: ContextType!
    properties: [InstanceProperty!]
    parents: [ContextInterface!]
    children: [ContextInterface!]
    attributions: [Attribution!]
    associations: [Association!]
}

"""
Events distinguish between an artifact that is written by the execution
(possibly as a cache), versus artifacts that are part of the declared
output of the Execution. For more information on what DECLARED_ means,
see the comment on the message.
"""
enum EventType {
    UNKNOWN
    """
    A declared output of the execution.
    """
    DECLARED_OUTPUT
    """
    A declared input of the execution.
    """
    DECLARED_INPUT
    """
    An input of the execution.
    """
    INPUT
    """
    An output of the execution.
    """
    OUTPUT
    """
    An internal input of the execution.
    """
    INTERNAL_INPUT
    """
    An internal output of the execution.
    """
    INTERNAL_OUTPUT
    """
    A pending output of the execution.
    """
    PENDING_OUTPUT
}

union EventStep = EventStepIndex | EventStepKey

type EventStepIndex {
    index: Int!
}

type EventStepKey {
    key: String!
}

"""
Event instance
"""
type Event {
    id: ID!
    artifactId: ID!
    executionId: ID!
    type: EventType!
    path: [EventStep!]!
    millisecondsSinceEpoch: Int64!
    artifact: ArtifactInterface
    execution: ExecutionInterface
}

"""
The state of the Execution. The state transitions are
NEW -> RUNNING -> COMPLETE | CACHED | FAILED | CANCELED
CACHED means the execution is skipped due to cached results.
CANCELED means the execution is skipped due to precondition not met. It is
different from CACHED in that a CANCELED execution will not have any event
associated with it. It is different from FAILED in that there is no
unexpected error happened and it is regarded as a normal state.
"""
enum ExecutionState {
    UNKNOWN
    NEW
    RUNNING
    COMPLETE
    FAILED
    CACHED
    CANCELED
}

"""
Generic Execution interface implemented by all Execution instances
"""
interface ExecutionInterface {
    id: ID!
    typeId: ID!
    lastKnownState: ExecutionState
    name: String
    externalId: String
    createTimeSinceEpoch: Int64!
    lastUpdateTimeSinceEpoch: Int64!
    type: ExecutionType!
    properties: [InstanceProperty!]
    associations: [Association!]
    events: [Event!]
}

"""
Generic Execution instance
"""
type Execution {
    id: ID!
    typeId: ID!
    lastKnownState: ExecutionState
    name: String
    externalId: String
    createTimeSinceEpoch: Int64!
    lastUpdateTimeSinceEpoch: Int64!
    type: ExecutionType!
    properties: [InstanceProperty!]!
    associations: [InstanceProperty!]
    events: [InstanceProperty!]
}

"""
Property values
"""
union Value = IntValue | DoubleValue | StringValue | BoolValue | StructValue | ProtoValue

type IntValue {
    value: Int64!
}

type DoubleValue {
    value: Float!
}

type StringValue {
    value: String!
}

type BoolValue {
    value: Boolean!
}

"""
List values usable inside StructValue
"""
type ListValue {
    value: [StructValueType!]
}

"""
StructValueType is map entry type in StructValue
"""
union StructValueType = IntValue | DoubleValue | StringValue | BoolValue | StructValue | ListValue

"""
Entry in an StructValue map
"""
type StructTuple {
    key: String!
    value: StructValueType
}

"""
StructValue is a key value map and supports list values
"""
type StructValue {
    value: [StructTuple!]!
}

"""
ByteArray scalar type mapped to base64 encoded string
"""
scalar ByteArray

"""
ProtoValue wraps a ProtoTypeValue tuple
"""
type ProtoValue {
    value: ProtoTypeValue!
}

"""
ProtoTypeValue is a byte array with an optional typeUrl describing the protobuf type
"""
type ProtoTypeValue {
    typeUrl: String
    value: ByteArray
}

"""
DataType describes property value types
"""
enum DataType {
    UNKNOWN
    INT
    DOUBLE
    STRING
    STRUCT
    PROTO
    BOOLEAN
}

"""
TypeKind describes metadata Types
"""
enum TypeKind {
    EXECUTION_TYPE
    ARTIFACT_TYPE
    CONTEXT_TYPE
}

"""
Generic Type interface for all metadata types
"""
interface Type {
    id: ID!
    name: String!
    version: String
    typeKind: TypeKind!
    description: String
    externalId: String
    properties: [TypeProperty!]
}

"""
Type property
"""
type TypeProperty {
    name: String!
    dataType: DataType!
}

"""
Type property input
"""
input TypePropertyInput {
    name: String!
    dataType: DataType!
}

"""
ArtifactType input
"""
input ArtifactTypeInput {
    name: String!
    version: String
    typeKind: TypeKind!
    description: String
    externalId: String
    properties: [TypePropertyInput!]
}

"""
ArtifactType
"""
type ArtifactType implements Type {
    id: ID!
    name: String!
    version: String
    typeKind: TypeKind!
    description: String
    externalId: String
    properties: [TypeProperty!]
}

"""
ContextType
"""
type ContextType implements Type {
    id: ID!
    name: String!
    version: String
    typeKind: TypeKind!
    description: String
    externalId: String
    properties: [TypeProperty!]
}

"""
ExecutionType
"""
type ExecutionType implements Type {
    id: ID!
    name: String!
    version: String
    typeKind: TypeKind!
    description: String
    externalId: String
    inputType: String
    outputType: String
    properties: [TypeProperty!]
}
`, BuiltIn: false},
	{Name: "../../../api/graphql/ml-metadata.graphqls", Input: `# Code generated by github.com/opendatahub-io/model-registry/gqlmapper. DO NOT EDIT.
# schema generated from ml-metadata.yaml

# Artifacts

# Type name map "MlmdDataset":"mlmd.Dataset"
type MlmdDataset implements ArtifactInterface {
    id: ID!
    typeId: ID!
    uri: String
    state: ArtifactState
    name: String
    externalId: String
    createTimeSinceEpoch: Int64!
    lastUpdateTimeSinceEpoch: Int64!
    intProp: Int64
    secondProp: Float
    type: ArtifactType!
    properties : [InstanceProperty!]!
    attributions: [Attribution!]
    events: [Event!]
}

# Type name map "MlmdModel":"mlmd.Model"
type MlmdModel implements ArtifactInterface {
    id: ID!
    typeId: ID!
    uri: String
    state: ArtifactState
    name: String
    externalId: String
    createTimeSinceEpoch: Int64!
    lastUpdateTimeSinceEpoch: Int64!
    doubleProp: Float
    type: ArtifactType!
    properties : [InstanceProperty!]!
    attributions: [Attribution!]
    events: [Event!]
}

# Type name map "MlmdMetrics":"mlmd.Metrics"
type MlmdMetrics implements ArtifactInterface {
    id: ID!
    typeId: ID!
    uri: String
    state: ArtifactState
    name: String
    externalId: String
    createTimeSinceEpoch: Int64!
    lastUpdateTimeSinceEpoch: Int64!
    stringProp: String
    type: ArtifactType!
    properties : [InstanceProperty!]!
    attributions: [Attribution!]
    events: [Event!]
}

# Type name map "MlmdStatistics":"mlmd.Statistics"
type MlmdStatistics implements ArtifactInterface {
    id: ID!
    typeId: ID!
    uri: String
    state: ArtifactState
    name: String
    externalId: String
    createTimeSinceEpoch: Int64!
    lastUpdateTimeSinceEpoch: Int64!
    structProp: [StructTuple!]
    type: ArtifactType!
    properties : [InstanceProperty!]!
    attributions: [Attribution!]
    events: [Event!]
}
# Contexts
# Executions

# Type name map "MlmdTrain":"mlmd.Train"
type MlmdTrain implements ExecutionInterface {
    id: ID!
    typeId: ID!
    lastKnownState: ExecutionState
    name: String
    externalId: String
    createTimeSinceEpoch: Int64!
    lastUpdateTimeSinceEpoch: Int64!
    protoProp: ProtoTypeValue
    type: ExecutionType!
    properties: [InstanceProperty!]!
    associations: [Association!]
    events: [Event!]
}

# Type name map "MlmdTransform":"mlmd.Transform"
type MlmdTransform implements ExecutionInterface {
    id: ID!
    typeId: ID!
    lastKnownState: ExecutionState
    name: String
    externalId: String
    createTimeSinceEpoch: Int64!
    lastUpdateTimeSinceEpoch: Int64!
    booleanProp: Boolean
    type: ExecutionType!
    properties: [InstanceProperty!]!
    associations: [Association!]
    events: [Event!]
}

# Type name map "MlmdProcess":"mlmd.Process"
type MlmdProcess implements ExecutionInterface {
    id: ID!
    typeId: ID!
    lastKnownState: ExecutionState
    name: String
    externalId: String
    createTimeSinceEpoch: Int64!
    lastUpdateTimeSinceEpoch: Int64!
    type: ExecutionType!
    properties: [InstanceProperty!]!
    associations: [Association!]
    events: [Event!]
}

# Type name map "MlmdEvaluate":"mlmd.Evaluate"
type MlmdEvaluate implements ExecutionInterface {
    id: ID!
    typeId: ID!
    lastKnownState: ExecutionState
    name: String
    externalId: String
    createTimeSinceEpoch: Int64!
    lastUpdateTimeSinceEpoch: Int64!
    type: ExecutionType!
    properties: [InstanceProperty!]!
    associations: [Association!]
    events: [Event!]
}

# Type name map "MlmdDeploy":"mlmd.Deploy"
type MlmdDeploy implements ExecutionInterface {
    id: ID!
    typeId: ID!
    lastKnownState: ExecutionState
    name: String
    externalId: String
    createTimeSinceEpoch: Int64!
    lastUpdateTimeSinceEpoch: Int64!
    type: ExecutionType!
    properties: [InstanceProperty!]!
    associations: [Association!]
    events: [Event!]
}

# queries
extend type Query {
    mlmdDatasets(filter: InstanceFilter): [MlmdDataset!]
    mlmdModels(filter: InstanceFilter): [MlmdModel!]
    mlmdMetrics(filter: InstanceFilter): [MlmdMetrics!]
    mlmdStatistics(filter: InstanceFilter): [MlmdStatistics!]
    mlmdTrains(filter: InstanceFilter): [MlmdTrain!]
    mlmdTransforms(filter: InstanceFilter): [MlmdTransform!]
    mlmdProcesses(filter: InstanceFilter): [MlmdProcess!]
    mlmdEvaluates(filter: InstanceFilter): [MlmdEvaluate!]
    mlmdDeploys(filter: InstanceFilter): [MlmdDeploy!]
}
`, BuiltIn: false},
	{Name: "../../../api/graphql/mlschema-metadata.graphqls", Input: `# Code generated by github.com/opendatahub-io/model-registry/gqlmapper. DO NOT EDIT.
# schema generated from mlschema-metadata.yaml

# Artifacts

# Type name map "MlschemaModel":"mlschema.Model"
type MlschemaModel implements ArtifactInterface {
    id: ID!
    typeId: ID!
    uri: String
    state: ArtifactState
    name: String
    externalId: String
    createTimeSinceEpoch: Int64!
    lastUpdateTimeSinceEpoch: Int64!
    type: ArtifactType!
    properties : [InstanceProperty!]!
    attributions: [Attribution!]
    events: [Event!]
}

# Type name map "MlschemaModelEvaluation":"mlschema.ModelEvaluation"
type MlschemaModelEvaluation implements ArtifactInterface {
    id: ID!
    typeId: ID!
    uri: String
    state: ArtifactState
    name: String
    externalId: String
    createTimeSinceEpoch: Int64!
    lastUpdateTimeSinceEpoch: Int64!
    type: ArtifactType!
    properties : [InstanceProperty!]!
    attributions: [Attribution!]
    events: [Event!]
}

# Type name map "MlschemaEvaluationMeasure":"mlschema.EvaluationMeasure"
type MlschemaEvaluationMeasure implements ArtifactInterface {
    id: ID!
    typeId: ID!
    uri: String
    state: ArtifactState
    name: String
    externalId: String
    createTimeSinceEpoch: Int64!
    lastUpdateTimeSinceEpoch: Int64!
    type: ArtifactType!
    properties : [InstanceProperty!]!
    attributions: [Attribution!]
    events: [Event!]
}

# Type name map "MlschemaEvaluationSpecification":"mlschema.EvaluationSpecification"
type MlschemaEvaluationSpecification implements ArtifactInterface {
    id: ID!
    typeId: ID!
    uri: String
    state: ArtifactState
    name: String
    externalId: String
    createTimeSinceEpoch: Int64!
    lastUpdateTimeSinceEpoch: Int64!
    type: ArtifactType!
    properties : [InstanceProperty!]!
    attributions: [Attribution!]
    events: [Event!]
}

# Type name map "MlschemaEvaluationProcedure":"mlschema.EvaluationProcedure"
type MlschemaEvaluationProcedure implements ArtifactInterface {
    id: ID!
    typeId: ID!
    uri: String
    state: ArtifactState
    name: String
    externalId: String
    createTimeSinceEpoch: Int64!
    lastUpdateTimeSinceEpoch: Int64!
    type: ArtifactType!
    properties : [InstanceProperty!]!
    attributions: [Attribution!]
    events: [Event!]
}

# Type name map "MlschemaTask":"mlschema.Task"
type MlschemaTask implements ArtifactInterface {
    id: ID!
    typeId: ID!
    uri: String
    state: ArtifactState
    name: String
    externalId: String
    createTimeSinceEpoch: Int64!
    lastUpdateTimeSinceEpoch: Int64!
    type: ArtifactType!
    properties : [InstanceProperty!]!
    attributions: [Attribution!]
    events: [Event!]
}

# Type name map "MlschemaData":"mlschema.Data"
type MlschemaData implements ArtifactInterface {
    id: ID!
    typeId: ID!
    uri: String
    state: ArtifactState
    name: String
    externalId: String
    createTimeSinceEpoch: Int64!
    lastUpdateTimeSinceEpoch: Int64!
    type: ArtifactType!
    properties : [InstanceProperty!]!
    attributions: [Attribution!]
    events: [Event!]
}

# Type name map "MlschemaDataSet":"mlschema.DataSet"
type MlschemaDataSet implements ArtifactInterface {
    id: ID!
    typeId: ID!
    uri: String
    state: ArtifactState
    name: String
    externalId: String
    createTimeSinceEpoch: Int64!
    lastUpdateTimeSinceEpoch: Int64!
    type: ArtifactType!
    properties : [InstanceProperty!]!
    attributions: [Attribution!]
    events: [Event!]
}

# Type name map "MlschemaFeature":"mlschema.Feature"
type MlschemaFeature implements ArtifactInterface {
    id: ID!
    typeId: ID!
    uri: String
    state: ArtifactState
    name: String
    externalId: String
    createTimeSinceEpoch: Int64!
    lastUpdateTimeSinceEpoch: Int64!
    type: ArtifactType!
    properties : [InstanceProperty!]!
    attributions: [Attribution!]
    events: [Event!]
}

# Type name map "MlschemaAlgorithm":"mlschema.Algorithm"
type MlschemaAlgorithm implements ArtifactInterface {
    id: ID!
    typeId: ID!
    uri: String
    state: ArtifactState
    name: String
    externalId: String
    createTimeSinceEpoch: Int64!
    lastUpdateTimeSinceEpoch: Int64!
    type: ArtifactType!
    properties : [InstanceProperty!]!
    attributions: [Attribution!]
    events: [Event!]
}

# Type name map "MlschemaSoftware":"mlschema.Software"
type MlschemaSoftware implements ArtifactInterface {
    id: ID!
    typeId: ID!
    uri: String
    state: ArtifactState
    name: String
    externalId: String
    createTimeSinceEpoch: Int64!
    lastUpdateTimeSinceEpoch: Int64!
    type: ArtifactType!
    properties : [InstanceProperty!]!
    attributions: [Attribution!]
    events: [Event!]
}

# Type name map "MlschemaImplementation":"mlschema.Implementation"
type MlschemaImplementation implements ArtifactInterface {
    id: ID!
    typeId: ID!
    uri: String
    state: ArtifactState
    name: String
    externalId: String
    createTimeSinceEpoch: Int64!
    lastUpdateTimeSinceEpoch: Int64!
    type: ArtifactType!
    properties : [InstanceProperty!]!
    attributions: [Attribution!]
    events: [Event!]
}

# Type name map "MlschemaHyperParameter":"mlschema.HyperParameter"
type MlschemaHyperParameter implements ArtifactInterface {
    id: ID!
    typeId: ID!
    uri: String
    state: ArtifactState
    name: String
    externalId: String
    createTimeSinceEpoch: Int64!
    lastUpdateTimeSinceEpoch: Int64!
    type: ArtifactType!
    properties : [InstanceProperty!]!
    attributions: [Attribution!]
    events: [Event!]
}

# Type name map "MlschemaHyperParameterSetting":"mlschema.HyperParameterSetting"
type MlschemaHyperParameterSetting implements ArtifactInterface {
    id: ID!
    typeId: ID!
    uri: String
    state: ArtifactState
    name: String
    externalId: String
    createTimeSinceEpoch: Int64!
    lastUpdateTimeSinceEpoch: Int64!
    type: ArtifactType!
    properties : [InstanceProperty!]!
    attributions: [Attribution!]
    events: [Event!]
}

# Type name map "MlschemaImplementationCharacteristic":"mlschema.ImplementationCharacteristic"
type MlschemaImplementationCharacteristic implements ArtifactInterface {
    id: ID!
    typeId: ID!
    uri: String
    state: ArtifactState
    name: String
    externalId: String
    createTimeSinceEpoch: Int64!
    lastUpdateTimeSinceEpoch: Int64!
    type: ArtifactType!
    properties : [InstanceProperty!]!
    attributions: [Attribution!]
    events: [Event!]
}

# Type name map "MlschemaDatasetCharacteristic":"mlschema.DatasetCharacteristic"
type MlschemaDatasetCharacteristic implements ArtifactInterface {
    id: ID!
    typeId: ID!
    uri: String
    state: ArtifactState
    name: String
    externalId: String
    createTimeSinceEpoch: Int64!
    lastUpdateTimeSinceEpoch: Int64!
    type: ArtifactType!
    properties : [InstanceProperty!]!
    attributions: [Attribution!]
    events: [Event!]
}

# Type name map "MlschemaFeatureCharacteristic":"mlschema.FeatureCharacteristic"
type MlschemaFeatureCharacteristic implements ArtifactInterface {
    id: ID!
    typeId: ID!
    uri: String
    state: ArtifactState
    name: String
    externalId: String
    createTimeSinceEpoch: Int64!
    lastUpdateTimeSinceEpoch: Int64!
    type: ArtifactType!
    properties : [InstanceProperty!]!
    attributions: [Attribution!]
    events: [Event!]
}
# Contexts

# Type name map "MlschemaRegisteredModel":"mlschema.RegisteredModel"
type MlschemaRegisteredModel implements ContextInterface {
    id: ID!
    typeId: ID!
    name: String!
    externalId: String
    createTimeSinceEpoch: Int64!
    lastUpdateTimeSinceEpoch: Int64!
    type: ContextType!
    properties: [InstanceProperty!]!
    parents: [ContextInterface!]
    children: [ContextInterface!]
    attributions: [Attribution!]
    associations: [Association!]
}

# Type name map "MlschemaModelVersion":"mlschema.ModelVersion"
type MlschemaModelVersion implements ContextInterface {
    id: ID!
    typeId: ID!
    name: String!
    externalId: String
    createTimeSinceEpoch: Int64!
    lastUpdateTimeSinceEpoch: Int64!
    type: ContextType!
    properties: [InstanceProperty!]!
    parents: [ContextInterface!]
    children: [ContextInterface!]
    attributions: [Attribution!]
    associations: [Association!]
}

# Type name map "MlschemaDataCharacteristic":"mlschema.DataCharacteristic"
type MlschemaDataCharacteristic implements ContextInterface {
    id: ID!
    typeId: ID!
    name: String!
    externalId: String
    createTimeSinceEpoch: Int64!
    lastUpdateTimeSinceEpoch: Int64!
    type: ContextType!
    properties: [InstanceProperty!]!
    parents: [ContextInterface!]
    children: [ContextInterface!]
    attributions: [Attribution!]
    associations: [Association!]
}
# Executions

# Type name map "MlschemaStudy":"mlschema.Study"
type MlschemaStudy implements ExecutionInterface {
    id: ID!
    typeId: ID!
    lastKnownState: ExecutionState
    name: String
    externalId: String
    createTimeSinceEpoch: Int64!
    lastUpdateTimeSinceEpoch: Int64!
    type: ExecutionType!
    properties: [InstanceProperty!]!
    associations: [Association!]
    events: [Event!]
}

# Type name map "MlschemaExperiment":"mlschema.Experiment"
type MlschemaExperiment implements ExecutionInterface {
    id: ID!
    typeId: ID!
    lastKnownState: ExecutionState
    name: String
    externalId: String
    createTimeSinceEpoch: Int64!
    lastUpdateTimeSinceEpoch: Int64!
    type: ExecutionType!
    properties: [InstanceProperty!]!
    associations: [Association!]
    events: [Event!]
}

# Type name map "MlschemaRun":"mlschema.Run"
type MlschemaRun implements ExecutionInterface {
    id: ID!
    typeId: ID!
    lastKnownState: ExecutionState
    name: String
    externalId: String
    createTimeSinceEpoch: Int64!
    lastUpdateTimeSinceEpoch: Int64!
    type: ExecutionType!
    properties: [InstanceProperty!]!
    associations: [Association!]
    events: [Event!]
}

# queries
extend type Query {
    mlschemaModels(filter: InstanceFilter): [MlschemaModel!]
    mlschemaModelEvaluations(filter: InstanceFilter): [MlschemaModelEvaluation!]
    mlschemaEvaluationMeasures(filter: InstanceFilter): [MlschemaEvaluationMeasure!]
    mlschemaEvaluationSpecifications(filter: InstanceFilter): [MlschemaEvaluationSpecification!]
    mlschemaEvaluationProcedures(filter: InstanceFilter): [MlschemaEvaluationProcedure!]
    mlschemaTasks(filter: InstanceFilter): [MlschemaTask!]
    mlschemaData(filter: InstanceFilter): [MlschemaData!]
    mlschemaDataSets(filter: InstanceFilter): [MlschemaDataSet!]
    mlschemaFeatures(filter: InstanceFilter): [MlschemaFeature!]
    mlschemaAlgorithms(filter: InstanceFilter): [MlschemaAlgorithm!]
    mlschemaSoftwares(filter: InstanceFilter): [MlschemaSoftware!]
    mlschemaImplementations(filter: InstanceFilter): [MlschemaImplementation!]
    mlschemaHyperParameters(filter: InstanceFilter): [MlschemaHyperParameter!]
    mlschemaHyperParameterSettings(filter: InstanceFilter): [MlschemaHyperParameterSetting!]
    mlschemaImplementationCharacteristics(filter: InstanceFilter): [MlschemaImplementationCharacteristic!]
    mlschemaDatasetCharacteristics(filter: InstanceFilter): [MlschemaDatasetCharacteristic!]
    mlschemaFeatureCharacteristics(filter: InstanceFilter): [MlschemaFeatureCharacteristic!]
    mlschemaRegisteredModels(filter: InstanceFilter): [MlschemaRegisteredModel!]
    mlschemaModelVersions(filter: InstanceFilter): [MlschemaModelVersion!]
    mlschemaDataCharacteristics(filter: InstanceFilter): [MlschemaDataCharacteristic!]
    mlschemaStudies(filter: InstanceFilter): [MlschemaStudy!]
    mlschemaExperiments(filter: InstanceFilter): [MlschemaExperiment!]
    mlschemaRuns(filter: InstanceFilter): [MlschemaRun!]
}
`, BuiltIn: false},
	{Name: "../../../api/graphql/schema.graphqls", Input: `input TypeFilter {
    ids: [ID!]
    names: [String!]
    versions: [String!]
    externalIds: [String!]
}

input InstanceFilter {
    ids: [ID!]
    typeIds: [ID!]
    names: [String!]
    externalIds: [String!]
}

type Query {
    types(filter: TypeFilter): [Type!]
    artifactTypes(filter: TypeFilter): [ArtifactType!]
    contextTypes(filter: TypeFilter): [ContextType!]
    executionTypes(filter: TypeFilter): [ExecutionType!]
    artifacts(filter: InstanceFilter): [ArtifactInterface!]
    contexts(filter: InstanceFilter): [ContextInterface!]
    executions(filter: InstanceFilter): [ExecutionInterface!]
    events: [Event!]
}

type Mutation {
    createArtifactType(input: ArtifactTypeInput): ArtifactType!
}
`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_Mutation_createArtifactType_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *graph.ArtifactTypeInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOArtifactTypeInput2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐArtifactTypeInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_artifactTypes_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *graph.TypeFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOTypeFilter2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐTypeFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_artifacts_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *graph.InstanceFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOInstanceFilter2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐInstanceFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_contextTypes_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *graph.TypeFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOTypeFilter2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐTypeFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_contexts_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *graph.InstanceFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOInstanceFilter2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐInstanceFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_executionTypes_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *graph.TypeFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOTypeFilter2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐTypeFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_executions_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *graph.InstanceFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOInstanceFilter2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐInstanceFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_mlmdDatasets_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *graph.InstanceFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOInstanceFilter2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐInstanceFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_mlmdDeploys_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *graph.InstanceFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOInstanceFilter2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐInstanceFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_mlmdEvaluates_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *graph.InstanceFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOInstanceFilter2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐInstanceFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_mlmdMetrics_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *graph.InstanceFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOInstanceFilter2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐInstanceFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_mlmdModels_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *graph.InstanceFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOInstanceFilter2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐInstanceFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_mlmdProcesses_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *graph.InstanceFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOInstanceFilter2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐInstanceFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_mlmdStatistics_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *graph.InstanceFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOInstanceFilter2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐInstanceFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_mlmdTrains_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *graph.InstanceFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOInstanceFilter2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐInstanceFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_mlmdTransforms_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *graph.InstanceFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOInstanceFilter2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐInstanceFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_mlschemaAlgorithms_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *graph.InstanceFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOInstanceFilter2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐInstanceFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_mlschemaDataCharacteristics_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *graph.InstanceFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOInstanceFilter2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐInstanceFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_mlschemaDataSets_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *graph.InstanceFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOInstanceFilter2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐInstanceFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_mlschemaData_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *graph.InstanceFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOInstanceFilter2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐInstanceFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_mlschemaDatasetCharacteristics_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *graph.InstanceFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOInstanceFilter2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐInstanceFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_mlschemaEvaluationMeasures_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *graph.InstanceFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOInstanceFilter2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐInstanceFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_mlschemaEvaluationProcedures_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *graph.InstanceFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOInstanceFilter2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐInstanceFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_mlschemaEvaluationSpecifications_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *graph.InstanceFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOInstanceFilter2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐInstanceFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_mlschemaExperiments_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *graph.InstanceFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOInstanceFilter2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐInstanceFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_mlschemaFeatureCharacteristics_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *graph.InstanceFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOInstanceFilter2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐInstanceFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_mlschemaFeatures_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *graph.InstanceFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOInstanceFilter2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐInstanceFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_mlschemaHyperParameterSettings_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *graph.InstanceFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOInstanceFilter2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐInstanceFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_mlschemaHyperParameters_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *graph.InstanceFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOInstanceFilter2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐInstanceFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_mlschemaImplementationCharacteristics_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *graph.InstanceFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOInstanceFilter2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐInstanceFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_mlschemaImplementations_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *graph.InstanceFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOInstanceFilter2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐInstanceFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_mlschemaModelEvaluations_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *graph.InstanceFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOInstanceFilter2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐInstanceFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_mlschemaModelVersions_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *graph.InstanceFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOInstanceFilter2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐInstanceFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_mlschemaModels_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *graph.InstanceFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOInstanceFilter2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐInstanceFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_mlschemaRegisteredModels_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *graph.InstanceFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOInstanceFilter2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐInstanceFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_mlschemaRuns_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *graph.InstanceFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOInstanceFilter2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐInstanceFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_mlschemaSoftwares_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *graph.InstanceFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOInstanceFilter2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐInstanceFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_mlschemaStudies_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *graph.InstanceFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOInstanceFilter2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐInstanceFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_mlschemaTasks_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *graph.InstanceFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOInstanceFilter2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐInstanceFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_types_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *graph.TypeFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOTypeFilter2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐTypeFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _Artifact_id(ctx context.Context, field graphql.CollectedField, obj *graph.Artifact) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Artifact_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Artifact_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Artifact",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Artifact_typeId(ctx context.Context, field graphql.CollectedField, obj *graph.Artifact) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Artifact_typeId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TypeID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Artifact_typeId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Artifact",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Artifact_uri(ctx context.Context, field graphql.CollectedField, obj *graph.Artifact) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Artifact_uri(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URI, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Artifact_uri(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Artifact",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Artifact_state(ctx context.Context, field graphql.CollectedField, obj *graph.Artifact) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Artifact_state(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.State, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*graph.ArtifactState)
	fc.Result = res
	return ec.marshalOArtifactState2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐArtifactState(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Artifact_state(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Artifact",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ArtifactState does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Artifact_name(ctx context.Context, field graphql.CollectedField, obj *graph.Artifact) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Artifact_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Artifact_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Artifact",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Artifact_externalId(ctx context.Context, field graphql.CollectedField, obj *graph.Artifact) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Artifact_externalId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExternalID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Artifact_externalId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Artifact",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Artifact_createTimeSinceEpoch(ctx context.Context, field graphql.CollectedField, obj *graph.Artifact) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Artifact_createTimeSinceEpoch(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateTimeSinceEpoch, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Artifact_createTimeSinceEpoch(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Artifact",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Artifact_lastUpdateTimeSinceEpoch(ctx context.Context, field graphql.CollectedField, obj *graph.Artifact) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Artifact_lastUpdateTimeSinceEpoch(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastUpdateTimeSinceEpoch, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Artifact_lastUpdateTimeSinceEpoch(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Artifact",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Artifact_type(ctx context.Context, field graphql.CollectedField, obj *graph.Artifact) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Artifact_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Artifact().Type(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*graph.ArtifactType)
	fc.Result = res
	return ec.marshalNArtifactType2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐArtifactType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Artifact_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Artifact",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ArtifactType_id(ctx, field)
			case "name":
				return ec.fieldContext_ArtifactType_name(ctx, field)
			case "version":
				return ec.fieldContext_ArtifactType_version(ctx, field)
			case "typeKind":
				return ec.fieldContext_ArtifactType_typeKind(ctx, field)
			case "description":
				return ec.fieldContext_ArtifactType_description(ctx, field)
			case "externalId":
				return ec.fieldContext_ArtifactType_externalId(ctx, field)
			case "properties":
				return ec.fieldContext_ArtifactType_properties(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ArtifactType", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Artifact_properties(ctx context.Context, field graphql.CollectedField, obj *graph.Artifact) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Artifact_properties(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Properties, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*graph.InstanceProperty)
	fc.Result = res
	return ec.marshalOInstanceProperty2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐInstancePropertyᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Artifact_properties(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Artifact",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_InstanceProperty_name(ctx, field)
			case "isCustomProperty":
				return ec.fieldContext_InstanceProperty_isCustomProperty(ctx, field)
			case "propertyValue":
				return ec.fieldContext_InstanceProperty_propertyValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type InstanceProperty", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Artifact_attributions(ctx context.Context, field graphql.CollectedField, obj *graph.Artifact) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Artifact_attributions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Artifact().Attributions(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*graph.Attribution)
	fc.Result = res
	return ec.marshalOAttribution2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐAttributionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Artifact_attributions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Artifact",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Attribution_id(ctx, field)
			case "contextId":
				return ec.fieldContext_Attribution_contextId(ctx, field)
			case "artifactId":
				return ec.fieldContext_Attribution_artifactId(ctx, field)
			case "context":
				return ec.fieldContext_Attribution_context(ctx, field)
			case "artifact":
				return ec.fieldContext_Attribution_artifact(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Attribution", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Artifact_events(ctx context.Context, field graphql.CollectedField, obj *graph.Artifact) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Artifact_events(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Artifact().Events(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*graph.Event)
	fc.Result = res
	return ec.marshalOEvent2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐEventᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Artifact_events(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Artifact",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Event_id(ctx, field)
			case "artifactId":
				return ec.fieldContext_Event_artifactId(ctx, field)
			case "executionId":
				return ec.fieldContext_Event_executionId(ctx, field)
			case "type":
				return ec.fieldContext_Event_type(ctx, field)
			case "path":
				return ec.fieldContext_Event_path(ctx, field)
			case "millisecondsSinceEpoch":
				return ec.fieldContext_Event_millisecondsSinceEpoch(ctx, field)
			case "artifact":
				return ec.fieldContext_Event_artifact(ctx, field)
			case "execution":
				return ec.fieldContext_Event_execution(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Event", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ArtifactType_id(ctx context.Context, field graphql.CollectedField, obj *graph.ArtifactType) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ArtifactType_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ArtifactType_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ArtifactType",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ArtifactType_name(ctx context.Context, field graphql.CollectedField, obj *graph.ArtifactType) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ArtifactType_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ArtifactType_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ArtifactType",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ArtifactType_version(ctx context.Context, field graphql.CollectedField, obj *graph.ArtifactType) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ArtifactType_version(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Version, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ArtifactType_version(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ArtifactType",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ArtifactType_typeKind(ctx context.Context, field graphql.CollectedField, obj *graph.ArtifactType) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ArtifactType_typeKind(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TypeKind, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(graph.TypeKind)
	fc.Result = res
	return ec.marshalNTypeKind2githubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐTypeKind(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ArtifactType_typeKind(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ArtifactType",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type TypeKind does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ArtifactType_description(ctx context.Context, field graphql.CollectedField, obj *graph.ArtifactType) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ArtifactType_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ArtifactType_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ArtifactType",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ArtifactType_externalId(ctx context.Context, field graphql.CollectedField, obj *graph.ArtifactType) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ArtifactType_externalId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExternalID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ArtifactType_externalId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ArtifactType",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ArtifactType_properties(ctx context.Context, field graphql.CollectedField, obj *graph.ArtifactType) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ArtifactType_properties(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Properties, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*graph.TypeProperty)
	fc.Result = res
	return ec.marshalOTypeProperty2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐTypePropertyᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ArtifactType_properties(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ArtifactType",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_TypeProperty_name(ctx, field)
			case "dataType":
				return ec.fieldContext_TypeProperty_dataType(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TypeProperty", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Association_id(ctx context.Context, field graphql.CollectedField, obj *graph.Association) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Association_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Association_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Association",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Association_contextId(ctx context.Context, field graphql.CollectedField, obj *graph.Association) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Association_contextId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContextID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Association_contextId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Association",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Association_executionId(ctx context.Context, field graphql.CollectedField, obj *graph.Association) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Association_executionId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExecutionID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Association_executionId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Association",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Association_context(ctx context.Context, field graphql.CollectedField, obj *graph.Association) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Association_context(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Association().Context(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(graph.ContextInterface)
	fc.Result = res
	return ec.marshalNContextInterface2githubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐContextInterface(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Association_context(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Association",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("FieldContext.Child cannot be called on type INTERFACE")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Association_execution(ctx context.Context, field graphql.CollectedField, obj *graph.Association) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Association_execution(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Association().Execution(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(graph.ExecutionInterface)
	fc.Result = res
	return ec.marshalNExecutionInterface2githubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐExecutionInterface(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Association_execution(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Association",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("FieldContext.Child cannot be called on type INTERFACE")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Attribution_id(ctx context.Context, field graphql.CollectedField, obj *graph.Attribution) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Attribution_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Attribution_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Attribution",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Attribution_contextId(ctx context.Context, field graphql.CollectedField, obj *graph.Attribution) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Attribution_contextId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContextID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Attribution_contextId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Attribution",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Attribution_artifactId(ctx context.Context, field graphql.CollectedField, obj *graph.Attribution) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Attribution_artifactId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ArtifactID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Attribution_artifactId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Attribution",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Attribution_context(ctx context.Context, field graphql.CollectedField, obj *graph.Attribution) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Attribution_context(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Attribution().Context(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(graph.ContextInterface)
	fc.Result = res
	return ec.marshalNContextInterface2githubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐContextInterface(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Attribution_context(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Attribution",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("FieldContext.Child cannot be called on type INTERFACE")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Attribution_artifact(ctx context.Context, field graphql.CollectedField, obj *graph.Attribution) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Attribution_artifact(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Attribution().Artifact(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(graph.ArtifactInterface)
	fc.Result = res
	return ec.marshalNArtifactInterface2githubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐArtifactInterface(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Attribution_artifact(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Attribution",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("FieldContext.Child cannot be called on type INTERFACE")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BoolValue_value(ctx context.Context, field graphql.CollectedField, obj *graph.BoolValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BoolValue_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BoolValue_value(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BoolValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Context_id(ctx context.Context, field graphql.CollectedField, obj *graph.Context) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Context_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Context_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Context",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Context_typeId(ctx context.Context, field graphql.CollectedField, obj *graph.Context) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Context_typeId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TypeID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Context_typeId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Context",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Context_name(ctx context.Context, field graphql.CollectedField, obj *graph.Context) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Context_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Context_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Context",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Context_externalId(ctx context.Context, field graphql.CollectedField, obj *graph.Context) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Context_externalId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExternalID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Context_externalId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Context",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Context_createTimeSinceEpoch(ctx context.Context, field graphql.CollectedField, obj *graph.Context) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Context_createTimeSinceEpoch(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateTimeSinceEpoch, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Context_createTimeSinceEpoch(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Context",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Context_lastUpdateTimeSinceEpoch(ctx context.Context, field graphql.CollectedField, obj *graph.Context) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Context_lastUpdateTimeSinceEpoch(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastUpdateTimeSinceEpoch, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Context_lastUpdateTimeSinceEpoch(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Context",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Context_type(ctx context.Context, field graphql.CollectedField, obj *graph.Context) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Context_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Context().Type(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*graph.ContextType)
	fc.Result = res
	return ec.marshalNContextType2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐContextType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Context_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Context",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ContextType_id(ctx, field)
			case "name":
				return ec.fieldContext_ContextType_name(ctx, field)
			case "version":
				return ec.fieldContext_ContextType_version(ctx, field)
			case "typeKind":
				return ec.fieldContext_ContextType_typeKind(ctx, field)
			case "description":
				return ec.fieldContext_ContextType_description(ctx, field)
			case "externalId":
				return ec.fieldContext_ContextType_externalId(ctx, field)
			case "properties":
				return ec.fieldContext_ContextType_properties(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ContextType", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Context_properties(ctx context.Context, field graphql.CollectedField, obj *graph.Context) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Context_properties(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Properties, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*graph.InstanceProperty)
	fc.Result = res
	return ec.marshalOInstanceProperty2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐInstancePropertyᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Context_properties(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Context",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_InstanceProperty_name(ctx, field)
			case "isCustomProperty":
				return ec.fieldContext_InstanceProperty_isCustomProperty(ctx, field)
			case "propertyValue":
				return ec.fieldContext_InstanceProperty_propertyValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type InstanceProperty", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Context_parents(ctx context.Context, field graphql.CollectedField, obj *graph.Context) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Context_parents(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Context().Parents(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]graph.ContextInterface)
	fc.Result = res
	return ec.marshalOContextInterface2ᚕgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐContextInterfaceᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Context_parents(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Context",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("FieldContext.Child cannot be called on type INTERFACE")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Context_children(ctx context.Context, field graphql.CollectedField, obj *graph.Context) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Context_children(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Context().Children(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]graph.ContextInterface)
	fc.Result = res
	return ec.marshalOContextInterface2ᚕgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐContextInterfaceᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Context_children(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Context",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("FieldContext.Child cannot be called on type INTERFACE")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Context_attributions(ctx context.Context, field graphql.CollectedField, obj *graph.Context) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Context_attributions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Context().Attributions(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*graph.Attribution)
	fc.Result = res
	return ec.marshalOAttribution2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐAttributionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Context_attributions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Context",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Attribution_id(ctx, field)
			case "contextId":
				return ec.fieldContext_Attribution_contextId(ctx, field)
			case "artifactId":
				return ec.fieldContext_Attribution_artifactId(ctx, field)
			case "context":
				return ec.fieldContext_Attribution_context(ctx, field)
			case "artifact":
				return ec.fieldContext_Attribution_artifact(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Attribution", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Context_associations(ctx context.Context, field graphql.CollectedField, obj *graph.Context) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Context_associations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Context().Associations(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*graph.Association)
	fc.Result = res
	return ec.marshalOAssociation2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐAssociationᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Context_associations(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Context",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Association_id(ctx, field)
			case "contextId":
				return ec.fieldContext_Association_contextId(ctx, field)
			case "executionId":
				return ec.fieldContext_Association_executionId(ctx, field)
			case "context":
				return ec.fieldContext_Association_context(ctx, field)
			case "execution":
				return ec.fieldContext_Association_execution(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Association", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ContextType_id(ctx context.Context, field graphql.CollectedField, obj *graph.ContextType) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ContextType_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ContextType_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ContextType",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ContextType_name(ctx context.Context, field graphql.CollectedField, obj *graph.ContextType) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ContextType_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ContextType_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ContextType",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ContextType_version(ctx context.Context, field graphql.CollectedField, obj *graph.ContextType) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ContextType_version(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Version, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ContextType_version(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ContextType",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ContextType_typeKind(ctx context.Context, field graphql.CollectedField, obj *graph.ContextType) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ContextType_typeKind(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TypeKind, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(graph.TypeKind)
	fc.Result = res
	return ec.marshalNTypeKind2githubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐTypeKind(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ContextType_typeKind(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ContextType",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type TypeKind does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ContextType_description(ctx context.Context, field graphql.CollectedField, obj *graph.ContextType) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ContextType_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ContextType_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ContextType",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ContextType_externalId(ctx context.Context, field graphql.CollectedField, obj *graph.ContextType) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ContextType_externalId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExternalID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ContextType_externalId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ContextType",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ContextType_properties(ctx context.Context, field graphql.CollectedField, obj *graph.ContextType) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ContextType_properties(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Properties, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*graph.TypeProperty)
	fc.Result = res
	return ec.marshalOTypeProperty2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐTypePropertyᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ContextType_properties(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ContextType",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_TypeProperty_name(ctx, field)
			case "dataType":
				return ec.fieldContext_TypeProperty_dataType(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TypeProperty", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DoubleValue_value(ctx context.Context, field graphql.CollectedField, obj *graph.DoubleValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DoubleValue_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DoubleValue_value(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DoubleValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Event_id(ctx context.Context, field graphql.CollectedField, obj *graph.Event) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Event_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Event_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Event",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Event_artifactId(ctx context.Context, field graphql.CollectedField, obj *graph.Event) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Event_artifactId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ArtifactID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Event_artifactId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Event",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Event_executionId(ctx context.Context, field graphql.CollectedField, obj *graph.Event) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Event_executionId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExecutionID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Event_executionId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Event",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Event_type(ctx context.Context, field graphql.CollectedField, obj *graph.Event) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Event_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(graph.EventType)
	fc.Result = res
	return ec.marshalNEventType2githubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐEventType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Event_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Event",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type EventType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Event_path(ctx context.Context, field graphql.CollectedField, obj *graph.Event) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Event_path(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Path, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]graph.EventStep)
	fc.Result = res
	return ec.marshalNEventStep2ᚕgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐEventStepᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Event_path(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Event",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type EventStep does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Event_millisecondsSinceEpoch(ctx context.Context, field graphql.CollectedField, obj *graph.Event) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Event_millisecondsSinceEpoch(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MillisecondsSinceEpoch, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Event_millisecondsSinceEpoch(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Event",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Event_artifact(ctx context.Context, field graphql.CollectedField, obj *graph.Event) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Event_artifact(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Event().Artifact(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(graph.ArtifactInterface)
	fc.Result = res
	return ec.marshalOArtifactInterface2githubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐArtifactInterface(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Event_artifact(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Event",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("FieldContext.Child cannot be called on type INTERFACE")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Event_execution(ctx context.Context, field graphql.CollectedField, obj *graph.Event) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Event_execution(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Event().Execution(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(graph.ExecutionInterface)
	fc.Result = res
	return ec.marshalOExecutionInterface2githubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐExecutionInterface(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Event_execution(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Event",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("FieldContext.Child cannot be called on type INTERFACE")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EventStepIndex_index(ctx context.Context, field graphql.CollectedField, obj *graph.EventStepIndex) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EventStepIndex_index(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Index, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EventStepIndex_index(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EventStepIndex",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EventStepKey_key(ctx context.Context, field graphql.CollectedField, obj *graph.EventStepKey) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EventStepKey_key(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Key, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EventStepKey_key(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EventStepKey",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Execution_id(ctx context.Context, field graphql.CollectedField, obj *graph.Execution) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Execution_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Execution_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Execution",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Execution_typeId(ctx context.Context, field graphql.CollectedField, obj *graph.Execution) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Execution_typeId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TypeID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Execution_typeId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Execution",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Execution_lastKnownState(ctx context.Context, field graphql.CollectedField, obj *graph.Execution) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Execution_lastKnownState(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastKnownState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*graph.ExecutionState)
	fc.Result = res
	return ec.marshalOExecutionState2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐExecutionState(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Execution_lastKnownState(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Execution",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ExecutionState does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Execution_name(ctx context.Context, field graphql.CollectedField, obj *graph.Execution) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Execution_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Execution_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Execution",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Execution_externalId(ctx context.Context, field graphql.CollectedField, obj *graph.Execution) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Execution_externalId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExternalID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Execution_externalId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Execution",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Execution_createTimeSinceEpoch(ctx context.Context, field graphql.CollectedField, obj *graph.Execution) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Execution_createTimeSinceEpoch(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateTimeSinceEpoch, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Execution_createTimeSinceEpoch(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Execution",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Execution_lastUpdateTimeSinceEpoch(ctx context.Context, field graphql.CollectedField, obj *graph.Execution) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Execution_lastUpdateTimeSinceEpoch(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastUpdateTimeSinceEpoch, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Execution_lastUpdateTimeSinceEpoch(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Execution",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Execution_type(ctx context.Context, field graphql.CollectedField, obj *graph.Execution) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Execution_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Execution().Type(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*graph.ExecutionType)
	fc.Result = res
	return ec.marshalNExecutionType2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐExecutionType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Execution_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Execution",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ExecutionType_id(ctx, field)
			case "name":
				return ec.fieldContext_ExecutionType_name(ctx, field)
			case "version":
				return ec.fieldContext_ExecutionType_version(ctx, field)
			case "typeKind":
				return ec.fieldContext_ExecutionType_typeKind(ctx, field)
			case "description":
				return ec.fieldContext_ExecutionType_description(ctx, field)
			case "externalId":
				return ec.fieldContext_ExecutionType_externalId(ctx, field)
			case "inputType":
				return ec.fieldContext_ExecutionType_inputType(ctx, field)
			case "outputType":
				return ec.fieldContext_ExecutionType_outputType(ctx, field)
			case "properties":
				return ec.fieldContext_ExecutionType_properties(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ExecutionType", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Execution_properties(ctx context.Context, field graphql.CollectedField, obj *graph.Execution) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Execution_properties(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Properties, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*graph.InstanceProperty)
	fc.Result = res
	return ec.marshalNInstanceProperty2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐInstancePropertyᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Execution_properties(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Execution",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_InstanceProperty_name(ctx, field)
			case "isCustomProperty":
				return ec.fieldContext_InstanceProperty_isCustomProperty(ctx, field)
			case "propertyValue":
				return ec.fieldContext_InstanceProperty_propertyValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type InstanceProperty", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Execution_associations(ctx context.Context, field graphql.CollectedField, obj *graph.Execution) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Execution_associations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Execution().Associations(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*graph.InstanceProperty)
	fc.Result = res
	return ec.marshalOInstanceProperty2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐInstancePropertyᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Execution_associations(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Execution",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_InstanceProperty_name(ctx, field)
			case "isCustomProperty":
				return ec.fieldContext_InstanceProperty_isCustomProperty(ctx, field)
			case "propertyValue":
				return ec.fieldContext_InstanceProperty_propertyValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type InstanceProperty", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Execution_events(ctx context.Context, field graphql.CollectedField, obj *graph.Execution) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Execution_events(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Execution().Events(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*graph.InstanceProperty)
	fc.Result = res
	return ec.marshalOInstanceProperty2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐInstancePropertyᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Execution_events(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Execution",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_InstanceProperty_name(ctx, field)
			case "isCustomProperty":
				return ec.fieldContext_InstanceProperty_isCustomProperty(ctx, field)
			case "propertyValue":
				return ec.fieldContext_InstanceProperty_propertyValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type InstanceProperty", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExecutionType_id(ctx context.Context, field graphql.CollectedField, obj *graph.ExecutionType) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExecutionType_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExecutionType_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExecutionType",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExecutionType_name(ctx context.Context, field graphql.CollectedField, obj *graph.ExecutionType) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExecutionType_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExecutionType_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExecutionType",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExecutionType_version(ctx context.Context, field graphql.CollectedField, obj *graph.ExecutionType) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExecutionType_version(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Version, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExecutionType_version(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExecutionType",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExecutionType_typeKind(ctx context.Context, field graphql.CollectedField, obj *graph.ExecutionType) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExecutionType_typeKind(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TypeKind, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(graph.TypeKind)
	fc.Result = res
	return ec.marshalNTypeKind2githubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐTypeKind(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExecutionType_typeKind(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExecutionType",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type TypeKind does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExecutionType_description(ctx context.Context, field graphql.CollectedField, obj *graph.ExecutionType) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExecutionType_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExecutionType_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExecutionType",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExecutionType_externalId(ctx context.Context, field graphql.CollectedField, obj *graph.ExecutionType) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExecutionType_externalId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExternalID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExecutionType_externalId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExecutionType",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExecutionType_inputType(ctx context.Context, field graphql.CollectedField, obj *graph.ExecutionType) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExecutionType_inputType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExecutionType_inputType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExecutionType",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExecutionType_outputType(ctx context.Context, field graphql.CollectedField, obj *graph.ExecutionType) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExecutionType_outputType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OutputType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExecutionType_outputType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExecutionType",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExecutionType_properties(ctx context.Context, field graphql.CollectedField, obj *graph.ExecutionType) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExecutionType_properties(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Properties, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*graph.TypeProperty)
	fc.Result = res
	return ec.marshalOTypeProperty2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐTypePropertyᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExecutionType_properties(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExecutionType",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_TypeProperty_name(ctx, field)
			case "dataType":
				return ec.fieldContext_TypeProperty_dataType(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TypeProperty", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _InstanceProperty_name(ctx context.Context, field graphql.CollectedField, obj *graph.InstanceProperty) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_InstanceProperty_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_InstanceProperty_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "InstanceProperty",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _InstanceProperty_isCustomProperty(ctx context.Context, field graphql.CollectedField, obj *graph.InstanceProperty) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_InstanceProperty_isCustomProperty(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsCustomProperty, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_InstanceProperty_isCustomProperty(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "InstanceProperty",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _InstanceProperty_propertyValue(ctx context.Context, field graphql.CollectedField, obj *graph.InstanceProperty) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_InstanceProperty_propertyValue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PropertyValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(graph.Value)
	fc.Result = res
	return ec.marshalNValue2githubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐValue(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_InstanceProperty_propertyValue(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "InstanceProperty",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Value does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _IntValue_value(ctx context.Context, field graphql.CollectedField, obj *graph.IntValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_IntValue_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_IntValue_value(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "IntValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListValue_value(ctx context.Context, field graphql.CollectedField, obj *graph.ListValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListValue_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]graph.StructValueType)
	fc.Result = res
	return ec.marshalOStructValueType2ᚕgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐStructValueTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListValue_value(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type StructValueType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlmdDataset_id(ctx context.Context, field graphql.CollectedField, obj *graph.MlmdDataset) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlmdDataset_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlmdDataset_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlmdDataset",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlmdDataset_typeId(ctx context.Context, field graphql.CollectedField, obj *graph.MlmdDataset) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlmdDataset_typeId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TypeID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlmdDataset_typeId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlmdDataset",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlmdDataset_uri(ctx context.Context, field graphql.CollectedField, obj *graph.MlmdDataset) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlmdDataset_uri(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URI, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlmdDataset_uri(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlmdDataset",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlmdDataset_state(ctx context.Context, field graphql.CollectedField, obj *graph.MlmdDataset) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlmdDataset_state(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.State, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*graph.ArtifactState)
	fc.Result = res
	return ec.marshalOArtifactState2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐArtifactState(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlmdDataset_state(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlmdDataset",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ArtifactState does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlmdDataset_name(ctx context.Context, field graphql.CollectedField, obj *graph.MlmdDataset) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlmdDataset_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlmdDataset_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlmdDataset",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlmdDataset_externalId(ctx context.Context, field graphql.CollectedField, obj *graph.MlmdDataset) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlmdDataset_externalId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExternalID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlmdDataset_externalId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlmdDataset",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlmdDataset_createTimeSinceEpoch(ctx context.Context, field graphql.CollectedField, obj *graph.MlmdDataset) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlmdDataset_createTimeSinceEpoch(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateTimeSinceEpoch, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlmdDataset_createTimeSinceEpoch(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlmdDataset",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlmdDataset_lastUpdateTimeSinceEpoch(ctx context.Context, field graphql.CollectedField, obj *graph.MlmdDataset) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlmdDataset_lastUpdateTimeSinceEpoch(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastUpdateTimeSinceEpoch, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlmdDataset_lastUpdateTimeSinceEpoch(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlmdDataset",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlmdDataset_intProp(ctx context.Context, field graphql.CollectedField, obj *graph.MlmdDataset) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlmdDataset_intProp(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IntProp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt642ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlmdDataset_intProp(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlmdDataset",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlmdDataset_secondProp(ctx context.Context, field graphql.CollectedField, obj *graph.MlmdDataset) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlmdDataset_secondProp(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SecondProp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlmdDataset_secondProp(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlmdDataset",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlmdDataset_type(ctx context.Context, field graphql.CollectedField, obj *graph.MlmdDataset) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlmdDataset_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MlmdDataset().Type(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*graph.ArtifactType)
	fc.Result = res
	return ec.marshalNArtifactType2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐArtifactType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlmdDataset_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlmdDataset",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ArtifactType_id(ctx, field)
			case "name":
				return ec.fieldContext_ArtifactType_name(ctx, field)
			case "version":
				return ec.fieldContext_ArtifactType_version(ctx, field)
			case "typeKind":
				return ec.fieldContext_ArtifactType_typeKind(ctx, field)
			case "description":
				return ec.fieldContext_ArtifactType_description(ctx, field)
			case "externalId":
				return ec.fieldContext_ArtifactType_externalId(ctx, field)
			case "properties":
				return ec.fieldContext_ArtifactType_properties(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ArtifactType", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlmdDataset_properties(ctx context.Context, field graphql.CollectedField, obj *graph.MlmdDataset) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlmdDataset_properties(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Properties, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*graph.InstanceProperty)
	fc.Result = res
	return ec.marshalNInstanceProperty2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐInstancePropertyᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlmdDataset_properties(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlmdDataset",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_InstanceProperty_name(ctx, field)
			case "isCustomProperty":
				return ec.fieldContext_InstanceProperty_isCustomProperty(ctx, field)
			case "propertyValue":
				return ec.fieldContext_InstanceProperty_propertyValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type InstanceProperty", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlmdDataset_attributions(ctx context.Context, field graphql.CollectedField, obj *graph.MlmdDataset) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlmdDataset_attributions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MlmdDataset().Attributions(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*graph.Attribution)
	fc.Result = res
	return ec.marshalOAttribution2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐAttributionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlmdDataset_attributions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlmdDataset",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Attribution_id(ctx, field)
			case "contextId":
				return ec.fieldContext_Attribution_contextId(ctx, field)
			case "artifactId":
				return ec.fieldContext_Attribution_artifactId(ctx, field)
			case "context":
				return ec.fieldContext_Attribution_context(ctx, field)
			case "artifact":
				return ec.fieldContext_Attribution_artifact(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Attribution", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlmdDataset_events(ctx context.Context, field graphql.CollectedField, obj *graph.MlmdDataset) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlmdDataset_events(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MlmdDataset().Events(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*graph.Event)
	fc.Result = res
	return ec.marshalOEvent2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐEventᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlmdDataset_events(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlmdDataset",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Event_id(ctx, field)
			case "artifactId":
				return ec.fieldContext_Event_artifactId(ctx, field)
			case "executionId":
				return ec.fieldContext_Event_executionId(ctx, field)
			case "type":
				return ec.fieldContext_Event_type(ctx, field)
			case "path":
				return ec.fieldContext_Event_path(ctx, field)
			case "millisecondsSinceEpoch":
				return ec.fieldContext_Event_millisecondsSinceEpoch(ctx, field)
			case "artifact":
				return ec.fieldContext_Event_artifact(ctx, field)
			case "execution":
				return ec.fieldContext_Event_execution(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Event", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlmdDeploy_id(ctx context.Context, field graphql.CollectedField, obj *graph.MlmdDeploy) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlmdDeploy_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlmdDeploy_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlmdDeploy",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlmdDeploy_typeId(ctx context.Context, field graphql.CollectedField, obj *graph.MlmdDeploy) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlmdDeploy_typeId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TypeID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlmdDeploy_typeId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlmdDeploy",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlmdDeploy_lastKnownState(ctx context.Context, field graphql.CollectedField, obj *graph.MlmdDeploy) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlmdDeploy_lastKnownState(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastKnownState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*graph.ExecutionState)
	fc.Result = res
	return ec.marshalOExecutionState2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐExecutionState(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlmdDeploy_lastKnownState(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlmdDeploy",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ExecutionState does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlmdDeploy_name(ctx context.Context, field graphql.CollectedField, obj *graph.MlmdDeploy) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlmdDeploy_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlmdDeploy_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlmdDeploy",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlmdDeploy_externalId(ctx context.Context, field graphql.CollectedField, obj *graph.MlmdDeploy) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlmdDeploy_externalId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExternalID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlmdDeploy_externalId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlmdDeploy",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlmdDeploy_createTimeSinceEpoch(ctx context.Context, field graphql.CollectedField, obj *graph.MlmdDeploy) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlmdDeploy_createTimeSinceEpoch(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateTimeSinceEpoch, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlmdDeploy_createTimeSinceEpoch(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlmdDeploy",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlmdDeploy_lastUpdateTimeSinceEpoch(ctx context.Context, field graphql.CollectedField, obj *graph.MlmdDeploy) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlmdDeploy_lastUpdateTimeSinceEpoch(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastUpdateTimeSinceEpoch, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlmdDeploy_lastUpdateTimeSinceEpoch(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlmdDeploy",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlmdDeploy_type(ctx context.Context, field graphql.CollectedField, obj *graph.MlmdDeploy) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlmdDeploy_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MlmdDeploy().Type(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*graph.ExecutionType)
	fc.Result = res
	return ec.marshalNExecutionType2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐExecutionType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlmdDeploy_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlmdDeploy",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ExecutionType_id(ctx, field)
			case "name":
				return ec.fieldContext_ExecutionType_name(ctx, field)
			case "version":
				return ec.fieldContext_ExecutionType_version(ctx, field)
			case "typeKind":
				return ec.fieldContext_ExecutionType_typeKind(ctx, field)
			case "description":
				return ec.fieldContext_ExecutionType_description(ctx, field)
			case "externalId":
				return ec.fieldContext_ExecutionType_externalId(ctx, field)
			case "inputType":
				return ec.fieldContext_ExecutionType_inputType(ctx, field)
			case "outputType":
				return ec.fieldContext_ExecutionType_outputType(ctx, field)
			case "properties":
				return ec.fieldContext_ExecutionType_properties(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ExecutionType", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlmdDeploy_properties(ctx context.Context, field graphql.CollectedField, obj *graph.MlmdDeploy) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlmdDeploy_properties(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Properties, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*graph.InstanceProperty)
	fc.Result = res
	return ec.marshalNInstanceProperty2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐInstancePropertyᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlmdDeploy_properties(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlmdDeploy",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_InstanceProperty_name(ctx, field)
			case "isCustomProperty":
				return ec.fieldContext_InstanceProperty_isCustomProperty(ctx, field)
			case "propertyValue":
				return ec.fieldContext_InstanceProperty_propertyValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type InstanceProperty", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlmdDeploy_associations(ctx context.Context, field graphql.CollectedField, obj *graph.MlmdDeploy) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlmdDeploy_associations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MlmdDeploy().Associations(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*graph.Association)
	fc.Result = res
	return ec.marshalOAssociation2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐAssociationᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlmdDeploy_associations(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlmdDeploy",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Association_id(ctx, field)
			case "contextId":
				return ec.fieldContext_Association_contextId(ctx, field)
			case "executionId":
				return ec.fieldContext_Association_executionId(ctx, field)
			case "context":
				return ec.fieldContext_Association_context(ctx, field)
			case "execution":
				return ec.fieldContext_Association_execution(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Association", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlmdDeploy_events(ctx context.Context, field graphql.CollectedField, obj *graph.MlmdDeploy) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlmdDeploy_events(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MlmdDeploy().Events(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*graph.Event)
	fc.Result = res
	return ec.marshalOEvent2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐEventᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlmdDeploy_events(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlmdDeploy",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Event_id(ctx, field)
			case "artifactId":
				return ec.fieldContext_Event_artifactId(ctx, field)
			case "executionId":
				return ec.fieldContext_Event_executionId(ctx, field)
			case "type":
				return ec.fieldContext_Event_type(ctx, field)
			case "path":
				return ec.fieldContext_Event_path(ctx, field)
			case "millisecondsSinceEpoch":
				return ec.fieldContext_Event_millisecondsSinceEpoch(ctx, field)
			case "artifact":
				return ec.fieldContext_Event_artifact(ctx, field)
			case "execution":
				return ec.fieldContext_Event_execution(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Event", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlmdEvaluate_id(ctx context.Context, field graphql.CollectedField, obj *graph.MlmdEvaluate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlmdEvaluate_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlmdEvaluate_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlmdEvaluate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlmdEvaluate_typeId(ctx context.Context, field graphql.CollectedField, obj *graph.MlmdEvaluate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlmdEvaluate_typeId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TypeID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlmdEvaluate_typeId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlmdEvaluate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlmdEvaluate_lastKnownState(ctx context.Context, field graphql.CollectedField, obj *graph.MlmdEvaluate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlmdEvaluate_lastKnownState(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastKnownState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*graph.ExecutionState)
	fc.Result = res
	return ec.marshalOExecutionState2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐExecutionState(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlmdEvaluate_lastKnownState(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlmdEvaluate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ExecutionState does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlmdEvaluate_name(ctx context.Context, field graphql.CollectedField, obj *graph.MlmdEvaluate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlmdEvaluate_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlmdEvaluate_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlmdEvaluate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlmdEvaluate_externalId(ctx context.Context, field graphql.CollectedField, obj *graph.MlmdEvaluate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlmdEvaluate_externalId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExternalID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlmdEvaluate_externalId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlmdEvaluate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlmdEvaluate_createTimeSinceEpoch(ctx context.Context, field graphql.CollectedField, obj *graph.MlmdEvaluate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlmdEvaluate_createTimeSinceEpoch(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateTimeSinceEpoch, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlmdEvaluate_createTimeSinceEpoch(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlmdEvaluate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlmdEvaluate_lastUpdateTimeSinceEpoch(ctx context.Context, field graphql.CollectedField, obj *graph.MlmdEvaluate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlmdEvaluate_lastUpdateTimeSinceEpoch(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastUpdateTimeSinceEpoch, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlmdEvaluate_lastUpdateTimeSinceEpoch(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlmdEvaluate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlmdEvaluate_type(ctx context.Context, field graphql.CollectedField, obj *graph.MlmdEvaluate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlmdEvaluate_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MlmdEvaluate().Type(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*graph.ExecutionType)
	fc.Result = res
	return ec.marshalNExecutionType2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐExecutionType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlmdEvaluate_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlmdEvaluate",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ExecutionType_id(ctx, field)
			case "name":
				return ec.fieldContext_ExecutionType_name(ctx, field)
			case "version":
				return ec.fieldContext_ExecutionType_version(ctx, field)
			case "typeKind":
				return ec.fieldContext_ExecutionType_typeKind(ctx, field)
			case "description":
				return ec.fieldContext_ExecutionType_description(ctx, field)
			case "externalId":
				return ec.fieldContext_ExecutionType_externalId(ctx, field)
			case "inputType":
				return ec.fieldContext_ExecutionType_inputType(ctx, field)
			case "outputType":
				return ec.fieldContext_ExecutionType_outputType(ctx, field)
			case "properties":
				return ec.fieldContext_ExecutionType_properties(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ExecutionType", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlmdEvaluate_properties(ctx context.Context, field graphql.CollectedField, obj *graph.MlmdEvaluate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlmdEvaluate_properties(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Properties, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*graph.InstanceProperty)
	fc.Result = res
	return ec.marshalNInstanceProperty2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐInstancePropertyᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlmdEvaluate_properties(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlmdEvaluate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_InstanceProperty_name(ctx, field)
			case "isCustomProperty":
				return ec.fieldContext_InstanceProperty_isCustomProperty(ctx, field)
			case "propertyValue":
				return ec.fieldContext_InstanceProperty_propertyValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type InstanceProperty", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlmdEvaluate_associations(ctx context.Context, field graphql.CollectedField, obj *graph.MlmdEvaluate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlmdEvaluate_associations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MlmdEvaluate().Associations(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*graph.Association)
	fc.Result = res
	return ec.marshalOAssociation2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐAssociationᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlmdEvaluate_associations(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlmdEvaluate",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Association_id(ctx, field)
			case "contextId":
				return ec.fieldContext_Association_contextId(ctx, field)
			case "executionId":
				return ec.fieldContext_Association_executionId(ctx, field)
			case "context":
				return ec.fieldContext_Association_context(ctx, field)
			case "execution":
				return ec.fieldContext_Association_execution(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Association", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlmdEvaluate_events(ctx context.Context, field graphql.CollectedField, obj *graph.MlmdEvaluate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlmdEvaluate_events(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MlmdEvaluate().Events(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*graph.Event)
	fc.Result = res
	return ec.marshalOEvent2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐEventᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlmdEvaluate_events(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlmdEvaluate",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Event_id(ctx, field)
			case "artifactId":
				return ec.fieldContext_Event_artifactId(ctx, field)
			case "executionId":
				return ec.fieldContext_Event_executionId(ctx, field)
			case "type":
				return ec.fieldContext_Event_type(ctx, field)
			case "path":
				return ec.fieldContext_Event_path(ctx, field)
			case "millisecondsSinceEpoch":
				return ec.fieldContext_Event_millisecondsSinceEpoch(ctx, field)
			case "artifact":
				return ec.fieldContext_Event_artifact(ctx, field)
			case "execution":
				return ec.fieldContext_Event_execution(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Event", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlmdMetrics_id(ctx context.Context, field graphql.CollectedField, obj *graph.MlmdMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlmdMetrics_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlmdMetrics_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlmdMetrics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlmdMetrics_typeId(ctx context.Context, field graphql.CollectedField, obj *graph.MlmdMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlmdMetrics_typeId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TypeID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlmdMetrics_typeId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlmdMetrics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlmdMetrics_uri(ctx context.Context, field graphql.CollectedField, obj *graph.MlmdMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlmdMetrics_uri(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URI, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlmdMetrics_uri(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlmdMetrics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlmdMetrics_state(ctx context.Context, field graphql.CollectedField, obj *graph.MlmdMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlmdMetrics_state(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.State, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*graph.ArtifactState)
	fc.Result = res
	return ec.marshalOArtifactState2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐArtifactState(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlmdMetrics_state(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlmdMetrics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ArtifactState does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlmdMetrics_name(ctx context.Context, field graphql.CollectedField, obj *graph.MlmdMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlmdMetrics_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlmdMetrics_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlmdMetrics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlmdMetrics_externalId(ctx context.Context, field graphql.CollectedField, obj *graph.MlmdMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlmdMetrics_externalId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExternalID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlmdMetrics_externalId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlmdMetrics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlmdMetrics_createTimeSinceEpoch(ctx context.Context, field graphql.CollectedField, obj *graph.MlmdMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlmdMetrics_createTimeSinceEpoch(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateTimeSinceEpoch, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlmdMetrics_createTimeSinceEpoch(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlmdMetrics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlmdMetrics_lastUpdateTimeSinceEpoch(ctx context.Context, field graphql.CollectedField, obj *graph.MlmdMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlmdMetrics_lastUpdateTimeSinceEpoch(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastUpdateTimeSinceEpoch, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlmdMetrics_lastUpdateTimeSinceEpoch(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlmdMetrics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlmdMetrics_stringProp(ctx context.Context, field graphql.CollectedField, obj *graph.MlmdMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlmdMetrics_stringProp(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StringProp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlmdMetrics_stringProp(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlmdMetrics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlmdMetrics_type(ctx context.Context, field graphql.CollectedField, obj *graph.MlmdMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlmdMetrics_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MlmdMetrics().Type(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*graph.ArtifactType)
	fc.Result = res
	return ec.marshalNArtifactType2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐArtifactType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlmdMetrics_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlmdMetrics",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ArtifactType_id(ctx, field)
			case "name":
				return ec.fieldContext_ArtifactType_name(ctx, field)
			case "version":
				return ec.fieldContext_ArtifactType_version(ctx, field)
			case "typeKind":
				return ec.fieldContext_ArtifactType_typeKind(ctx, field)
			case "description":
				return ec.fieldContext_ArtifactType_description(ctx, field)
			case "externalId":
				return ec.fieldContext_ArtifactType_externalId(ctx, field)
			case "properties":
				return ec.fieldContext_ArtifactType_properties(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ArtifactType", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlmdMetrics_properties(ctx context.Context, field graphql.CollectedField, obj *graph.MlmdMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlmdMetrics_properties(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Properties, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*graph.InstanceProperty)
	fc.Result = res
	return ec.marshalNInstanceProperty2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐInstancePropertyᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlmdMetrics_properties(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlmdMetrics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_InstanceProperty_name(ctx, field)
			case "isCustomProperty":
				return ec.fieldContext_InstanceProperty_isCustomProperty(ctx, field)
			case "propertyValue":
				return ec.fieldContext_InstanceProperty_propertyValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type InstanceProperty", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlmdMetrics_attributions(ctx context.Context, field graphql.CollectedField, obj *graph.MlmdMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlmdMetrics_attributions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MlmdMetrics().Attributions(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*graph.Attribution)
	fc.Result = res
	return ec.marshalOAttribution2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐAttributionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlmdMetrics_attributions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlmdMetrics",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Attribution_id(ctx, field)
			case "contextId":
				return ec.fieldContext_Attribution_contextId(ctx, field)
			case "artifactId":
				return ec.fieldContext_Attribution_artifactId(ctx, field)
			case "context":
				return ec.fieldContext_Attribution_context(ctx, field)
			case "artifact":
				return ec.fieldContext_Attribution_artifact(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Attribution", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlmdMetrics_events(ctx context.Context, field graphql.CollectedField, obj *graph.MlmdMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlmdMetrics_events(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MlmdMetrics().Events(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*graph.Event)
	fc.Result = res
	return ec.marshalOEvent2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐEventᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlmdMetrics_events(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlmdMetrics",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Event_id(ctx, field)
			case "artifactId":
				return ec.fieldContext_Event_artifactId(ctx, field)
			case "executionId":
				return ec.fieldContext_Event_executionId(ctx, field)
			case "type":
				return ec.fieldContext_Event_type(ctx, field)
			case "path":
				return ec.fieldContext_Event_path(ctx, field)
			case "millisecondsSinceEpoch":
				return ec.fieldContext_Event_millisecondsSinceEpoch(ctx, field)
			case "artifact":
				return ec.fieldContext_Event_artifact(ctx, field)
			case "execution":
				return ec.fieldContext_Event_execution(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Event", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlmdModel_id(ctx context.Context, field graphql.CollectedField, obj *graph.MlmdModel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlmdModel_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlmdModel_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlmdModel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlmdModel_typeId(ctx context.Context, field graphql.CollectedField, obj *graph.MlmdModel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlmdModel_typeId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TypeID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlmdModel_typeId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlmdModel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlmdModel_uri(ctx context.Context, field graphql.CollectedField, obj *graph.MlmdModel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlmdModel_uri(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URI, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlmdModel_uri(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlmdModel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlmdModel_state(ctx context.Context, field graphql.CollectedField, obj *graph.MlmdModel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlmdModel_state(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.State, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*graph.ArtifactState)
	fc.Result = res
	return ec.marshalOArtifactState2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐArtifactState(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlmdModel_state(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlmdModel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ArtifactState does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlmdModel_name(ctx context.Context, field graphql.CollectedField, obj *graph.MlmdModel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlmdModel_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlmdModel_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlmdModel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlmdModel_externalId(ctx context.Context, field graphql.CollectedField, obj *graph.MlmdModel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlmdModel_externalId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExternalID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlmdModel_externalId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlmdModel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlmdModel_createTimeSinceEpoch(ctx context.Context, field graphql.CollectedField, obj *graph.MlmdModel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlmdModel_createTimeSinceEpoch(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateTimeSinceEpoch, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlmdModel_createTimeSinceEpoch(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlmdModel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlmdModel_lastUpdateTimeSinceEpoch(ctx context.Context, field graphql.CollectedField, obj *graph.MlmdModel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlmdModel_lastUpdateTimeSinceEpoch(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastUpdateTimeSinceEpoch, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlmdModel_lastUpdateTimeSinceEpoch(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlmdModel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlmdModel_doubleProp(ctx context.Context, field graphql.CollectedField, obj *graph.MlmdModel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlmdModel_doubleProp(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DoubleProp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlmdModel_doubleProp(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlmdModel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlmdModel_type(ctx context.Context, field graphql.CollectedField, obj *graph.MlmdModel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlmdModel_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MlmdModel().Type(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*graph.ArtifactType)
	fc.Result = res
	return ec.marshalNArtifactType2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐArtifactType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlmdModel_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlmdModel",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ArtifactType_id(ctx, field)
			case "name":
				return ec.fieldContext_ArtifactType_name(ctx, field)
			case "version":
				return ec.fieldContext_ArtifactType_version(ctx, field)
			case "typeKind":
				return ec.fieldContext_ArtifactType_typeKind(ctx, field)
			case "description":
				return ec.fieldContext_ArtifactType_description(ctx, field)
			case "externalId":
				return ec.fieldContext_ArtifactType_externalId(ctx, field)
			case "properties":
				return ec.fieldContext_ArtifactType_properties(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ArtifactType", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlmdModel_properties(ctx context.Context, field graphql.CollectedField, obj *graph.MlmdModel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlmdModel_properties(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Properties, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*graph.InstanceProperty)
	fc.Result = res
	return ec.marshalNInstanceProperty2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐInstancePropertyᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlmdModel_properties(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlmdModel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_InstanceProperty_name(ctx, field)
			case "isCustomProperty":
				return ec.fieldContext_InstanceProperty_isCustomProperty(ctx, field)
			case "propertyValue":
				return ec.fieldContext_InstanceProperty_propertyValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type InstanceProperty", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlmdModel_attributions(ctx context.Context, field graphql.CollectedField, obj *graph.MlmdModel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlmdModel_attributions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MlmdModel().Attributions(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*graph.Attribution)
	fc.Result = res
	return ec.marshalOAttribution2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐAttributionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlmdModel_attributions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlmdModel",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Attribution_id(ctx, field)
			case "contextId":
				return ec.fieldContext_Attribution_contextId(ctx, field)
			case "artifactId":
				return ec.fieldContext_Attribution_artifactId(ctx, field)
			case "context":
				return ec.fieldContext_Attribution_context(ctx, field)
			case "artifact":
				return ec.fieldContext_Attribution_artifact(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Attribution", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlmdModel_events(ctx context.Context, field graphql.CollectedField, obj *graph.MlmdModel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlmdModel_events(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MlmdModel().Events(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*graph.Event)
	fc.Result = res
	return ec.marshalOEvent2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐEventᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlmdModel_events(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlmdModel",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Event_id(ctx, field)
			case "artifactId":
				return ec.fieldContext_Event_artifactId(ctx, field)
			case "executionId":
				return ec.fieldContext_Event_executionId(ctx, field)
			case "type":
				return ec.fieldContext_Event_type(ctx, field)
			case "path":
				return ec.fieldContext_Event_path(ctx, field)
			case "millisecondsSinceEpoch":
				return ec.fieldContext_Event_millisecondsSinceEpoch(ctx, field)
			case "artifact":
				return ec.fieldContext_Event_artifact(ctx, field)
			case "execution":
				return ec.fieldContext_Event_execution(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Event", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlmdProcess_id(ctx context.Context, field graphql.CollectedField, obj *graph.MlmdProcess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlmdProcess_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlmdProcess_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlmdProcess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlmdProcess_typeId(ctx context.Context, field graphql.CollectedField, obj *graph.MlmdProcess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlmdProcess_typeId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TypeID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlmdProcess_typeId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlmdProcess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlmdProcess_lastKnownState(ctx context.Context, field graphql.CollectedField, obj *graph.MlmdProcess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlmdProcess_lastKnownState(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastKnownState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*graph.ExecutionState)
	fc.Result = res
	return ec.marshalOExecutionState2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐExecutionState(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlmdProcess_lastKnownState(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlmdProcess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ExecutionState does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlmdProcess_name(ctx context.Context, field graphql.CollectedField, obj *graph.MlmdProcess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlmdProcess_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlmdProcess_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlmdProcess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlmdProcess_externalId(ctx context.Context, field graphql.CollectedField, obj *graph.MlmdProcess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlmdProcess_externalId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExternalID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlmdProcess_externalId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlmdProcess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlmdProcess_createTimeSinceEpoch(ctx context.Context, field graphql.CollectedField, obj *graph.MlmdProcess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlmdProcess_createTimeSinceEpoch(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateTimeSinceEpoch, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlmdProcess_createTimeSinceEpoch(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlmdProcess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlmdProcess_lastUpdateTimeSinceEpoch(ctx context.Context, field graphql.CollectedField, obj *graph.MlmdProcess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlmdProcess_lastUpdateTimeSinceEpoch(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastUpdateTimeSinceEpoch, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlmdProcess_lastUpdateTimeSinceEpoch(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlmdProcess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlmdProcess_type(ctx context.Context, field graphql.CollectedField, obj *graph.MlmdProcess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlmdProcess_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MlmdProcess().Type(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*graph.ExecutionType)
	fc.Result = res
	return ec.marshalNExecutionType2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐExecutionType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlmdProcess_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlmdProcess",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ExecutionType_id(ctx, field)
			case "name":
				return ec.fieldContext_ExecutionType_name(ctx, field)
			case "version":
				return ec.fieldContext_ExecutionType_version(ctx, field)
			case "typeKind":
				return ec.fieldContext_ExecutionType_typeKind(ctx, field)
			case "description":
				return ec.fieldContext_ExecutionType_description(ctx, field)
			case "externalId":
				return ec.fieldContext_ExecutionType_externalId(ctx, field)
			case "inputType":
				return ec.fieldContext_ExecutionType_inputType(ctx, field)
			case "outputType":
				return ec.fieldContext_ExecutionType_outputType(ctx, field)
			case "properties":
				return ec.fieldContext_ExecutionType_properties(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ExecutionType", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlmdProcess_properties(ctx context.Context, field graphql.CollectedField, obj *graph.MlmdProcess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlmdProcess_properties(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Properties, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*graph.InstanceProperty)
	fc.Result = res
	return ec.marshalNInstanceProperty2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐInstancePropertyᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlmdProcess_properties(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlmdProcess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_InstanceProperty_name(ctx, field)
			case "isCustomProperty":
				return ec.fieldContext_InstanceProperty_isCustomProperty(ctx, field)
			case "propertyValue":
				return ec.fieldContext_InstanceProperty_propertyValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type InstanceProperty", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlmdProcess_associations(ctx context.Context, field graphql.CollectedField, obj *graph.MlmdProcess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlmdProcess_associations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MlmdProcess().Associations(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*graph.Association)
	fc.Result = res
	return ec.marshalOAssociation2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐAssociationᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlmdProcess_associations(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlmdProcess",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Association_id(ctx, field)
			case "contextId":
				return ec.fieldContext_Association_contextId(ctx, field)
			case "executionId":
				return ec.fieldContext_Association_executionId(ctx, field)
			case "context":
				return ec.fieldContext_Association_context(ctx, field)
			case "execution":
				return ec.fieldContext_Association_execution(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Association", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlmdProcess_events(ctx context.Context, field graphql.CollectedField, obj *graph.MlmdProcess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlmdProcess_events(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MlmdProcess().Events(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*graph.Event)
	fc.Result = res
	return ec.marshalOEvent2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐEventᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlmdProcess_events(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlmdProcess",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Event_id(ctx, field)
			case "artifactId":
				return ec.fieldContext_Event_artifactId(ctx, field)
			case "executionId":
				return ec.fieldContext_Event_executionId(ctx, field)
			case "type":
				return ec.fieldContext_Event_type(ctx, field)
			case "path":
				return ec.fieldContext_Event_path(ctx, field)
			case "millisecondsSinceEpoch":
				return ec.fieldContext_Event_millisecondsSinceEpoch(ctx, field)
			case "artifact":
				return ec.fieldContext_Event_artifact(ctx, field)
			case "execution":
				return ec.fieldContext_Event_execution(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Event", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlmdStatistics_id(ctx context.Context, field graphql.CollectedField, obj *graph.MlmdStatistics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlmdStatistics_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlmdStatistics_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlmdStatistics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlmdStatistics_typeId(ctx context.Context, field graphql.CollectedField, obj *graph.MlmdStatistics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlmdStatistics_typeId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TypeID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlmdStatistics_typeId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlmdStatistics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlmdStatistics_uri(ctx context.Context, field graphql.CollectedField, obj *graph.MlmdStatistics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlmdStatistics_uri(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URI, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlmdStatistics_uri(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlmdStatistics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlmdStatistics_state(ctx context.Context, field graphql.CollectedField, obj *graph.MlmdStatistics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlmdStatistics_state(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.State, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*graph.ArtifactState)
	fc.Result = res
	return ec.marshalOArtifactState2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐArtifactState(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlmdStatistics_state(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlmdStatistics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ArtifactState does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlmdStatistics_name(ctx context.Context, field graphql.CollectedField, obj *graph.MlmdStatistics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlmdStatistics_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlmdStatistics_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlmdStatistics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlmdStatistics_externalId(ctx context.Context, field graphql.CollectedField, obj *graph.MlmdStatistics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlmdStatistics_externalId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExternalID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlmdStatistics_externalId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlmdStatistics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlmdStatistics_createTimeSinceEpoch(ctx context.Context, field graphql.CollectedField, obj *graph.MlmdStatistics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlmdStatistics_createTimeSinceEpoch(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateTimeSinceEpoch, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlmdStatistics_createTimeSinceEpoch(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlmdStatistics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlmdStatistics_lastUpdateTimeSinceEpoch(ctx context.Context, field graphql.CollectedField, obj *graph.MlmdStatistics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlmdStatistics_lastUpdateTimeSinceEpoch(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastUpdateTimeSinceEpoch, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlmdStatistics_lastUpdateTimeSinceEpoch(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlmdStatistics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlmdStatistics_structProp(ctx context.Context, field graphql.CollectedField, obj *graph.MlmdStatistics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlmdStatistics_structProp(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StructProp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*graph.StructTuple)
	fc.Result = res
	return ec.marshalOStructTuple2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐStructTupleᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlmdStatistics_structProp(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlmdStatistics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "key":
				return ec.fieldContext_StructTuple_key(ctx, field)
			case "value":
				return ec.fieldContext_StructTuple_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type StructTuple", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlmdStatistics_type(ctx context.Context, field graphql.CollectedField, obj *graph.MlmdStatistics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlmdStatistics_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MlmdStatistics().Type(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*graph.ArtifactType)
	fc.Result = res
	return ec.marshalNArtifactType2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐArtifactType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlmdStatistics_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlmdStatistics",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ArtifactType_id(ctx, field)
			case "name":
				return ec.fieldContext_ArtifactType_name(ctx, field)
			case "version":
				return ec.fieldContext_ArtifactType_version(ctx, field)
			case "typeKind":
				return ec.fieldContext_ArtifactType_typeKind(ctx, field)
			case "description":
				return ec.fieldContext_ArtifactType_description(ctx, field)
			case "externalId":
				return ec.fieldContext_ArtifactType_externalId(ctx, field)
			case "properties":
				return ec.fieldContext_ArtifactType_properties(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ArtifactType", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlmdStatistics_properties(ctx context.Context, field graphql.CollectedField, obj *graph.MlmdStatistics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlmdStatistics_properties(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Properties, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*graph.InstanceProperty)
	fc.Result = res
	return ec.marshalNInstanceProperty2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐInstancePropertyᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlmdStatistics_properties(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlmdStatistics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_InstanceProperty_name(ctx, field)
			case "isCustomProperty":
				return ec.fieldContext_InstanceProperty_isCustomProperty(ctx, field)
			case "propertyValue":
				return ec.fieldContext_InstanceProperty_propertyValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type InstanceProperty", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlmdStatistics_attributions(ctx context.Context, field graphql.CollectedField, obj *graph.MlmdStatistics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlmdStatistics_attributions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MlmdStatistics().Attributions(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*graph.Attribution)
	fc.Result = res
	return ec.marshalOAttribution2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐAttributionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlmdStatistics_attributions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlmdStatistics",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Attribution_id(ctx, field)
			case "contextId":
				return ec.fieldContext_Attribution_contextId(ctx, field)
			case "artifactId":
				return ec.fieldContext_Attribution_artifactId(ctx, field)
			case "context":
				return ec.fieldContext_Attribution_context(ctx, field)
			case "artifact":
				return ec.fieldContext_Attribution_artifact(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Attribution", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlmdStatistics_events(ctx context.Context, field graphql.CollectedField, obj *graph.MlmdStatistics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlmdStatistics_events(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MlmdStatistics().Events(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*graph.Event)
	fc.Result = res
	return ec.marshalOEvent2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐEventᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlmdStatistics_events(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlmdStatistics",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Event_id(ctx, field)
			case "artifactId":
				return ec.fieldContext_Event_artifactId(ctx, field)
			case "executionId":
				return ec.fieldContext_Event_executionId(ctx, field)
			case "type":
				return ec.fieldContext_Event_type(ctx, field)
			case "path":
				return ec.fieldContext_Event_path(ctx, field)
			case "millisecondsSinceEpoch":
				return ec.fieldContext_Event_millisecondsSinceEpoch(ctx, field)
			case "artifact":
				return ec.fieldContext_Event_artifact(ctx, field)
			case "execution":
				return ec.fieldContext_Event_execution(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Event", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlmdTrain_id(ctx context.Context, field graphql.CollectedField, obj *graph.MlmdTrain) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlmdTrain_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlmdTrain_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlmdTrain",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlmdTrain_typeId(ctx context.Context, field graphql.CollectedField, obj *graph.MlmdTrain) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlmdTrain_typeId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TypeID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlmdTrain_typeId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlmdTrain",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlmdTrain_lastKnownState(ctx context.Context, field graphql.CollectedField, obj *graph.MlmdTrain) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlmdTrain_lastKnownState(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastKnownState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*graph.ExecutionState)
	fc.Result = res
	return ec.marshalOExecutionState2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐExecutionState(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlmdTrain_lastKnownState(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlmdTrain",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ExecutionState does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlmdTrain_name(ctx context.Context, field graphql.CollectedField, obj *graph.MlmdTrain) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlmdTrain_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlmdTrain_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlmdTrain",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlmdTrain_externalId(ctx context.Context, field graphql.CollectedField, obj *graph.MlmdTrain) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlmdTrain_externalId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExternalID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlmdTrain_externalId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlmdTrain",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlmdTrain_createTimeSinceEpoch(ctx context.Context, field graphql.CollectedField, obj *graph.MlmdTrain) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlmdTrain_createTimeSinceEpoch(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateTimeSinceEpoch, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlmdTrain_createTimeSinceEpoch(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlmdTrain",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlmdTrain_lastUpdateTimeSinceEpoch(ctx context.Context, field graphql.CollectedField, obj *graph.MlmdTrain) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlmdTrain_lastUpdateTimeSinceEpoch(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastUpdateTimeSinceEpoch, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlmdTrain_lastUpdateTimeSinceEpoch(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlmdTrain",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlmdTrain_protoProp(ctx context.Context, field graphql.CollectedField, obj *graph.MlmdTrain) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlmdTrain_protoProp(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProtoProp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*graph.ProtoTypeValue)
	fc.Result = res
	return ec.marshalOProtoTypeValue2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐProtoTypeValue(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlmdTrain_protoProp(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlmdTrain",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "typeUrl":
				return ec.fieldContext_ProtoTypeValue_typeUrl(ctx, field)
			case "value":
				return ec.fieldContext_ProtoTypeValue_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProtoTypeValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlmdTrain_type(ctx context.Context, field graphql.CollectedField, obj *graph.MlmdTrain) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlmdTrain_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MlmdTrain().Type(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*graph.ExecutionType)
	fc.Result = res
	return ec.marshalNExecutionType2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐExecutionType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlmdTrain_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlmdTrain",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ExecutionType_id(ctx, field)
			case "name":
				return ec.fieldContext_ExecutionType_name(ctx, field)
			case "version":
				return ec.fieldContext_ExecutionType_version(ctx, field)
			case "typeKind":
				return ec.fieldContext_ExecutionType_typeKind(ctx, field)
			case "description":
				return ec.fieldContext_ExecutionType_description(ctx, field)
			case "externalId":
				return ec.fieldContext_ExecutionType_externalId(ctx, field)
			case "inputType":
				return ec.fieldContext_ExecutionType_inputType(ctx, field)
			case "outputType":
				return ec.fieldContext_ExecutionType_outputType(ctx, field)
			case "properties":
				return ec.fieldContext_ExecutionType_properties(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ExecutionType", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlmdTrain_properties(ctx context.Context, field graphql.CollectedField, obj *graph.MlmdTrain) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlmdTrain_properties(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Properties, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*graph.InstanceProperty)
	fc.Result = res
	return ec.marshalNInstanceProperty2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐInstancePropertyᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlmdTrain_properties(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlmdTrain",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_InstanceProperty_name(ctx, field)
			case "isCustomProperty":
				return ec.fieldContext_InstanceProperty_isCustomProperty(ctx, field)
			case "propertyValue":
				return ec.fieldContext_InstanceProperty_propertyValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type InstanceProperty", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlmdTrain_associations(ctx context.Context, field graphql.CollectedField, obj *graph.MlmdTrain) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlmdTrain_associations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MlmdTrain().Associations(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*graph.Association)
	fc.Result = res
	return ec.marshalOAssociation2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐAssociationᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlmdTrain_associations(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlmdTrain",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Association_id(ctx, field)
			case "contextId":
				return ec.fieldContext_Association_contextId(ctx, field)
			case "executionId":
				return ec.fieldContext_Association_executionId(ctx, field)
			case "context":
				return ec.fieldContext_Association_context(ctx, field)
			case "execution":
				return ec.fieldContext_Association_execution(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Association", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlmdTrain_events(ctx context.Context, field graphql.CollectedField, obj *graph.MlmdTrain) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlmdTrain_events(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MlmdTrain().Events(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*graph.Event)
	fc.Result = res
	return ec.marshalOEvent2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐEventᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlmdTrain_events(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlmdTrain",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Event_id(ctx, field)
			case "artifactId":
				return ec.fieldContext_Event_artifactId(ctx, field)
			case "executionId":
				return ec.fieldContext_Event_executionId(ctx, field)
			case "type":
				return ec.fieldContext_Event_type(ctx, field)
			case "path":
				return ec.fieldContext_Event_path(ctx, field)
			case "millisecondsSinceEpoch":
				return ec.fieldContext_Event_millisecondsSinceEpoch(ctx, field)
			case "artifact":
				return ec.fieldContext_Event_artifact(ctx, field)
			case "execution":
				return ec.fieldContext_Event_execution(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Event", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlmdTransform_id(ctx context.Context, field graphql.CollectedField, obj *graph.MlmdTransform) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlmdTransform_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlmdTransform_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlmdTransform",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlmdTransform_typeId(ctx context.Context, field graphql.CollectedField, obj *graph.MlmdTransform) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlmdTransform_typeId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TypeID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlmdTransform_typeId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlmdTransform",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlmdTransform_lastKnownState(ctx context.Context, field graphql.CollectedField, obj *graph.MlmdTransform) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlmdTransform_lastKnownState(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastKnownState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*graph.ExecutionState)
	fc.Result = res
	return ec.marshalOExecutionState2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐExecutionState(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlmdTransform_lastKnownState(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlmdTransform",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ExecutionState does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlmdTransform_name(ctx context.Context, field graphql.CollectedField, obj *graph.MlmdTransform) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlmdTransform_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlmdTransform_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlmdTransform",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlmdTransform_externalId(ctx context.Context, field graphql.CollectedField, obj *graph.MlmdTransform) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlmdTransform_externalId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExternalID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlmdTransform_externalId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlmdTransform",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlmdTransform_createTimeSinceEpoch(ctx context.Context, field graphql.CollectedField, obj *graph.MlmdTransform) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlmdTransform_createTimeSinceEpoch(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateTimeSinceEpoch, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlmdTransform_createTimeSinceEpoch(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlmdTransform",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlmdTransform_lastUpdateTimeSinceEpoch(ctx context.Context, field graphql.CollectedField, obj *graph.MlmdTransform) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlmdTransform_lastUpdateTimeSinceEpoch(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastUpdateTimeSinceEpoch, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlmdTransform_lastUpdateTimeSinceEpoch(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlmdTransform",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlmdTransform_booleanProp(ctx context.Context, field graphql.CollectedField, obj *graph.MlmdTransform) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlmdTransform_booleanProp(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BooleanProp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlmdTransform_booleanProp(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlmdTransform",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlmdTransform_type(ctx context.Context, field graphql.CollectedField, obj *graph.MlmdTransform) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlmdTransform_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MlmdTransform().Type(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*graph.ExecutionType)
	fc.Result = res
	return ec.marshalNExecutionType2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐExecutionType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlmdTransform_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlmdTransform",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ExecutionType_id(ctx, field)
			case "name":
				return ec.fieldContext_ExecutionType_name(ctx, field)
			case "version":
				return ec.fieldContext_ExecutionType_version(ctx, field)
			case "typeKind":
				return ec.fieldContext_ExecutionType_typeKind(ctx, field)
			case "description":
				return ec.fieldContext_ExecutionType_description(ctx, field)
			case "externalId":
				return ec.fieldContext_ExecutionType_externalId(ctx, field)
			case "inputType":
				return ec.fieldContext_ExecutionType_inputType(ctx, field)
			case "outputType":
				return ec.fieldContext_ExecutionType_outputType(ctx, field)
			case "properties":
				return ec.fieldContext_ExecutionType_properties(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ExecutionType", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlmdTransform_properties(ctx context.Context, field graphql.CollectedField, obj *graph.MlmdTransform) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlmdTransform_properties(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Properties, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*graph.InstanceProperty)
	fc.Result = res
	return ec.marshalNInstanceProperty2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐInstancePropertyᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlmdTransform_properties(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlmdTransform",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_InstanceProperty_name(ctx, field)
			case "isCustomProperty":
				return ec.fieldContext_InstanceProperty_isCustomProperty(ctx, field)
			case "propertyValue":
				return ec.fieldContext_InstanceProperty_propertyValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type InstanceProperty", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlmdTransform_associations(ctx context.Context, field graphql.CollectedField, obj *graph.MlmdTransform) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlmdTransform_associations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MlmdTransform().Associations(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*graph.Association)
	fc.Result = res
	return ec.marshalOAssociation2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐAssociationᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlmdTransform_associations(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlmdTransform",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Association_id(ctx, field)
			case "contextId":
				return ec.fieldContext_Association_contextId(ctx, field)
			case "executionId":
				return ec.fieldContext_Association_executionId(ctx, field)
			case "context":
				return ec.fieldContext_Association_context(ctx, field)
			case "execution":
				return ec.fieldContext_Association_execution(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Association", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlmdTransform_events(ctx context.Context, field graphql.CollectedField, obj *graph.MlmdTransform) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlmdTransform_events(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MlmdTransform().Events(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*graph.Event)
	fc.Result = res
	return ec.marshalOEvent2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐEventᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlmdTransform_events(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlmdTransform",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Event_id(ctx, field)
			case "artifactId":
				return ec.fieldContext_Event_artifactId(ctx, field)
			case "executionId":
				return ec.fieldContext_Event_executionId(ctx, field)
			case "type":
				return ec.fieldContext_Event_type(ctx, field)
			case "path":
				return ec.fieldContext_Event_path(ctx, field)
			case "millisecondsSinceEpoch":
				return ec.fieldContext_Event_millisecondsSinceEpoch(ctx, field)
			case "artifact":
				return ec.fieldContext_Event_artifact(ctx, field)
			case "execution":
				return ec.fieldContext_Event_execution(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Event", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaAlgorithm_id(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaAlgorithm) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaAlgorithm_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaAlgorithm_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaAlgorithm",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaAlgorithm_typeId(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaAlgorithm) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaAlgorithm_typeId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TypeID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaAlgorithm_typeId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaAlgorithm",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaAlgorithm_uri(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaAlgorithm) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaAlgorithm_uri(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URI, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaAlgorithm_uri(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaAlgorithm",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaAlgorithm_state(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaAlgorithm) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaAlgorithm_state(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.State, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*graph.ArtifactState)
	fc.Result = res
	return ec.marshalOArtifactState2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐArtifactState(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaAlgorithm_state(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaAlgorithm",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ArtifactState does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaAlgorithm_name(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaAlgorithm) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaAlgorithm_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaAlgorithm_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaAlgorithm",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaAlgorithm_externalId(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaAlgorithm) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaAlgorithm_externalId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExternalID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaAlgorithm_externalId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaAlgorithm",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaAlgorithm_createTimeSinceEpoch(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaAlgorithm) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaAlgorithm_createTimeSinceEpoch(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateTimeSinceEpoch, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaAlgorithm_createTimeSinceEpoch(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaAlgorithm",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaAlgorithm_lastUpdateTimeSinceEpoch(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaAlgorithm) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaAlgorithm_lastUpdateTimeSinceEpoch(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastUpdateTimeSinceEpoch, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaAlgorithm_lastUpdateTimeSinceEpoch(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaAlgorithm",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaAlgorithm_type(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaAlgorithm) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaAlgorithm_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MlschemaAlgorithm().Type(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*graph.ArtifactType)
	fc.Result = res
	return ec.marshalNArtifactType2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐArtifactType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaAlgorithm_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaAlgorithm",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ArtifactType_id(ctx, field)
			case "name":
				return ec.fieldContext_ArtifactType_name(ctx, field)
			case "version":
				return ec.fieldContext_ArtifactType_version(ctx, field)
			case "typeKind":
				return ec.fieldContext_ArtifactType_typeKind(ctx, field)
			case "description":
				return ec.fieldContext_ArtifactType_description(ctx, field)
			case "externalId":
				return ec.fieldContext_ArtifactType_externalId(ctx, field)
			case "properties":
				return ec.fieldContext_ArtifactType_properties(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ArtifactType", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaAlgorithm_properties(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaAlgorithm) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaAlgorithm_properties(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Properties, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*graph.InstanceProperty)
	fc.Result = res
	return ec.marshalNInstanceProperty2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐInstancePropertyᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaAlgorithm_properties(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaAlgorithm",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_InstanceProperty_name(ctx, field)
			case "isCustomProperty":
				return ec.fieldContext_InstanceProperty_isCustomProperty(ctx, field)
			case "propertyValue":
				return ec.fieldContext_InstanceProperty_propertyValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type InstanceProperty", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaAlgorithm_attributions(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaAlgorithm) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaAlgorithm_attributions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MlschemaAlgorithm().Attributions(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*graph.Attribution)
	fc.Result = res
	return ec.marshalOAttribution2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐAttributionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaAlgorithm_attributions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaAlgorithm",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Attribution_id(ctx, field)
			case "contextId":
				return ec.fieldContext_Attribution_contextId(ctx, field)
			case "artifactId":
				return ec.fieldContext_Attribution_artifactId(ctx, field)
			case "context":
				return ec.fieldContext_Attribution_context(ctx, field)
			case "artifact":
				return ec.fieldContext_Attribution_artifact(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Attribution", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaAlgorithm_events(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaAlgorithm) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaAlgorithm_events(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MlschemaAlgorithm().Events(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*graph.Event)
	fc.Result = res
	return ec.marshalOEvent2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐEventᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaAlgorithm_events(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaAlgorithm",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Event_id(ctx, field)
			case "artifactId":
				return ec.fieldContext_Event_artifactId(ctx, field)
			case "executionId":
				return ec.fieldContext_Event_executionId(ctx, field)
			case "type":
				return ec.fieldContext_Event_type(ctx, field)
			case "path":
				return ec.fieldContext_Event_path(ctx, field)
			case "millisecondsSinceEpoch":
				return ec.fieldContext_Event_millisecondsSinceEpoch(ctx, field)
			case "artifact":
				return ec.fieldContext_Event_artifact(ctx, field)
			case "execution":
				return ec.fieldContext_Event_execution(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Event", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaData_id(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaData_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaData_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaData_typeId(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaData_typeId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TypeID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaData_typeId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaData_uri(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaData_uri(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URI, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaData_uri(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaData_state(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaData_state(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.State, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*graph.ArtifactState)
	fc.Result = res
	return ec.marshalOArtifactState2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐArtifactState(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaData_state(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ArtifactState does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaData_name(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaData_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaData_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaData_externalId(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaData_externalId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExternalID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaData_externalId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaData_createTimeSinceEpoch(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaData_createTimeSinceEpoch(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateTimeSinceEpoch, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaData_createTimeSinceEpoch(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaData_lastUpdateTimeSinceEpoch(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaData_lastUpdateTimeSinceEpoch(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastUpdateTimeSinceEpoch, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaData_lastUpdateTimeSinceEpoch(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaData_type(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaData_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MlschemaData().Type(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*graph.ArtifactType)
	fc.Result = res
	return ec.marshalNArtifactType2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐArtifactType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaData_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaData",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ArtifactType_id(ctx, field)
			case "name":
				return ec.fieldContext_ArtifactType_name(ctx, field)
			case "version":
				return ec.fieldContext_ArtifactType_version(ctx, field)
			case "typeKind":
				return ec.fieldContext_ArtifactType_typeKind(ctx, field)
			case "description":
				return ec.fieldContext_ArtifactType_description(ctx, field)
			case "externalId":
				return ec.fieldContext_ArtifactType_externalId(ctx, field)
			case "properties":
				return ec.fieldContext_ArtifactType_properties(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ArtifactType", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaData_properties(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaData_properties(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Properties, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*graph.InstanceProperty)
	fc.Result = res
	return ec.marshalNInstanceProperty2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐInstancePropertyᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaData_properties(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_InstanceProperty_name(ctx, field)
			case "isCustomProperty":
				return ec.fieldContext_InstanceProperty_isCustomProperty(ctx, field)
			case "propertyValue":
				return ec.fieldContext_InstanceProperty_propertyValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type InstanceProperty", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaData_attributions(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaData_attributions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MlschemaData().Attributions(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*graph.Attribution)
	fc.Result = res
	return ec.marshalOAttribution2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐAttributionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaData_attributions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaData",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Attribution_id(ctx, field)
			case "contextId":
				return ec.fieldContext_Attribution_contextId(ctx, field)
			case "artifactId":
				return ec.fieldContext_Attribution_artifactId(ctx, field)
			case "context":
				return ec.fieldContext_Attribution_context(ctx, field)
			case "artifact":
				return ec.fieldContext_Attribution_artifact(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Attribution", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaData_events(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaData_events(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MlschemaData().Events(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*graph.Event)
	fc.Result = res
	return ec.marshalOEvent2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐEventᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaData_events(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaData",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Event_id(ctx, field)
			case "artifactId":
				return ec.fieldContext_Event_artifactId(ctx, field)
			case "executionId":
				return ec.fieldContext_Event_executionId(ctx, field)
			case "type":
				return ec.fieldContext_Event_type(ctx, field)
			case "path":
				return ec.fieldContext_Event_path(ctx, field)
			case "millisecondsSinceEpoch":
				return ec.fieldContext_Event_millisecondsSinceEpoch(ctx, field)
			case "artifact":
				return ec.fieldContext_Event_artifact(ctx, field)
			case "execution":
				return ec.fieldContext_Event_execution(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Event", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaDataCharacteristic_id(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaDataCharacteristic) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaDataCharacteristic_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaDataCharacteristic_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaDataCharacteristic",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaDataCharacteristic_typeId(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaDataCharacteristic) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaDataCharacteristic_typeId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TypeID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaDataCharacteristic_typeId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaDataCharacteristic",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaDataCharacteristic_name(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaDataCharacteristic) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaDataCharacteristic_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaDataCharacteristic_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaDataCharacteristic",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaDataCharacteristic_externalId(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaDataCharacteristic) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaDataCharacteristic_externalId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExternalID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaDataCharacteristic_externalId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaDataCharacteristic",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaDataCharacteristic_createTimeSinceEpoch(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaDataCharacteristic) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaDataCharacteristic_createTimeSinceEpoch(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateTimeSinceEpoch, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaDataCharacteristic_createTimeSinceEpoch(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaDataCharacteristic",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaDataCharacteristic_lastUpdateTimeSinceEpoch(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaDataCharacteristic) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaDataCharacteristic_lastUpdateTimeSinceEpoch(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastUpdateTimeSinceEpoch, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaDataCharacteristic_lastUpdateTimeSinceEpoch(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaDataCharacteristic",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaDataCharacteristic_type(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaDataCharacteristic) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaDataCharacteristic_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MlschemaDataCharacteristic().Type(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*graph.ContextType)
	fc.Result = res
	return ec.marshalNContextType2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐContextType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaDataCharacteristic_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaDataCharacteristic",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ContextType_id(ctx, field)
			case "name":
				return ec.fieldContext_ContextType_name(ctx, field)
			case "version":
				return ec.fieldContext_ContextType_version(ctx, field)
			case "typeKind":
				return ec.fieldContext_ContextType_typeKind(ctx, field)
			case "description":
				return ec.fieldContext_ContextType_description(ctx, field)
			case "externalId":
				return ec.fieldContext_ContextType_externalId(ctx, field)
			case "properties":
				return ec.fieldContext_ContextType_properties(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ContextType", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaDataCharacteristic_properties(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaDataCharacteristic) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaDataCharacteristic_properties(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Properties, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*graph.InstanceProperty)
	fc.Result = res
	return ec.marshalNInstanceProperty2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐInstancePropertyᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaDataCharacteristic_properties(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaDataCharacteristic",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_InstanceProperty_name(ctx, field)
			case "isCustomProperty":
				return ec.fieldContext_InstanceProperty_isCustomProperty(ctx, field)
			case "propertyValue":
				return ec.fieldContext_InstanceProperty_propertyValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type InstanceProperty", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaDataCharacteristic_parents(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaDataCharacteristic) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaDataCharacteristic_parents(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MlschemaDataCharacteristic().Parents(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]graph.ContextInterface)
	fc.Result = res
	return ec.marshalOContextInterface2ᚕgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐContextInterfaceᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaDataCharacteristic_parents(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaDataCharacteristic",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("FieldContext.Child cannot be called on type INTERFACE")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaDataCharacteristic_children(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaDataCharacteristic) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaDataCharacteristic_children(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MlschemaDataCharacteristic().Children(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]graph.ContextInterface)
	fc.Result = res
	return ec.marshalOContextInterface2ᚕgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐContextInterfaceᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaDataCharacteristic_children(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaDataCharacteristic",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("FieldContext.Child cannot be called on type INTERFACE")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaDataCharacteristic_attributions(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaDataCharacteristic) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaDataCharacteristic_attributions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MlschemaDataCharacteristic().Attributions(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*graph.Attribution)
	fc.Result = res
	return ec.marshalOAttribution2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐAttributionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaDataCharacteristic_attributions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaDataCharacteristic",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Attribution_id(ctx, field)
			case "contextId":
				return ec.fieldContext_Attribution_contextId(ctx, field)
			case "artifactId":
				return ec.fieldContext_Attribution_artifactId(ctx, field)
			case "context":
				return ec.fieldContext_Attribution_context(ctx, field)
			case "artifact":
				return ec.fieldContext_Attribution_artifact(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Attribution", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaDataCharacteristic_associations(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaDataCharacteristic) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaDataCharacteristic_associations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MlschemaDataCharacteristic().Associations(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*graph.Association)
	fc.Result = res
	return ec.marshalOAssociation2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐAssociationᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaDataCharacteristic_associations(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaDataCharacteristic",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Association_id(ctx, field)
			case "contextId":
				return ec.fieldContext_Association_contextId(ctx, field)
			case "executionId":
				return ec.fieldContext_Association_executionId(ctx, field)
			case "context":
				return ec.fieldContext_Association_context(ctx, field)
			case "execution":
				return ec.fieldContext_Association_execution(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Association", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaDataSet_id(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaDataSet) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaDataSet_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaDataSet_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaDataSet",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaDataSet_typeId(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaDataSet) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaDataSet_typeId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TypeID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaDataSet_typeId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaDataSet",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaDataSet_uri(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaDataSet) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaDataSet_uri(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URI, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaDataSet_uri(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaDataSet",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaDataSet_state(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaDataSet) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaDataSet_state(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.State, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*graph.ArtifactState)
	fc.Result = res
	return ec.marshalOArtifactState2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐArtifactState(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaDataSet_state(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaDataSet",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ArtifactState does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaDataSet_name(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaDataSet) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaDataSet_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaDataSet_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaDataSet",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaDataSet_externalId(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaDataSet) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaDataSet_externalId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExternalID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaDataSet_externalId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaDataSet",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaDataSet_createTimeSinceEpoch(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaDataSet) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaDataSet_createTimeSinceEpoch(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateTimeSinceEpoch, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaDataSet_createTimeSinceEpoch(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaDataSet",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaDataSet_lastUpdateTimeSinceEpoch(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaDataSet) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaDataSet_lastUpdateTimeSinceEpoch(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastUpdateTimeSinceEpoch, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaDataSet_lastUpdateTimeSinceEpoch(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaDataSet",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaDataSet_type(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaDataSet) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaDataSet_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MlschemaDataSet().Type(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*graph.ArtifactType)
	fc.Result = res
	return ec.marshalNArtifactType2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐArtifactType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaDataSet_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaDataSet",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ArtifactType_id(ctx, field)
			case "name":
				return ec.fieldContext_ArtifactType_name(ctx, field)
			case "version":
				return ec.fieldContext_ArtifactType_version(ctx, field)
			case "typeKind":
				return ec.fieldContext_ArtifactType_typeKind(ctx, field)
			case "description":
				return ec.fieldContext_ArtifactType_description(ctx, field)
			case "externalId":
				return ec.fieldContext_ArtifactType_externalId(ctx, field)
			case "properties":
				return ec.fieldContext_ArtifactType_properties(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ArtifactType", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaDataSet_properties(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaDataSet) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaDataSet_properties(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Properties, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*graph.InstanceProperty)
	fc.Result = res
	return ec.marshalNInstanceProperty2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐInstancePropertyᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaDataSet_properties(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaDataSet",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_InstanceProperty_name(ctx, field)
			case "isCustomProperty":
				return ec.fieldContext_InstanceProperty_isCustomProperty(ctx, field)
			case "propertyValue":
				return ec.fieldContext_InstanceProperty_propertyValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type InstanceProperty", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaDataSet_attributions(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaDataSet) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaDataSet_attributions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MlschemaDataSet().Attributions(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*graph.Attribution)
	fc.Result = res
	return ec.marshalOAttribution2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐAttributionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaDataSet_attributions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaDataSet",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Attribution_id(ctx, field)
			case "contextId":
				return ec.fieldContext_Attribution_contextId(ctx, field)
			case "artifactId":
				return ec.fieldContext_Attribution_artifactId(ctx, field)
			case "context":
				return ec.fieldContext_Attribution_context(ctx, field)
			case "artifact":
				return ec.fieldContext_Attribution_artifact(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Attribution", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaDataSet_events(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaDataSet) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaDataSet_events(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MlschemaDataSet().Events(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*graph.Event)
	fc.Result = res
	return ec.marshalOEvent2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐEventᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaDataSet_events(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaDataSet",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Event_id(ctx, field)
			case "artifactId":
				return ec.fieldContext_Event_artifactId(ctx, field)
			case "executionId":
				return ec.fieldContext_Event_executionId(ctx, field)
			case "type":
				return ec.fieldContext_Event_type(ctx, field)
			case "path":
				return ec.fieldContext_Event_path(ctx, field)
			case "millisecondsSinceEpoch":
				return ec.fieldContext_Event_millisecondsSinceEpoch(ctx, field)
			case "artifact":
				return ec.fieldContext_Event_artifact(ctx, field)
			case "execution":
				return ec.fieldContext_Event_execution(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Event", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaDatasetCharacteristic_id(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaDatasetCharacteristic) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaDatasetCharacteristic_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaDatasetCharacteristic_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaDatasetCharacteristic",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaDatasetCharacteristic_typeId(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaDatasetCharacteristic) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaDatasetCharacteristic_typeId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TypeID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaDatasetCharacteristic_typeId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaDatasetCharacteristic",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaDatasetCharacteristic_uri(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaDatasetCharacteristic) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaDatasetCharacteristic_uri(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URI, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaDatasetCharacteristic_uri(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaDatasetCharacteristic",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaDatasetCharacteristic_state(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaDatasetCharacteristic) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaDatasetCharacteristic_state(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.State, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*graph.ArtifactState)
	fc.Result = res
	return ec.marshalOArtifactState2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐArtifactState(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaDatasetCharacteristic_state(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaDatasetCharacteristic",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ArtifactState does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaDatasetCharacteristic_name(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaDatasetCharacteristic) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaDatasetCharacteristic_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaDatasetCharacteristic_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaDatasetCharacteristic",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaDatasetCharacteristic_externalId(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaDatasetCharacteristic) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaDatasetCharacteristic_externalId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExternalID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaDatasetCharacteristic_externalId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaDatasetCharacteristic",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaDatasetCharacteristic_createTimeSinceEpoch(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaDatasetCharacteristic) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaDatasetCharacteristic_createTimeSinceEpoch(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateTimeSinceEpoch, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaDatasetCharacteristic_createTimeSinceEpoch(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaDatasetCharacteristic",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaDatasetCharacteristic_lastUpdateTimeSinceEpoch(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaDatasetCharacteristic) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaDatasetCharacteristic_lastUpdateTimeSinceEpoch(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastUpdateTimeSinceEpoch, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaDatasetCharacteristic_lastUpdateTimeSinceEpoch(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaDatasetCharacteristic",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaDatasetCharacteristic_type(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaDatasetCharacteristic) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaDatasetCharacteristic_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MlschemaDatasetCharacteristic().Type(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*graph.ArtifactType)
	fc.Result = res
	return ec.marshalNArtifactType2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐArtifactType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaDatasetCharacteristic_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaDatasetCharacteristic",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ArtifactType_id(ctx, field)
			case "name":
				return ec.fieldContext_ArtifactType_name(ctx, field)
			case "version":
				return ec.fieldContext_ArtifactType_version(ctx, field)
			case "typeKind":
				return ec.fieldContext_ArtifactType_typeKind(ctx, field)
			case "description":
				return ec.fieldContext_ArtifactType_description(ctx, field)
			case "externalId":
				return ec.fieldContext_ArtifactType_externalId(ctx, field)
			case "properties":
				return ec.fieldContext_ArtifactType_properties(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ArtifactType", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaDatasetCharacteristic_properties(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaDatasetCharacteristic) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaDatasetCharacteristic_properties(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Properties, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*graph.InstanceProperty)
	fc.Result = res
	return ec.marshalNInstanceProperty2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐInstancePropertyᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaDatasetCharacteristic_properties(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaDatasetCharacteristic",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_InstanceProperty_name(ctx, field)
			case "isCustomProperty":
				return ec.fieldContext_InstanceProperty_isCustomProperty(ctx, field)
			case "propertyValue":
				return ec.fieldContext_InstanceProperty_propertyValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type InstanceProperty", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaDatasetCharacteristic_attributions(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaDatasetCharacteristic) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaDatasetCharacteristic_attributions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MlschemaDatasetCharacteristic().Attributions(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*graph.Attribution)
	fc.Result = res
	return ec.marshalOAttribution2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐAttributionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaDatasetCharacteristic_attributions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaDatasetCharacteristic",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Attribution_id(ctx, field)
			case "contextId":
				return ec.fieldContext_Attribution_contextId(ctx, field)
			case "artifactId":
				return ec.fieldContext_Attribution_artifactId(ctx, field)
			case "context":
				return ec.fieldContext_Attribution_context(ctx, field)
			case "artifact":
				return ec.fieldContext_Attribution_artifact(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Attribution", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaDatasetCharacteristic_events(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaDatasetCharacteristic) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaDatasetCharacteristic_events(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MlschemaDatasetCharacteristic().Events(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*graph.Event)
	fc.Result = res
	return ec.marshalOEvent2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐEventᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaDatasetCharacteristic_events(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaDatasetCharacteristic",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Event_id(ctx, field)
			case "artifactId":
				return ec.fieldContext_Event_artifactId(ctx, field)
			case "executionId":
				return ec.fieldContext_Event_executionId(ctx, field)
			case "type":
				return ec.fieldContext_Event_type(ctx, field)
			case "path":
				return ec.fieldContext_Event_path(ctx, field)
			case "millisecondsSinceEpoch":
				return ec.fieldContext_Event_millisecondsSinceEpoch(ctx, field)
			case "artifact":
				return ec.fieldContext_Event_artifact(ctx, field)
			case "execution":
				return ec.fieldContext_Event_execution(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Event", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaEvaluationMeasure_id(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaEvaluationMeasure) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaEvaluationMeasure_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaEvaluationMeasure_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaEvaluationMeasure",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaEvaluationMeasure_typeId(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaEvaluationMeasure) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaEvaluationMeasure_typeId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TypeID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaEvaluationMeasure_typeId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaEvaluationMeasure",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaEvaluationMeasure_uri(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaEvaluationMeasure) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaEvaluationMeasure_uri(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URI, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaEvaluationMeasure_uri(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaEvaluationMeasure",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaEvaluationMeasure_state(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaEvaluationMeasure) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaEvaluationMeasure_state(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.State, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*graph.ArtifactState)
	fc.Result = res
	return ec.marshalOArtifactState2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐArtifactState(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaEvaluationMeasure_state(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaEvaluationMeasure",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ArtifactState does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaEvaluationMeasure_name(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaEvaluationMeasure) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaEvaluationMeasure_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaEvaluationMeasure_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaEvaluationMeasure",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaEvaluationMeasure_externalId(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaEvaluationMeasure) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaEvaluationMeasure_externalId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExternalID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaEvaluationMeasure_externalId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaEvaluationMeasure",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaEvaluationMeasure_createTimeSinceEpoch(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaEvaluationMeasure) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaEvaluationMeasure_createTimeSinceEpoch(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateTimeSinceEpoch, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaEvaluationMeasure_createTimeSinceEpoch(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaEvaluationMeasure",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaEvaluationMeasure_lastUpdateTimeSinceEpoch(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaEvaluationMeasure) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaEvaluationMeasure_lastUpdateTimeSinceEpoch(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastUpdateTimeSinceEpoch, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaEvaluationMeasure_lastUpdateTimeSinceEpoch(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaEvaluationMeasure",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaEvaluationMeasure_type(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaEvaluationMeasure) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaEvaluationMeasure_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MlschemaEvaluationMeasure().Type(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*graph.ArtifactType)
	fc.Result = res
	return ec.marshalNArtifactType2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐArtifactType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaEvaluationMeasure_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaEvaluationMeasure",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ArtifactType_id(ctx, field)
			case "name":
				return ec.fieldContext_ArtifactType_name(ctx, field)
			case "version":
				return ec.fieldContext_ArtifactType_version(ctx, field)
			case "typeKind":
				return ec.fieldContext_ArtifactType_typeKind(ctx, field)
			case "description":
				return ec.fieldContext_ArtifactType_description(ctx, field)
			case "externalId":
				return ec.fieldContext_ArtifactType_externalId(ctx, field)
			case "properties":
				return ec.fieldContext_ArtifactType_properties(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ArtifactType", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaEvaluationMeasure_properties(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaEvaluationMeasure) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaEvaluationMeasure_properties(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Properties, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*graph.InstanceProperty)
	fc.Result = res
	return ec.marshalNInstanceProperty2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐInstancePropertyᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaEvaluationMeasure_properties(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaEvaluationMeasure",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_InstanceProperty_name(ctx, field)
			case "isCustomProperty":
				return ec.fieldContext_InstanceProperty_isCustomProperty(ctx, field)
			case "propertyValue":
				return ec.fieldContext_InstanceProperty_propertyValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type InstanceProperty", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaEvaluationMeasure_attributions(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaEvaluationMeasure) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaEvaluationMeasure_attributions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MlschemaEvaluationMeasure().Attributions(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*graph.Attribution)
	fc.Result = res
	return ec.marshalOAttribution2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐAttributionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaEvaluationMeasure_attributions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaEvaluationMeasure",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Attribution_id(ctx, field)
			case "contextId":
				return ec.fieldContext_Attribution_contextId(ctx, field)
			case "artifactId":
				return ec.fieldContext_Attribution_artifactId(ctx, field)
			case "context":
				return ec.fieldContext_Attribution_context(ctx, field)
			case "artifact":
				return ec.fieldContext_Attribution_artifact(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Attribution", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaEvaluationMeasure_events(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaEvaluationMeasure) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaEvaluationMeasure_events(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MlschemaEvaluationMeasure().Events(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*graph.Event)
	fc.Result = res
	return ec.marshalOEvent2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐEventᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaEvaluationMeasure_events(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaEvaluationMeasure",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Event_id(ctx, field)
			case "artifactId":
				return ec.fieldContext_Event_artifactId(ctx, field)
			case "executionId":
				return ec.fieldContext_Event_executionId(ctx, field)
			case "type":
				return ec.fieldContext_Event_type(ctx, field)
			case "path":
				return ec.fieldContext_Event_path(ctx, field)
			case "millisecondsSinceEpoch":
				return ec.fieldContext_Event_millisecondsSinceEpoch(ctx, field)
			case "artifact":
				return ec.fieldContext_Event_artifact(ctx, field)
			case "execution":
				return ec.fieldContext_Event_execution(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Event", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaEvaluationProcedure_id(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaEvaluationProcedure) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaEvaluationProcedure_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaEvaluationProcedure_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaEvaluationProcedure",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaEvaluationProcedure_typeId(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaEvaluationProcedure) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaEvaluationProcedure_typeId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TypeID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaEvaluationProcedure_typeId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaEvaluationProcedure",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaEvaluationProcedure_uri(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaEvaluationProcedure) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaEvaluationProcedure_uri(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URI, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaEvaluationProcedure_uri(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaEvaluationProcedure",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaEvaluationProcedure_state(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaEvaluationProcedure) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaEvaluationProcedure_state(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.State, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*graph.ArtifactState)
	fc.Result = res
	return ec.marshalOArtifactState2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐArtifactState(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaEvaluationProcedure_state(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaEvaluationProcedure",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ArtifactState does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaEvaluationProcedure_name(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaEvaluationProcedure) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaEvaluationProcedure_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaEvaluationProcedure_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaEvaluationProcedure",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaEvaluationProcedure_externalId(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaEvaluationProcedure) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaEvaluationProcedure_externalId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExternalID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaEvaluationProcedure_externalId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaEvaluationProcedure",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaEvaluationProcedure_createTimeSinceEpoch(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaEvaluationProcedure) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaEvaluationProcedure_createTimeSinceEpoch(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateTimeSinceEpoch, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaEvaluationProcedure_createTimeSinceEpoch(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaEvaluationProcedure",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaEvaluationProcedure_lastUpdateTimeSinceEpoch(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaEvaluationProcedure) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaEvaluationProcedure_lastUpdateTimeSinceEpoch(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastUpdateTimeSinceEpoch, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaEvaluationProcedure_lastUpdateTimeSinceEpoch(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaEvaluationProcedure",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaEvaluationProcedure_type(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaEvaluationProcedure) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaEvaluationProcedure_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MlschemaEvaluationProcedure().Type(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*graph.ArtifactType)
	fc.Result = res
	return ec.marshalNArtifactType2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐArtifactType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaEvaluationProcedure_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaEvaluationProcedure",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ArtifactType_id(ctx, field)
			case "name":
				return ec.fieldContext_ArtifactType_name(ctx, field)
			case "version":
				return ec.fieldContext_ArtifactType_version(ctx, field)
			case "typeKind":
				return ec.fieldContext_ArtifactType_typeKind(ctx, field)
			case "description":
				return ec.fieldContext_ArtifactType_description(ctx, field)
			case "externalId":
				return ec.fieldContext_ArtifactType_externalId(ctx, field)
			case "properties":
				return ec.fieldContext_ArtifactType_properties(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ArtifactType", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaEvaluationProcedure_properties(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaEvaluationProcedure) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaEvaluationProcedure_properties(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Properties, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*graph.InstanceProperty)
	fc.Result = res
	return ec.marshalNInstanceProperty2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐInstancePropertyᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaEvaluationProcedure_properties(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaEvaluationProcedure",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_InstanceProperty_name(ctx, field)
			case "isCustomProperty":
				return ec.fieldContext_InstanceProperty_isCustomProperty(ctx, field)
			case "propertyValue":
				return ec.fieldContext_InstanceProperty_propertyValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type InstanceProperty", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaEvaluationProcedure_attributions(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaEvaluationProcedure) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaEvaluationProcedure_attributions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MlschemaEvaluationProcedure().Attributions(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*graph.Attribution)
	fc.Result = res
	return ec.marshalOAttribution2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐAttributionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaEvaluationProcedure_attributions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaEvaluationProcedure",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Attribution_id(ctx, field)
			case "contextId":
				return ec.fieldContext_Attribution_contextId(ctx, field)
			case "artifactId":
				return ec.fieldContext_Attribution_artifactId(ctx, field)
			case "context":
				return ec.fieldContext_Attribution_context(ctx, field)
			case "artifact":
				return ec.fieldContext_Attribution_artifact(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Attribution", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaEvaluationProcedure_events(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaEvaluationProcedure) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaEvaluationProcedure_events(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MlschemaEvaluationProcedure().Events(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*graph.Event)
	fc.Result = res
	return ec.marshalOEvent2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐEventᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaEvaluationProcedure_events(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaEvaluationProcedure",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Event_id(ctx, field)
			case "artifactId":
				return ec.fieldContext_Event_artifactId(ctx, field)
			case "executionId":
				return ec.fieldContext_Event_executionId(ctx, field)
			case "type":
				return ec.fieldContext_Event_type(ctx, field)
			case "path":
				return ec.fieldContext_Event_path(ctx, field)
			case "millisecondsSinceEpoch":
				return ec.fieldContext_Event_millisecondsSinceEpoch(ctx, field)
			case "artifact":
				return ec.fieldContext_Event_artifact(ctx, field)
			case "execution":
				return ec.fieldContext_Event_execution(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Event", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaEvaluationSpecification_id(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaEvaluationSpecification) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaEvaluationSpecification_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaEvaluationSpecification_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaEvaluationSpecification",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaEvaluationSpecification_typeId(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaEvaluationSpecification) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaEvaluationSpecification_typeId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TypeID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaEvaluationSpecification_typeId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaEvaluationSpecification",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaEvaluationSpecification_uri(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaEvaluationSpecification) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaEvaluationSpecification_uri(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URI, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaEvaluationSpecification_uri(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaEvaluationSpecification",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaEvaluationSpecification_state(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaEvaluationSpecification) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaEvaluationSpecification_state(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.State, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*graph.ArtifactState)
	fc.Result = res
	return ec.marshalOArtifactState2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐArtifactState(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaEvaluationSpecification_state(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaEvaluationSpecification",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ArtifactState does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaEvaluationSpecification_name(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaEvaluationSpecification) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaEvaluationSpecification_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaEvaluationSpecification_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaEvaluationSpecification",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaEvaluationSpecification_externalId(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaEvaluationSpecification) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaEvaluationSpecification_externalId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExternalID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaEvaluationSpecification_externalId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaEvaluationSpecification",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaEvaluationSpecification_createTimeSinceEpoch(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaEvaluationSpecification) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaEvaluationSpecification_createTimeSinceEpoch(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateTimeSinceEpoch, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaEvaluationSpecification_createTimeSinceEpoch(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaEvaluationSpecification",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaEvaluationSpecification_lastUpdateTimeSinceEpoch(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaEvaluationSpecification) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaEvaluationSpecification_lastUpdateTimeSinceEpoch(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastUpdateTimeSinceEpoch, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaEvaluationSpecification_lastUpdateTimeSinceEpoch(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaEvaluationSpecification",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaEvaluationSpecification_type(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaEvaluationSpecification) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaEvaluationSpecification_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MlschemaEvaluationSpecification().Type(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*graph.ArtifactType)
	fc.Result = res
	return ec.marshalNArtifactType2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐArtifactType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaEvaluationSpecification_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaEvaluationSpecification",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ArtifactType_id(ctx, field)
			case "name":
				return ec.fieldContext_ArtifactType_name(ctx, field)
			case "version":
				return ec.fieldContext_ArtifactType_version(ctx, field)
			case "typeKind":
				return ec.fieldContext_ArtifactType_typeKind(ctx, field)
			case "description":
				return ec.fieldContext_ArtifactType_description(ctx, field)
			case "externalId":
				return ec.fieldContext_ArtifactType_externalId(ctx, field)
			case "properties":
				return ec.fieldContext_ArtifactType_properties(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ArtifactType", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaEvaluationSpecification_properties(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaEvaluationSpecification) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaEvaluationSpecification_properties(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Properties, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*graph.InstanceProperty)
	fc.Result = res
	return ec.marshalNInstanceProperty2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐInstancePropertyᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaEvaluationSpecification_properties(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaEvaluationSpecification",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_InstanceProperty_name(ctx, field)
			case "isCustomProperty":
				return ec.fieldContext_InstanceProperty_isCustomProperty(ctx, field)
			case "propertyValue":
				return ec.fieldContext_InstanceProperty_propertyValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type InstanceProperty", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaEvaluationSpecification_attributions(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaEvaluationSpecification) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaEvaluationSpecification_attributions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MlschemaEvaluationSpecification().Attributions(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*graph.Attribution)
	fc.Result = res
	return ec.marshalOAttribution2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐAttributionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaEvaluationSpecification_attributions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaEvaluationSpecification",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Attribution_id(ctx, field)
			case "contextId":
				return ec.fieldContext_Attribution_contextId(ctx, field)
			case "artifactId":
				return ec.fieldContext_Attribution_artifactId(ctx, field)
			case "context":
				return ec.fieldContext_Attribution_context(ctx, field)
			case "artifact":
				return ec.fieldContext_Attribution_artifact(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Attribution", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaEvaluationSpecification_events(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaEvaluationSpecification) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaEvaluationSpecification_events(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MlschemaEvaluationSpecification().Events(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*graph.Event)
	fc.Result = res
	return ec.marshalOEvent2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐEventᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaEvaluationSpecification_events(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaEvaluationSpecification",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Event_id(ctx, field)
			case "artifactId":
				return ec.fieldContext_Event_artifactId(ctx, field)
			case "executionId":
				return ec.fieldContext_Event_executionId(ctx, field)
			case "type":
				return ec.fieldContext_Event_type(ctx, field)
			case "path":
				return ec.fieldContext_Event_path(ctx, field)
			case "millisecondsSinceEpoch":
				return ec.fieldContext_Event_millisecondsSinceEpoch(ctx, field)
			case "artifact":
				return ec.fieldContext_Event_artifact(ctx, field)
			case "execution":
				return ec.fieldContext_Event_execution(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Event", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaExperiment_id(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaExperiment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaExperiment_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaExperiment_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaExperiment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaExperiment_typeId(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaExperiment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaExperiment_typeId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TypeID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaExperiment_typeId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaExperiment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaExperiment_lastKnownState(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaExperiment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaExperiment_lastKnownState(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastKnownState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*graph.ExecutionState)
	fc.Result = res
	return ec.marshalOExecutionState2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐExecutionState(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaExperiment_lastKnownState(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaExperiment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ExecutionState does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaExperiment_name(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaExperiment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaExperiment_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaExperiment_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaExperiment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaExperiment_externalId(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaExperiment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaExperiment_externalId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExternalID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaExperiment_externalId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaExperiment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaExperiment_createTimeSinceEpoch(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaExperiment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaExperiment_createTimeSinceEpoch(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateTimeSinceEpoch, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaExperiment_createTimeSinceEpoch(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaExperiment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaExperiment_lastUpdateTimeSinceEpoch(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaExperiment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaExperiment_lastUpdateTimeSinceEpoch(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastUpdateTimeSinceEpoch, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaExperiment_lastUpdateTimeSinceEpoch(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaExperiment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaExperiment_type(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaExperiment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaExperiment_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MlschemaExperiment().Type(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*graph.ExecutionType)
	fc.Result = res
	return ec.marshalNExecutionType2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐExecutionType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaExperiment_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaExperiment",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ExecutionType_id(ctx, field)
			case "name":
				return ec.fieldContext_ExecutionType_name(ctx, field)
			case "version":
				return ec.fieldContext_ExecutionType_version(ctx, field)
			case "typeKind":
				return ec.fieldContext_ExecutionType_typeKind(ctx, field)
			case "description":
				return ec.fieldContext_ExecutionType_description(ctx, field)
			case "externalId":
				return ec.fieldContext_ExecutionType_externalId(ctx, field)
			case "inputType":
				return ec.fieldContext_ExecutionType_inputType(ctx, field)
			case "outputType":
				return ec.fieldContext_ExecutionType_outputType(ctx, field)
			case "properties":
				return ec.fieldContext_ExecutionType_properties(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ExecutionType", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaExperiment_properties(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaExperiment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaExperiment_properties(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Properties, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*graph.InstanceProperty)
	fc.Result = res
	return ec.marshalNInstanceProperty2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐInstancePropertyᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaExperiment_properties(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaExperiment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_InstanceProperty_name(ctx, field)
			case "isCustomProperty":
				return ec.fieldContext_InstanceProperty_isCustomProperty(ctx, field)
			case "propertyValue":
				return ec.fieldContext_InstanceProperty_propertyValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type InstanceProperty", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaExperiment_associations(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaExperiment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaExperiment_associations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MlschemaExperiment().Associations(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*graph.Association)
	fc.Result = res
	return ec.marshalOAssociation2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐAssociationᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaExperiment_associations(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaExperiment",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Association_id(ctx, field)
			case "contextId":
				return ec.fieldContext_Association_contextId(ctx, field)
			case "executionId":
				return ec.fieldContext_Association_executionId(ctx, field)
			case "context":
				return ec.fieldContext_Association_context(ctx, field)
			case "execution":
				return ec.fieldContext_Association_execution(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Association", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaExperiment_events(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaExperiment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaExperiment_events(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MlschemaExperiment().Events(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*graph.Event)
	fc.Result = res
	return ec.marshalOEvent2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐEventᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaExperiment_events(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaExperiment",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Event_id(ctx, field)
			case "artifactId":
				return ec.fieldContext_Event_artifactId(ctx, field)
			case "executionId":
				return ec.fieldContext_Event_executionId(ctx, field)
			case "type":
				return ec.fieldContext_Event_type(ctx, field)
			case "path":
				return ec.fieldContext_Event_path(ctx, field)
			case "millisecondsSinceEpoch":
				return ec.fieldContext_Event_millisecondsSinceEpoch(ctx, field)
			case "artifact":
				return ec.fieldContext_Event_artifact(ctx, field)
			case "execution":
				return ec.fieldContext_Event_execution(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Event", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaFeature_id(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaFeature) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaFeature_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaFeature_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaFeature",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaFeature_typeId(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaFeature) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaFeature_typeId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TypeID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaFeature_typeId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaFeature",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaFeature_uri(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaFeature) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaFeature_uri(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URI, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaFeature_uri(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaFeature",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaFeature_state(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaFeature) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaFeature_state(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.State, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*graph.ArtifactState)
	fc.Result = res
	return ec.marshalOArtifactState2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐArtifactState(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaFeature_state(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaFeature",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ArtifactState does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaFeature_name(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaFeature) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaFeature_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaFeature_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaFeature",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaFeature_externalId(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaFeature) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaFeature_externalId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExternalID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaFeature_externalId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaFeature",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaFeature_createTimeSinceEpoch(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaFeature) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaFeature_createTimeSinceEpoch(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateTimeSinceEpoch, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaFeature_createTimeSinceEpoch(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaFeature",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaFeature_lastUpdateTimeSinceEpoch(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaFeature) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaFeature_lastUpdateTimeSinceEpoch(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastUpdateTimeSinceEpoch, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaFeature_lastUpdateTimeSinceEpoch(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaFeature",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaFeature_type(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaFeature) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaFeature_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MlschemaFeature().Type(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*graph.ArtifactType)
	fc.Result = res
	return ec.marshalNArtifactType2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐArtifactType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaFeature_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaFeature",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ArtifactType_id(ctx, field)
			case "name":
				return ec.fieldContext_ArtifactType_name(ctx, field)
			case "version":
				return ec.fieldContext_ArtifactType_version(ctx, field)
			case "typeKind":
				return ec.fieldContext_ArtifactType_typeKind(ctx, field)
			case "description":
				return ec.fieldContext_ArtifactType_description(ctx, field)
			case "externalId":
				return ec.fieldContext_ArtifactType_externalId(ctx, field)
			case "properties":
				return ec.fieldContext_ArtifactType_properties(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ArtifactType", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaFeature_properties(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaFeature) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaFeature_properties(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Properties, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*graph.InstanceProperty)
	fc.Result = res
	return ec.marshalNInstanceProperty2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐInstancePropertyᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaFeature_properties(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaFeature",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_InstanceProperty_name(ctx, field)
			case "isCustomProperty":
				return ec.fieldContext_InstanceProperty_isCustomProperty(ctx, field)
			case "propertyValue":
				return ec.fieldContext_InstanceProperty_propertyValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type InstanceProperty", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaFeature_attributions(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaFeature) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaFeature_attributions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MlschemaFeature().Attributions(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*graph.Attribution)
	fc.Result = res
	return ec.marshalOAttribution2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐAttributionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaFeature_attributions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaFeature",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Attribution_id(ctx, field)
			case "contextId":
				return ec.fieldContext_Attribution_contextId(ctx, field)
			case "artifactId":
				return ec.fieldContext_Attribution_artifactId(ctx, field)
			case "context":
				return ec.fieldContext_Attribution_context(ctx, field)
			case "artifact":
				return ec.fieldContext_Attribution_artifact(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Attribution", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaFeature_events(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaFeature) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaFeature_events(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MlschemaFeature().Events(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*graph.Event)
	fc.Result = res
	return ec.marshalOEvent2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐEventᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaFeature_events(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaFeature",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Event_id(ctx, field)
			case "artifactId":
				return ec.fieldContext_Event_artifactId(ctx, field)
			case "executionId":
				return ec.fieldContext_Event_executionId(ctx, field)
			case "type":
				return ec.fieldContext_Event_type(ctx, field)
			case "path":
				return ec.fieldContext_Event_path(ctx, field)
			case "millisecondsSinceEpoch":
				return ec.fieldContext_Event_millisecondsSinceEpoch(ctx, field)
			case "artifact":
				return ec.fieldContext_Event_artifact(ctx, field)
			case "execution":
				return ec.fieldContext_Event_execution(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Event", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaFeatureCharacteristic_id(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaFeatureCharacteristic) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaFeatureCharacteristic_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaFeatureCharacteristic_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaFeatureCharacteristic",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaFeatureCharacteristic_typeId(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaFeatureCharacteristic) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaFeatureCharacteristic_typeId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TypeID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaFeatureCharacteristic_typeId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaFeatureCharacteristic",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaFeatureCharacteristic_uri(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaFeatureCharacteristic) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaFeatureCharacteristic_uri(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URI, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaFeatureCharacteristic_uri(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaFeatureCharacteristic",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaFeatureCharacteristic_state(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaFeatureCharacteristic) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaFeatureCharacteristic_state(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.State, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*graph.ArtifactState)
	fc.Result = res
	return ec.marshalOArtifactState2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐArtifactState(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaFeatureCharacteristic_state(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaFeatureCharacteristic",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ArtifactState does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaFeatureCharacteristic_name(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaFeatureCharacteristic) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaFeatureCharacteristic_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaFeatureCharacteristic_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaFeatureCharacteristic",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaFeatureCharacteristic_externalId(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaFeatureCharacteristic) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaFeatureCharacteristic_externalId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExternalID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaFeatureCharacteristic_externalId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaFeatureCharacteristic",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaFeatureCharacteristic_createTimeSinceEpoch(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaFeatureCharacteristic) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaFeatureCharacteristic_createTimeSinceEpoch(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateTimeSinceEpoch, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaFeatureCharacteristic_createTimeSinceEpoch(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaFeatureCharacteristic",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaFeatureCharacteristic_lastUpdateTimeSinceEpoch(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaFeatureCharacteristic) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaFeatureCharacteristic_lastUpdateTimeSinceEpoch(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastUpdateTimeSinceEpoch, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaFeatureCharacteristic_lastUpdateTimeSinceEpoch(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaFeatureCharacteristic",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaFeatureCharacteristic_type(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaFeatureCharacteristic) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaFeatureCharacteristic_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MlschemaFeatureCharacteristic().Type(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*graph.ArtifactType)
	fc.Result = res
	return ec.marshalNArtifactType2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐArtifactType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaFeatureCharacteristic_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaFeatureCharacteristic",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ArtifactType_id(ctx, field)
			case "name":
				return ec.fieldContext_ArtifactType_name(ctx, field)
			case "version":
				return ec.fieldContext_ArtifactType_version(ctx, field)
			case "typeKind":
				return ec.fieldContext_ArtifactType_typeKind(ctx, field)
			case "description":
				return ec.fieldContext_ArtifactType_description(ctx, field)
			case "externalId":
				return ec.fieldContext_ArtifactType_externalId(ctx, field)
			case "properties":
				return ec.fieldContext_ArtifactType_properties(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ArtifactType", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaFeatureCharacteristic_properties(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaFeatureCharacteristic) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaFeatureCharacteristic_properties(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Properties, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*graph.InstanceProperty)
	fc.Result = res
	return ec.marshalNInstanceProperty2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐInstancePropertyᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaFeatureCharacteristic_properties(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaFeatureCharacteristic",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_InstanceProperty_name(ctx, field)
			case "isCustomProperty":
				return ec.fieldContext_InstanceProperty_isCustomProperty(ctx, field)
			case "propertyValue":
				return ec.fieldContext_InstanceProperty_propertyValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type InstanceProperty", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaFeatureCharacteristic_attributions(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaFeatureCharacteristic) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaFeatureCharacteristic_attributions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MlschemaFeatureCharacteristic().Attributions(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*graph.Attribution)
	fc.Result = res
	return ec.marshalOAttribution2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐAttributionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaFeatureCharacteristic_attributions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaFeatureCharacteristic",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Attribution_id(ctx, field)
			case "contextId":
				return ec.fieldContext_Attribution_contextId(ctx, field)
			case "artifactId":
				return ec.fieldContext_Attribution_artifactId(ctx, field)
			case "context":
				return ec.fieldContext_Attribution_context(ctx, field)
			case "artifact":
				return ec.fieldContext_Attribution_artifact(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Attribution", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaFeatureCharacteristic_events(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaFeatureCharacteristic) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaFeatureCharacteristic_events(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MlschemaFeatureCharacteristic().Events(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*graph.Event)
	fc.Result = res
	return ec.marshalOEvent2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐEventᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaFeatureCharacteristic_events(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaFeatureCharacteristic",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Event_id(ctx, field)
			case "artifactId":
				return ec.fieldContext_Event_artifactId(ctx, field)
			case "executionId":
				return ec.fieldContext_Event_executionId(ctx, field)
			case "type":
				return ec.fieldContext_Event_type(ctx, field)
			case "path":
				return ec.fieldContext_Event_path(ctx, field)
			case "millisecondsSinceEpoch":
				return ec.fieldContext_Event_millisecondsSinceEpoch(ctx, field)
			case "artifact":
				return ec.fieldContext_Event_artifact(ctx, field)
			case "execution":
				return ec.fieldContext_Event_execution(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Event", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaHyperParameter_id(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaHyperParameter) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaHyperParameter_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaHyperParameter_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaHyperParameter",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaHyperParameter_typeId(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaHyperParameter) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaHyperParameter_typeId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TypeID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaHyperParameter_typeId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaHyperParameter",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaHyperParameter_uri(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaHyperParameter) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaHyperParameter_uri(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URI, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaHyperParameter_uri(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaHyperParameter",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaHyperParameter_state(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaHyperParameter) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaHyperParameter_state(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.State, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*graph.ArtifactState)
	fc.Result = res
	return ec.marshalOArtifactState2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐArtifactState(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaHyperParameter_state(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaHyperParameter",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ArtifactState does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaHyperParameter_name(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaHyperParameter) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaHyperParameter_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaHyperParameter_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaHyperParameter",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaHyperParameter_externalId(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaHyperParameter) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaHyperParameter_externalId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExternalID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaHyperParameter_externalId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaHyperParameter",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaHyperParameter_createTimeSinceEpoch(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaHyperParameter) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaHyperParameter_createTimeSinceEpoch(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateTimeSinceEpoch, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaHyperParameter_createTimeSinceEpoch(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaHyperParameter",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaHyperParameter_lastUpdateTimeSinceEpoch(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaHyperParameter) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaHyperParameter_lastUpdateTimeSinceEpoch(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastUpdateTimeSinceEpoch, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaHyperParameter_lastUpdateTimeSinceEpoch(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaHyperParameter",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaHyperParameter_type(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaHyperParameter) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaHyperParameter_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MlschemaHyperParameter().Type(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*graph.ArtifactType)
	fc.Result = res
	return ec.marshalNArtifactType2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐArtifactType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaHyperParameter_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaHyperParameter",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ArtifactType_id(ctx, field)
			case "name":
				return ec.fieldContext_ArtifactType_name(ctx, field)
			case "version":
				return ec.fieldContext_ArtifactType_version(ctx, field)
			case "typeKind":
				return ec.fieldContext_ArtifactType_typeKind(ctx, field)
			case "description":
				return ec.fieldContext_ArtifactType_description(ctx, field)
			case "externalId":
				return ec.fieldContext_ArtifactType_externalId(ctx, field)
			case "properties":
				return ec.fieldContext_ArtifactType_properties(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ArtifactType", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaHyperParameter_properties(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaHyperParameter) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaHyperParameter_properties(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Properties, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*graph.InstanceProperty)
	fc.Result = res
	return ec.marshalNInstanceProperty2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐInstancePropertyᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaHyperParameter_properties(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaHyperParameter",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_InstanceProperty_name(ctx, field)
			case "isCustomProperty":
				return ec.fieldContext_InstanceProperty_isCustomProperty(ctx, field)
			case "propertyValue":
				return ec.fieldContext_InstanceProperty_propertyValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type InstanceProperty", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaHyperParameter_attributions(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaHyperParameter) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaHyperParameter_attributions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MlschemaHyperParameter().Attributions(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*graph.Attribution)
	fc.Result = res
	return ec.marshalOAttribution2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐAttributionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaHyperParameter_attributions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaHyperParameter",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Attribution_id(ctx, field)
			case "contextId":
				return ec.fieldContext_Attribution_contextId(ctx, field)
			case "artifactId":
				return ec.fieldContext_Attribution_artifactId(ctx, field)
			case "context":
				return ec.fieldContext_Attribution_context(ctx, field)
			case "artifact":
				return ec.fieldContext_Attribution_artifact(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Attribution", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaHyperParameter_events(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaHyperParameter) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaHyperParameter_events(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MlschemaHyperParameter().Events(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*graph.Event)
	fc.Result = res
	return ec.marshalOEvent2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐEventᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaHyperParameter_events(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaHyperParameter",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Event_id(ctx, field)
			case "artifactId":
				return ec.fieldContext_Event_artifactId(ctx, field)
			case "executionId":
				return ec.fieldContext_Event_executionId(ctx, field)
			case "type":
				return ec.fieldContext_Event_type(ctx, field)
			case "path":
				return ec.fieldContext_Event_path(ctx, field)
			case "millisecondsSinceEpoch":
				return ec.fieldContext_Event_millisecondsSinceEpoch(ctx, field)
			case "artifact":
				return ec.fieldContext_Event_artifact(ctx, field)
			case "execution":
				return ec.fieldContext_Event_execution(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Event", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaHyperParameterSetting_id(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaHyperParameterSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaHyperParameterSetting_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaHyperParameterSetting_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaHyperParameterSetting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaHyperParameterSetting_typeId(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaHyperParameterSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaHyperParameterSetting_typeId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TypeID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaHyperParameterSetting_typeId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaHyperParameterSetting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaHyperParameterSetting_uri(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaHyperParameterSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaHyperParameterSetting_uri(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URI, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaHyperParameterSetting_uri(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaHyperParameterSetting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaHyperParameterSetting_state(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaHyperParameterSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaHyperParameterSetting_state(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.State, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*graph.ArtifactState)
	fc.Result = res
	return ec.marshalOArtifactState2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐArtifactState(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaHyperParameterSetting_state(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaHyperParameterSetting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ArtifactState does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaHyperParameterSetting_name(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaHyperParameterSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaHyperParameterSetting_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaHyperParameterSetting_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaHyperParameterSetting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaHyperParameterSetting_externalId(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaHyperParameterSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaHyperParameterSetting_externalId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExternalID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaHyperParameterSetting_externalId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaHyperParameterSetting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaHyperParameterSetting_createTimeSinceEpoch(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaHyperParameterSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaHyperParameterSetting_createTimeSinceEpoch(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateTimeSinceEpoch, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaHyperParameterSetting_createTimeSinceEpoch(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaHyperParameterSetting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaHyperParameterSetting_lastUpdateTimeSinceEpoch(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaHyperParameterSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaHyperParameterSetting_lastUpdateTimeSinceEpoch(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastUpdateTimeSinceEpoch, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaHyperParameterSetting_lastUpdateTimeSinceEpoch(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaHyperParameterSetting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaHyperParameterSetting_type(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaHyperParameterSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaHyperParameterSetting_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MlschemaHyperParameterSetting().Type(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*graph.ArtifactType)
	fc.Result = res
	return ec.marshalNArtifactType2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐArtifactType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaHyperParameterSetting_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaHyperParameterSetting",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ArtifactType_id(ctx, field)
			case "name":
				return ec.fieldContext_ArtifactType_name(ctx, field)
			case "version":
				return ec.fieldContext_ArtifactType_version(ctx, field)
			case "typeKind":
				return ec.fieldContext_ArtifactType_typeKind(ctx, field)
			case "description":
				return ec.fieldContext_ArtifactType_description(ctx, field)
			case "externalId":
				return ec.fieldContext_ArtifactType_externalId(ctx, field)
			case "properties":
				return ec.fieldContext_ArtifactType_properties(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ArtifactType", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaHyperParameterSetting_properties(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaHyperParameterSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaHyperParameterSetting_properties(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Properties, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*graph.InstanceProperty)
	fc.Result = res
	return ec.marshalNInstanceProperty2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐInstancePropertyᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaHyperParameterSetting_properties(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaHyperParameterSetting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_InstanceProperty_name(ctx, field)
			case "isCustomProperty":
				return ec.fieldContext_InstanceProperty_isCustomProperty(ctx, field)
			case "propertyValue":
				return ec.fieldContext_InstanceProperty_propertyValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type InstanceProperty", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaHyperParameterSetting_attributions(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaHyperParameterSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaHyperParameterSetting_attributions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MlschemaHyperParameterSetting().Attributions(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*graph.Attribution)
	fc.Result = res
	return ec.marshalOAttribution2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐAttributionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaHyperParameterSetting_attributions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaHyperParameterSetting",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Attribution_id(ctx, field)
			case "contextId":
				return ec.fieldContext_Attribution_contextId(ctx, field)
			case "artifactId":
				return ec.fieldContext_Attribution_artifactId(ctx, field)
			case "context":
				return ec.fieldContext_Attribution_context(ctx, field)
			case "artifact":
				return ec.fieldContext_Attribution_artifact(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Attribution", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaHyperParameterSetting_events(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaHyperParameterSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaHyperParameterSetting_events(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MlschemaHyperParameterSetting().Events(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*graph.Event)
	fc.Result = res
	return ec.marshalOEvent2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐEventᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaHyperParameterSetting_events(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaHyperParameterSetting",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Event_id(ctx, field)
			case "artifactId":
				return ec.fieldContext_Event_artifactId(ctx, field)
			case "executionId":
				return ec.fieldContext_Event_executionId(ctx, field)
			case "type":
				return ec.fieldContext_Event_type(ctx, field)
			case "path":
				return ec.fieldContext_Event_path(ctx, field)
			case "millisecondsSinceEpoch":
				return ec.fieldContext_Event_millisecondsSinceEpoch(ctx, field)
			case "artifact":
				return ec.fieldContext_Event_artifact(ctx, field)
			case "execution":
				return ec.fieldContext_Event_execution(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Event", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaImplementation_id(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaImplementation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaImplementation_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaImplementation_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaImplementation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaImplementation_typeId(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaImplementation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaImplementation_typeId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TypeID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaImplementation_typeId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaImplementation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaImplementation_uri(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaImplementation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaImplementation_uri(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URI, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaImplementation_uri(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaImplementation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaImplementation_state(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaImplementation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaImplementation_state(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.State, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*graph.ArtifactState)
	fc.Result = res
	return ec.marshalOArtifactState2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐArtifactState(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaImplementation_state(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaImplementation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ArtifactState does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaImplementation_name(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaImplementation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaImplementation_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaImplementation_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaImplementation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaImplementation_externalId(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaImplementation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaImplementation_externalId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExternalID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaImplementation_externalId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaImplementation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaImplementation_createTimeSinceEpoch(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaImplementation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaImplementation_createTimeSinceEpoch(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateTimeSinceEpoch, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaImplementation_createTimeSinceEpoch(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaImplementation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaImplementation_lastUpdateTimeSinceEpoch(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaImplementation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaImplementation_lastUpdateTimeSinceEpoch(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastUpdateTimeSinceEpoch, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaImplementation_lastUpdateTimeSinceEpoch(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaImplementation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaImplementation_type(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaImplementation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaImplementation_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MlschemaImplementation().Type(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*graph.ArtifactType)
	fc.Result = res
	return ec.marshalNArtifactType2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐArtifactType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaImplementation_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaImplementation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ArtifactType_id(ctx, field)
			case "name":
				return ec.fieldContext_ArtifactType_name(ctx, field)
			case "version":
				return ec.fieldContext_ArtifactType_version(ctx, field)
			case "typeKind":
				return ec.fieldContext_ArtifactType_typeKind(ctx, field)
			case "description":
				return ec.fieldContext_ArtifactType_description(ctx, field)
			case "externalId":
				return ec.fieldContext_ArtifactType_externalId(ctx, field)
			case "properties":
				return ec.fieldContext_ArtifactType_properties(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ArtifactType", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaImplementation_properties(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaImplementation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaImplementation_properties(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Properties, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*graph.InstanceProperty)
	fc.Result = res
	return ec.marshalNInstanceProperty2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐInstancePropertyᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaImplementation_properties(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaImplementation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_InstanceProperty_name(ctx, field)
			case "isCustomProperty":
				return ec.fieldContext_InstanceProperty_isCustomProperty(ctx, field)
			case "propertyValue":
				return ec.fieldContext_InstanceProperty_propertyValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type InstanceProperty", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaImplementation_attributions(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaImplementation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaImplementation_attributions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MlschemaImplementation().Attributions(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*graph.Attribution)
	fc.Result = res
	return ec.marshalOAttribution2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐAttributionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaImplementation_attributions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaImplementation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Attribution_id(ctx, field)
			case "contextId":
				return ec.fieldContext_Attribution_contextId(ctx, field)
			case "artifactId":
				return ec.fieldContext_Attribution_artifactId(ctx, field)
			case "context":
				return ec.fieldContext_Attribution_context(ctx, field)
			case "artifact":
				return ec.fieldContext_Attribution_artifact(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Attribution", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaImplementation_events(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaImplementation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaImplementation_events(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MlschemaImplementation().Events(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*graph.Event)
	fc.Result = res
	return ec.marshalOEvent2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐEventᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaImplementation_events(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaImplementation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Event_id(ctx, field)
			case "artifactId":
				return ec.fieldContext_Event_artifactId(ctx, field)
			case "executionId":
				return ec.fieldContext_Event_executionId(ctx, field)
			case "type":
				return ec.fieldContext_Event_type(ctx, field)
			case "path":
				return ec.fieldContext_Event_path(ctx, field)
			case "millisecondsSinceEpoch":
				return ec.fieldContext_Event_millisecondsSinceEpoch(ctx, field)
			case "artifact":
				return ec.fieldContext_Event_artifact(ctx, field)
			case "execution":
				return ec.fieldContext_Event_execution(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Event", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaImplementationCharacteristic_id(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaImplementationCharacteristic) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaImplementationCharacteristic_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaImplementationCharacteristic_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaImplementationCharacteristic",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaImplementationCharacteristic_typeId(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaImplementationCharacteristic) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaImplementationCharacteristic_typeId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TypeID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaImplementationCharacteristic_typeId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaImplementationCharacteristic",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaImplementationCharacteristic_uri(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaImplementationCharacteristic) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaImplementationCharacteristic_uri(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URI, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaImplementationCharacteristic_uri(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaImplementationCharacteristic",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaImplementationCharacteristic_state(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaImplementationCharacteristic) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaImplementationCharacteristic_state(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.State, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*graph.ArtifactState)
	fc.Result = res
	return ec.marshalOArtifactState2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐArtifactState(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaImplementationCharacteristic_state(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaImplementationCharacteristic",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ArtifactState does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaImplementationCharacteristic_name(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaImplementationCharacteristic) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaImplementationCharacteristic_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaImplementationCharacteristic_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaImplementationCharacteristic",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaImplementationCharacteristic_externalId(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaImplementationCharacteristic) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaImplementationCharacteristic_externalId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExternalID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaImplementationCharacteristic_externalId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaImplementationCharacteristic",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaImplementationCharacteristic_createTimeSinceEpoch(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaImplementationCharacteristic) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaImplementationCharacteristic_createTimeSinceEpoch(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateTimeSinceEpoch, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaImplementationCharacteristic_createTimeSinceEpoch(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaImplementationCharacteristic",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaImplementationCharacteristic_lastUpdateTimeSinceEpoch(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaImplementationCharacteristic) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaImplementationCharacteristic_lastUpdateTimeSinceEpoch(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastUpdateTimeSinceEpoch, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaImplementationCharacteristic_lastUpdateTimeSinceEpoch(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaImplementationCharacteristic",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaImplementationCharacteristic_type(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaImplementationCharacteristic) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaImplementationCharacteristic_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MlschemaImplementationCharacteristic().Type(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*graph.ArtifactType)
	fc.Result = res
	return ec.marshalNArtifactType2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐArtifactType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaImplementationCharacteristic_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaImplementationCharacteristic",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ArtifactType_id(ctx, field)
			case "name":
				return ec.fieldContext_ArtifactType_name(ctx, field)
			case "version":
				return ec.fieldContext_ArtifactType_version(ctx, field)
			case "typeKind":
				return ec.fieldContext_ArtifactType_typeKind(ctx, field)
			case "description":
				return ec.fieldContext_ArtifactType_description(ctx, field)
			case "externalId":
				return ec.fieldContext_ArtifactType_externalId(ctx, field)
			case "properties":
				return ec.fieldContext_ArtifactType_properties(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ArtifactType", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaImplementationCharacteristic_properties(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaImplementationCharacteristic) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaImplementationCharacteristic_properties(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Properties, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*graph.InstanceProperty)
	fc.Result = res
	return ec.marshalNInstanceProperty2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐInstancePropertyᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaImplementationCharacteristic_properties(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaImplementationCharacteristic",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_InstanceProperty_name(ctx, field)
			case "isCustomProperty":
				return ec.fieldContext_InstanceProperty_isCustomProperty(ctx, field)
			case "propertyValue":
				return ec.fieldContext_InstanceProperty_propertyValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type InstanceProperty", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaImplementationCharacteristic_attributions(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaImplementationCharacteristic) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaImplementationCharacteristic_attributions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MlschemaImplementationCharacteristic().Attributions(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*graph.Attribution)
	fc.Result = res
	return ec.marshalOAttribution2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐAttributionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaImplementationCharacteristic_attributions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaImplementationCharacteristic",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Attribution_id(ctx, field)
			case "contextId":
				return ec.fieldContext_Attribution_contextId(ctx, field)
			case "artifactId":
				return ec.fieldContext_Attribution_artifactId(ctx, field)
			case "context":
				return ec.fieldContext_Attribution_context(ctx, field)
			case "artifact":
				return ec.fieldContext_Attribution_artifact(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Attribution", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaImplementationCharacteristic_events(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaImplementationCharacteristic) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaImplementationCharacteristic_events(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MlschemaImplementationCharacteristic().Events(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*graph.Event)
	fc.Result = res
	return ec.marshalOEvent2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐEventᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaImplementationCharacteristic_events(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaImplementationCharacteristic",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Event_id(ctx, field)
			case "artifactId":
				return ec.fieldContext_Event_artifactId(ctx, field)
			case "executionId":
				return ec.fieldContext_Event_executionId(ctx, field)
			case "type":
				return ec.fieldContext_Event_type(ctx, field)
			case "path":
				return ec.fieldContext_Event_path(ctx, field)
			case "millisecondsSinceEpoch":
				return ec.fieldContext_Event_millisecondsSinceEpoch(ctx, field)
			case "artifact":
				return ec.fieldContext_Event_artifact(ctx, field)
			case "execution":
				return ec.fieldContext_Event_execution(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Event", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaModel_id(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaModel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaModel_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaModel_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaModel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaModel_typeId(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaModel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaModel_typeId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TypeID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaModel_typeId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaModel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaModel_uri(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaModel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaModel_uri(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URI, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaModel_uri(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaModel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaModel_state(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaModel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaModel_state(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.State, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*graph.ArtifactState)
	fc.Result = res
	return ec.marshalOArtifactState2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐArtifactState(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaModel_state(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaModel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ArtifactState does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaModel_name(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaModel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaModel_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaModel_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaModel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaModel_externalId(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaModel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaModel_externalId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExternalID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaModel_externalId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaModel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaModel_createTimeSinceEpoch(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaModel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaModel_createTimeSinceEpoch(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateTimeSinceEpoch, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaModel_createTimeSinceEpoch(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaModel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaModel_lastUpdateTimeSinceEpoch(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaModel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaModel_lastUpdateTimeSinceEpoch(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastUpdateTimeSinceEpoch, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaModel_lastUpdateTimeSinceEpoch(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaModel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaModel_type(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaModel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaModel_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MlschemaModel().Type(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*graph.ArtifactType)
	fc.Result = res
	return ec.marshalNArtifactType2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐArtifactType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaModel_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaModel",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ArtifactType_id(ctx, field)
			case "name":
				return ec.fieldContext_ArtifactType_name(ctx, field)
			case "version":
				return ec.fieldContext_ArtifactType_version(ctx, field)
			case "typeKind":
				return ec.fieldContext_ArtifactType_typeKind(ctx, field)
			case "description":
				return ec.fieldContext_ArtifactType_description(ctx, field)
			case "externalId":
				return ec.fieldContext_ArtifactType_externalId(ctx, field)
			case "properties":
				return ec.fieldContext_ArtifactType_properties(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ArtifactType", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaModel_properties(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaModel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaModel_properties(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Properties, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*graph.InstanceProperty)
	fc.Result = res
	return ec.marshalNInstanceProperty2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐInstancePropertyᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaModel_properties(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaModel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_InstanceProperty_name(ctx, field)
			case "isCustomProperty":
				return ec.fieldContext_InstanceProperty_isCustomProperty(ctx, field)
			case "propertyValue":
				return ec.fieldContext_InstanceProperty_propertyValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type InstanceProperty", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaModel_attributions(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaModel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaModel_attributions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MlschemaModel().Attributions(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*graph.Attribution)
	fc.Result = res
	return ec.marshalOAttribution2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐAttributionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaModel_attributions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaModel",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Attribution_id(ctx, field)
			case "contextId":
				return ec.fieldContext_Attribution_contextId(ctx, field)
			case "artifactId":
				return ec.fieldContext_Attribution_artifactId(ctx, field)
			case "context":
				return ec.fieldContext_Attribution_context(ctx, field)
			case "artifact":
				return ec.fieldContext_Attribution_artifact(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Attribution", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaModel_events(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaModel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaModel_events(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MlschemaModel().Events(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*graph.Event)
	fc.Result = res
	return ec.marshalOEvent2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐEventᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaModel_events(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaModel",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Event_id(ctx, field)
			case "artifactId":
				return ec.fieldContext_Event_artifactId(ctx, field)
			case "executionId":
				return ec.fieldContext_Event_executionId(ctx, field)
			case "type":
				return ec.fieldContext_Event_type(ctx, field)
			case "path":
				return ec.fieldContext_Event_path(ctx, field)
			case "millisecondsSinceEpoch":
				return ec.fieldContext_Event_millisecondsSinceEpoch(ctx, field)
			case "artifact":
				return ec.fieldContext_Event_artifact(ctx, field)
			case "execution":
				return ec.fieldContext_Event_execution(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Event", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaModelEvaluation_id(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaModelEvaluation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaModelEvaluation_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaModelEvaluation_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaModelEvaluation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaModelEvaluation_typeId(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaModelEvaluation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaModelEvaluation_typeId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TypeID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaModelEvaluation_typeId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaModelEvaluation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaModelEvaluation_uri(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaModelEvaluation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaModelEvaluation_uri(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URI, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaModelEvaluation_uri(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaModelEvaluation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaModelEvaluation_state(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaModelEvaluation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaModelEvaluation_state(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.State, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*graph.ArtifactState)
	fc.Result = res
	return ec.marshalOArtifactState2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐArtifactState(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaModelEvaluation_state(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaModelEvaluation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ArtifactState does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaModelEvaluation_name(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaModelEvaluation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaModelEvaluation_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaModelEvaluation_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaModelEvaluation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaModelEvaluation_externalId(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaModelEvaluation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaModelEvaluation_externalId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExternalID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaModelEvaluation_externalId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaModelEvaluation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaModelEvaluation_createTimeSinceEpoch(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaModelEvaluation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaModelEvaluation_createTimeSinceEpoch(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateTimeSinceEpoch, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaModelEvaluation_createTimeSinceEpoch(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaModelEvaluation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaModelEvaluation_lastUpdateTimeSinceEpoch(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaModelEvaluation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaModelEvaluation_lastUpdateTimeSinceEpoch(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastUpdateTimeSinceEpoch, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaModelEvaluation_lastUpdateTimeSinceEpoch(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaModelEvaluation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaModelEvaluation_type(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaModelEvaluation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaModelEvaluation_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MlschemaModelEvaluation().Type(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*graph.ArtifactType)
	fc.Result = res
	return ec.marshalNArtifactType2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐArtifactType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaModelEvaluation_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaModelEvaluation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ArtifactType_id(ctx, field)
			case "name":
				return ec.fieldContext_ArtifactType_name(ctx, field)
			case "version":
				return ec.fieldContext_ArtifactType_version(ctx, field)
			case "typeKind":
				return ec.fieldContext_ArtifactType_typeKind(ctx, field)
			case "description":
				return ec.fieldContext_ArtifactType_description(ctx, field)
			case "externalId":
				return ec.fieldContext_ArtifactType_externalId(ctx, field)
			case "properties":
				return ec.fieldContext_ArtifactType_properties(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ArtifactType", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaModelEvaluation_properties(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaModelEvaluation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaModelEvaluation_properties(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Properties, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*graph.InstanceProperty)
	fc.Result = res
	return ec.marshalNInstanceProperty2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐInstancePropertyᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaModelEvaluation_properties(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaModelEvaluation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_InstanceProperty_name(ctx, field)
			case "isCustomProperty":
				return ec.fieldContext_InstanceProperty_isCustomProperty(ctx, field)
			case "propertyValue":
				return ec.fieldContext_InstanceProperty_propertyValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type InstanceProperty", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaModelEvaluation_attributions(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaModelEvaluation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaModelEvaluation_attributions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MlschemaModelEvaluation().Attributions(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*graph.Attribution)
	fc.Result = res
	return ec.marshalOAttribution2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐAttributionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaModelEvaluation_attributions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaModelEvaluation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Attribution_id(ctx, field)
			case "contextId":
				return ec.fieldContext_Attribution_contextId(ctx, field)
			case "artifactId":
				return ec.fieldContext_Attribution_artifactId(ctx, field)
			case "context":
				return ec.fieldContext_Attribution_context(ctx, field)
			case "artifact":
				return ec.fieldContext_Attribution_artifact(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Attribution", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaModelEvaluation_events(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaModelEvaluation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaModelEvaluation_events(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MlschemaModelEvaluation().Events(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*graph.Event)
	fc.Result = res
	return ec.marshalOEvent2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐEventᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaModelEvaluation_events(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaModelEvaluation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Event_id(ctx, field)
			case "artifactId":
				return ec.fieldContext_Event_artifactId(ctx, field)
			case "executionId":
				return ec.fieldContext_Event_executionId(ctx, field)
			case "type":
				return ec.fieldContext_Event_type(ctx, field)
			case "path":
				return ec.fieldContext_Event_path(ctx, field)
			case "millisecondsSinceEpoch":
				return ec.fieldContext_Event_millisecondsSinceEpoch(ctx, field)
			case "artifact":
				return ec.fieldContext_Event_artifact(ctx, field)
			case "execution":
				return ec.fieldContext_Event_execution(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Event", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaModelVersion_id(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaModelVersion) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaModelVersion_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaModelVersion_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaModelVersion",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaModelVersion_typeId(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaModelVersion) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaModelVersion_typeId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TypeID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaModelVersion_typeId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaModelVersion",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaModelVersion_name(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaModelVersion) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaModelVersion_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaModelVersion_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaModelVersion",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaModelVersion_externalId(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaModelVersion) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaModelVersion_externalId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExternalID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaModelVersion_externalId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaModelVersion",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaModelVersion_createTimeSinceEpoch(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaModelVersion) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaModelVersion_createTimeSinceEpoch(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateTimeSinceEpoch, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaModelVersion_createTimeSinceEpoch(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaModelVersion",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaModelVersion_lastUpdateTimeSinceEpoch(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaModelVersion) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaModelVersion_lastUpdateTimeSinceEpoch(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastUpdateTimeSinceEpoch, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaModelVersion_lastUpdateTimeSinceEpoch(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaModelVersion",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaModelVersion_type(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaModelVersion) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaModelVersion_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MlschemaModelVersion().Type(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*graph.ContextType)
	fc.Result = res
	return ec.marshalNContextType2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐContextType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaModelVersion_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaModelVersion",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ContextType_id(ctx, field)
			case "name":
				return ec.fieldContext_ContextType_name(ctx, field)
			case "version":
				return ec.fieldContext_ContextType_version(ctx, field)
			case "typeKind":
				return ec.fieldContext_ContextType_typeKind(ctx, field)
			case "description":
				return ec.fieldContext_ContextType_description(ctx, field)
			case "externalId":
				return ec.fieldContext_ContextType_externalId(ctx, field)
			case "properties":
				return ec.fieldContext_ContextType_properties(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ContextType", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaModelVersion_properties(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaModelVersion) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaModelVersion_properties(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Properties, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*graph.InstanceProperty)
	fc.Result = res
	return ec.marshalNInstanceProperty2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐInstancePropertyᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaModelVersion_properties(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaModelVersion",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_InstanceProperty_name(ctx, field)
			case "isCustomProperty":
				return ec.fieldContext_InstanceProperty_isCustomProperty(ctx, field)
			case "propertyValue":
				return ec.fieldContext_InstanceProperty_propertyValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type InstanceProperty", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaModelVersion_parents(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaModelVersion) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaModelVersion_parents(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MlschemaModelVersion().Parents(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]graph.ContextInterface)
	fc.Result = res
	return ec.marshalOContextInterface2ᚕgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐContextInterfaceᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaModelVersion_parents(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaModelVersion",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("FieldContext.Child cannot be called on type INTERFACE")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaModelVersion_children(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaModelVersion) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaModelVersion_children(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MlschemaModelVersion().Children(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]graph.ContextInterface)
	fc.Result = res
	return ec.marshalOContextInterface2ᚕgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐContextInterfaceᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaModelVersion_children(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaModelVersion",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("FieldContext.Child cannot be called on type INTERFACE")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaModelVersion_attributions(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaModelVersion) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaModelVersion_attributions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MlschemaModelVersion().Attributions(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*graph.Attribution)
	fc.Result = res
	return ec.marshalOAttribution2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐAttributionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaModelVersion_attributions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaModelVersion",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Attribution_id(ctx, field)
			case "contextId":
				return ec.fieldContext_Attribution_contextId(ctx, field)
			case "artifactId":
				return ec.fieldContext_Attribution_artifactId(ctx, field)
			case "context":
				return ec.fieldContext_Attribution_context(ctx, field)
			case "artifact":
				return ec.fieldContext_Attribution_artifact(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Attribution", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaModelVersion_associations(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaModelVersion) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaModelVersion_associations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MlschemaModelVersion().Associations(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*graph.Association)
	fc.Result = res
	return ec.marshalOAssociation2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐAssociationᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaModelVersion_associations(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaModelVersion",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Association_id(ctx, field)
			case "contextId":
				return ec.fieldContext_Association_contextId(ctx, field)
			case "executionId":
				return ec.fieldContext_Association_executionId(ctx, field)
			case "context":
				return ec.fieldContext_Association_context(ctx, field)
			case "execution":
				return ec.fieldContext_Association_execution(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Association", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaRegisteredModel_id(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaRegisteredModel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaRegisteredModel_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaRegisteredModel_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaRegisteredModel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaRegisteredModel_typeId(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaRegisteredModel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaRegisteredModel_typeId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TypeID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaRegisteredModel_typeId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaRegisteredModel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaRegisteredModel_name(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaRegisteredModel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaRegisteredModel_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaRegisteredModel_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaRegisteredModel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaRegisteredModel_externalId(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaRegisteredModel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaRegisteredModel_externalId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExternalID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaRegisteredModel_externalId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaRegisteredModel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaRegisteredModel_createTimeSinceEpoch(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaRegisteredModel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaRegisteredModel_createTimeSinceEpoch(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateTimeSinceEpoch, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaRegisteredModel_createTimeSinceEpoch(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaRegisteredModel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaRegisteredModel_lastUpdateTimeSinceEpoch(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaRegisteredModel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaRegisteredModel_lastUpdateTimeSinceEpoch(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastUpdateTimeSinceEpoch, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaRegisteredModel_lastUpdateTimeSinceEpoch(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaRegisteredModel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaRegisteredModel_type(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaRegisteredModel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaRegisteredModel_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MlschemaRegisteredModel().Type(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*graph.ContextType)
	fc.Result = res
	return ec.marshalNContextType2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐContextType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaRegisteredModel_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaRegisteredModel",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ContextType_id(ctx, field)
			case "name":
				return ec.fieldContext_ContextType_name(ctx, field)
			case "version":
				return ec.fieldContext_ContextType_version(ctx, field)
			case "typeKind":
				return ec.fieldContext_ContextType_typeKind(ctx, field)
			case "description":
				return ec.fieldContext_ContextType_description(ctx, field)
			case "externalId":
				return ec.fieldContext_ContextType_externalId(ctx, field)
			case "properties":
				return ec.fieldContext_ContextType_properties(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ContextType", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaRegisteredModel_properties(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaRegisteredModel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaRegisteredModel_properties(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Properties, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*graph.InstanceProperty)
	fc.Result = res
	return ec.marshalNInstanceProperty2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐInstancePropertyᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaRegisteredModel_properties(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaRegisteredModel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_InstanceProperty_name(ctx, field)
			case "isCustomProperty":
				return ec.fieldContext_InstanceProperty_isCustomProperty(ctx, field)
			case "propertyValue":
				return ec.fieldContext_InstanceProperty_propertyValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type InstanceProperty", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaRegisteredModel_parents(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaRegisteredModel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaRegisteredModel_parents(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MlschemaRegisteredModel().Parents(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]graph.ContextInterface)
	fc.Result = res
	return ec.marshalOContextInterface2ᚕgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐContextInterfaceᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaRegisteredModel_parents(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaRegisteredModel",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("FieldContext.Child cannot be called on type INTERFACE")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaRegisteredModel_children(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaRegisteredModel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaRegisteredModel_children(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MlschemaRegisteredModel().Children(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]graph.ContextInterface)
	fc.Result = res
	return ec.marshalOContextInterface2ᚕgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐContextInterfaceᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaRegisteredModel_children(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaRegisteredModel",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("FieldContext.Child cannot be called on type INTERFACE")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaRegisteredModel_attributions(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaRegisteredModel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaRegisteredModel_attributions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MlschemaRegisteredModel().Attributions(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*graph.Attribution)
	fc.Result = res
	return ec.marshalOAttribution2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐAttributionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaRegisteredModel_attributions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaRegisteredModel",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Attribution_id(ctx, field)
			case "contextId":
				return ec.fieldContext_Attribution_contextId(ctx, field)
			case "artifactId":
				return ec.fieldContext_Attribution_artifactId(ctx, field)
			case "context":
				return ec.fieldContext_Attribution_context(ctx, field)
			case "artifact":
				return ec.fieldContext_Attribution_artifact(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Attribution", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaRegisteredModel_associations(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaRegisteredModel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaRegisteredModel_associations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MlschemaRegisteredModel().Associations(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*graph.Association)
	fc.Result = res
	return ec.marshalOAssociation2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐAssociationᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaRegisteredModel_associations(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaRegisteredModel",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Association_id(ctx, field)
			case "contextId":
				return ec.fieldContext_Association_contextId(ctx, field)
			case "executionId":
				return ec.fieldContext_Association_executionId(ctx, field)
			case "context":
				return ec.fieldContext_Association_context(ctx, field)
			case "execution":
				return ec.fieldContext_Association_execution(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Association", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaRun_id(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaRun) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaRun_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaRun_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaRun",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaRun_typeId(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaRun) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaRun_typeId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TypeID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaRun_typeId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaRun",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaRun_lastKnownState(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaRun) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaRun_lastKnownState(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastKnownState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*graph.ExecutionState)
	fc.Result = res
	return ec.marshalOExecutionState2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐExecutionState(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaRun_lastKnownState(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaRun",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ExecutionState does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaRun_name(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaRun) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaRun_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaRun_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaRun",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaRun_externalId(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaRun) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaRun_externalId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExternalID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaRun_externalId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaRun",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaRun_createTimeSinceEpoch(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaRun) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaRun_createTimeSinceEpoch(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateTimeSinceEpoch, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaRun_createTimeSinceEpoch(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaRun",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaRun_lastUpdateTimeSinceEpoch(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaRun) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaRun_lastUpdateTimeSinceEpoch(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastUpdateTimeSinceEpoch, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaRun_lastUpdateTimeSinceEpoch(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaRun",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaRun_type(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaRun) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaRun_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MlschemaRun().Type(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*graph.ExecutionType)
	fc.Result = res
	return ec.marshalNExecutionType2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐExecutionType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaRun_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaRun",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ExecutionType_id(ctx, field)
			case "name":
				return ec.fieldContext_ExecutionType_name(ctx, field)
			case "version":
				return ec.fieldContext_ExecutionType_version(ctx, field)
			case "typeKind":
				return ec.fieldContext_ExecutionType_typeKind(ctx, field)
			case "description":
				return ec.fieldContext_ExecutionType_description(ctx, field)
			case "externalId":
				return ec.fieldContext_ExecutionType_externalId(ctx, field)
			case "inputType":
				return ec.fieldContext_ExecutionType_inputType(ctx, field)
			case "outputType":
				return ec.fieldContext_ExecutionType_outputType(ctx, field)
			case "properties":
				return ec.fieldContext_ExecutionType_properties(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ExecutionType", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaRun_properties(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaRun) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaRun_properties(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Properties, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*graph.InstanceProperty)
	fc.Result = res
	return ec.marshalNInstanceProperty2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐInstancePropertyᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaRun_properties(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaRun",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_InstanceProperty_name(ctx, field)
			case "isCustomProperty":
				return ec.fieldContext_InstanceProperty_isCustomProperty(ctx, field)
			case "propertyValue":
				return ec.fieldContext_InstanceProperty_propertyValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type InstanceProperty", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaRun_associations(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaRun) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaRun_associations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MlschemaRun().Associations(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*graph.Association)
	fc.Result = res
	return ec.marshalOAssociation2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐAssociationᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaRun_associations(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaRun",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Association_id(ctx, field)
			case "contextId":
				return ec.fieldContext_Association_contextId(ctx, field)
			case "executionId":
				return ec.fieldContext_Association_executionId(ctx, field)
			case "context":
				return ec.fieldContext_Association_context(ctx, field)
			case "execution":
				return ec.fieldContext_Association_execution(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Association", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaRun_events(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaRun) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaRun_events(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MlschemaRun().Events(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*graph.Event)
	fc.Result = res
	return ec.marshalOEvent2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐEventᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaRun_events(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaRun",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Event_id(ctx, field)
			case "artifactId":
				return ec.fieldContext_Event_artifactId(ctx, field)
			case "executionId":
				return ec.fieldContext_Event_executionId(ctx, field)
			case "type":
				return ec.fieldContext_Event_type(ctx, field)
			case "path":
				return ec.fieldContext_Event_path(ctx, field)
			case "millisecondsSinceEpoch":
				return ec.fieldContext_Event_millisecondsSinceEpoch(ctx, field)
			case "artifact":
				return ec.fieldContext_Event_artifact(ctx, field)
			case "execution":
				return ec.fieldContext_Event_execution(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Event", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaSoftware_id(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaSoftware) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaSoftware_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaSoftware_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaSoftware",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaSoftware_typeId(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaSoftware) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaSoftware_typeId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TypeID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaSoftware_typeId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaSoftware",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaSoftware_uri(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaSoftware) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaSoftware_uri(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URI, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaSoftware_uri(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaSoftware",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaSoftware_state(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaSoftware) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaSoftware_state(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.State, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*graph.ArtifactState)
	fc.Result = res
	return ec.marshalOArtifactState2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐArtifactState(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaSoftware_state(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaSoftware",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ArtifactState does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaSoftware_name(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaSoftware) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaSoftware_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaSoftware_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaSoftware",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaSoftware_externalId(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaSoftware) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaSoftware_externalId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExternalID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaSoftware_externalId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaSoftware",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaSoftware_createTimeSinceEpoch(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaSoftware) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaSoftware_createTimeSinceEpoch(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateTimeSinceEpoch, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaSoftware_createTimeSinceEpoch(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaSoftware",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaSoftware_lastUpdateTimeSinceEpoch(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaSoftware) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaSoftware_lastUpdateTimeSinceEpoch(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastUpdateTimeSinceEpoch, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaSoftware_lastUpdateTimeSinceEpoch(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaSoftware",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaSoftware_type(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaSoftware) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaSoftware_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MlschemaSoftware().Type(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*graph.ArtifactType)
	fc.Result = res
	return ec.marshalNArtifactType2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐArtifactType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaSoftware_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaSoftware",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ArtifactType_id(ctx, field)
			case "name":
				return ec.fieldContext_ArtifactType_name(ctx, field)
			case "version":
				return ec.fieldContext_ArtifactType_version(ctx, field)
			case "typeKind":
				return ec.fieldContext_ArtifactType_typeKind(ctx, field)
			case "description":
				return ec.fieldContext_ArtifactType_description(ctx, field)
			case "externalId":
				return ec.fieldContext_ArtifactType_externalId(ctx, field)
			case "properties":
				return ec.fieldContext_ArtifactType_properties(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ArtifactType", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaSoftware_properties(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaSoftware) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaSoftware_properties(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Properties, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*graph.InstanceProperty)
	fc.Result = res
	return ec.marshalNInstanceProperty2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐInstancePropertyᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaSoftware_properties(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaSoftware",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_InstanceProperty_name(ctx, field)
			case "isCustomProperty":
				return ec.fieldContext_InstanceProperty_isCustomProperty(ctx, field)
			case "propertyValue":
				return ec.fieldContext_InstanceProperty_propertyValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type InstanceProperty", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaSoftware_attributions(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaSoftware) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaSoftware_attributions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MlschemaSoftware().Attributions(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*graph.Attribution)
	fc.Result = res
	return ec.marshalOAttribution2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐAttributionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaSoftware_attributions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaSoftware",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Attribution_id(ctx, field)
			case "contextId":
				return ec.fieldContext_Attribution_contextId(ctx, field)
			case "artifactId":
				return ec.fieldContext_Attribution_artifactId(ctx, field)
			case "context":
				return ec.fieldContext_Attribution_context(ctx, field)
			case "artifact":
				return ec.fieldContext_Attribution_artifact(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Attribution", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaSoftware_events(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaSoftware) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaSoftware_events(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MlschemaSoftware().Events(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*graph.Event)
	fc.Result = res
	return ec.marshalOEvent2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐEventᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaSoftware_events(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaSoftware",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Event_id(ctx, field)
			case "artifactId":
				return ec.fieldContext_Event_artifactId(ctx, field)
			case "executionId":
				return ec.fieldContext_Event_executionId(ctx, field)
			case "type":
				return ec.fieldContext_Event_type(ctx, field)
			case "path":
				return ec.fieldContext_Event_path(ctx, field)
			case "millisecondsSinceEpoch":
				return ec.fieldContext_Event_millisecondsSinceEpoch(ctx, field)
			case "artifact":
				return ec.fieldContext_Event_artifact(ctx, field)
			case "execution":
				return ec.fieldContext_Event_execution(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Event", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaStudy_id(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaStudy) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaStudy_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaStudy_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaStudy",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaStudy_typeId(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaStudy) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaStudy_typeId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TypeID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaStudy_typeId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaStudy",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaStudy_lastKnownState(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaStudy) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaStudy_lastKnownState(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastKnownState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*graph.ExecutionState)
	fc.Result = res
	return ec.marshalOExecutionState2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐExecutionState(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaStudy_lastKnownState(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaStudy",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ExecutionState does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaStudy_name(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaStudy) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaStudy_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaStudy_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaStudy",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaStudy_externalId(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaStudy) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaStudy_externalId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExternalID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaStudy_externalId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaStudy",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaStudy_createTimeSinceEpoch(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaStudy) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaStudy_createTimeSinceEpoch(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateTimeSinceEpoch, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaStudy_createTimeSinceEpoch(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaStudy",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaStudy_lastUpdateTimeSinceEpoch(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaStudy) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaStudy_lastUpdateTimeSinceEpoch(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastUpdateTimeSinceEpoch, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaStudy_lastUpdateTimeSinceEpoch(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaStudy",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaStudy_type(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaStudy) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaStudy_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MlschemaStudy().Type(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*graph.ExecutionType)
	fc.Result = res
	return ec.marshalNExecutionType2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐExecutionType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaStudy_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaStudy",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ExecutionType_id(ctx, field)
			case "name":
				return ec.fieldContext_ExecutionType_name(ctx, field)
			case "version":
				return ec.fieldContext_ExecutionType_version(ctx, field)
			case "typeKind":
				return ec.fieldContext_ExecutionType_typeKind(ctx, field)
			case "description":
				return ec.fieldContext_ExecutionType_description(ctx, field)
			case "externalId":
				return ec.fieldContext_ExecutionType_externalId(ctx, field)
			case "inputType":
				return ec.fieldContext_ExecutionType_inputType(ctx, field)
			case "outputType":
				return ec.fieldContext_ExecutionType_outputType(ctx, field)
			case "properties":
				return ec.fieldContext_ExecutionType_properties(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ExecutionType", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaStudy_properties(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaStudy) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaStudy_properties(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Properties, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*graph.InstanceProperty)
	fc.Result = res
	return ec.marshalNInstanceProperty2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐInstancePropertyᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaStudy_properties(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaStudy",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_InstanceProperty_name(ctx, field)
			case "isCustomProperty":
				return ec.fieldContext_InstanceProperty_isCustomProperty(ctx, field)
			case "propertyValue":
				return ec.fieldContext_InstanceProperty_propertyValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type InstanceProperty", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaStudy_associations(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaStudy) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaStudy_associations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MlschemaStudy().Associations(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*graph.Association)
	fc.Result = res
	return ec.marshalOAssociation2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐAssociationᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaStudy_associations(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaStudy",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Association_id(ctx, field)
			case "contextId":
				return ec.fieldContext_Association_contextId(ctx, field)
			case "executionId":
				return ec.fieldContext_Association_executionId(ctx, field)
			case "context":
				return ec.fieldContext_Association_context(ctx, field)
			case "execution":
				return ec.fieldContext_Association_execution(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Association", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaStudy_events(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaStudy) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaStudy_events(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MlschemaStudy().Events(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*graph.Event)
	fc.Result = res
	return ec.marshalOEvent2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐEventᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaStudy_events(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaStudy",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Event_id(ctx, field)
			case "artifactId":
				return ec.fieldContext_Event_artifactId(ctx, field)
			case "executionId":
				return ec.fieldContext_Event_executionId(ctx, field)
			case "type":
				return ec.fieldContext_Event_type(ctx, field)
			case "path":
				return ec.fieldContext_Event_path(ctx, field)
			case "millisecondsSinceEpoch":
				return ec.fieldContext_Event_millisecondsSinceEpoch(ctx, field)
			case "artifact":
				return ec.fieldContext_Event_artifact(ctx, field)
			case "execution":
				return ec.fieldContext_Event_execution(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Event", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaTask_id(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaTask) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaTask_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaTask_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaTask",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaTask_typeId(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaTask) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaTask_typeId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TypeID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaTask_typeId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaTask",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaTask_uri(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaTask) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaTask_uri(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URI, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaTask_uri(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaTask",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaTask_state(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaTask) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaTask_state(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.State, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*graph.ArtifactState)
	fc.Result = res
	return ec.marshalOArtifactState2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐArtifactState(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaTask_state(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaTask",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ArtifactState does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaTask_name(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaTask) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaTask_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaTask_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaTask",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaTask_externalId(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaTask) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaTask_externalId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExternalID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaTask_externalId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaTask",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaTask_createTimeSinceEpoch(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaTask) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaTask_createTimeSinceEpoch(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateTimeSinceEpoch, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaTask_createTimeSinceEpoch(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaTask",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaTask_lastUpdateTimeSinceEpoch(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaTask) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaTask_lastUpdateTimeSinceEpoch(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastUpdateTimeSinceEpoch, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaTask_lastUpdateTimeSinceEpoch(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaTask",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaTask_type(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaTask) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaTask_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MlschemaTask().Type(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*graph.ArtifactType)
	fc.Result = res
	return ec.marshalNArtifactType2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐArtifactType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaTask_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaTask",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ArtifactType_id(ctx, field)
			case "name":
				return ec.fieldContext_ArtifactType_name(ctx, field)
			case "version":
				return ec.fieldContext_ArtifactType_version(ctx, field)
			case "typeKind":
				return ec.fieldContext_ArtifactType_typeKind(ctx, field)
			case "description":
				return ec.fieldContext_ArtifactType_description(ctx, field)
			case "externalId":
				return ec.fieldContext_ArtifactType_externalId(ctx, field)
			case "properties":
				return ec.fieldContext_ArtifactType_properties(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ArtifactType", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaTask_properties(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaTask) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaTask_properties(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Properties, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*graph.InstanceProperty)
	fc.Result = res
	return ec.marshalNInstanceProperty2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐInstancePropertyᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaTask_properties(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaTask",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_InstanceProperty_name(ctx, field)
			case "isCustomProperty":
				return ec.fieldContext_InstanceProperty_isCustomProperty(ctx, field)
			case "propertyValue":
				return ec.fieldContext_InstanceProperty_propertyValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type InstanceProperty", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaTask_attributions(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaTask) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaTask_attributions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MlschemaTask().Attributions(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*graph.Attribution)
	fc.Result = res
	return ec.marshalOAttribution2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐAttributionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaTask_attributions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaTask",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Attribution_id(ctx, field)
			case "contextId":
				return ec.fieldContext_Attribution_contextId(ctx, field)
			case "artifactId":
				return ec.fieldContext_Attribution_artifactId(ctx, field)
			case "context":
				return ec.fieldContext_Attribution_context(ctx, field)
			case "artifact":
				return ec.fieldContext_Attribution_artifact(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Attribution", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MlschemaTask_events(ctx context.Context, field graphql.CollectedField, obj *graph.MlschemaTask) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MlschemaTask_events(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MlschemaTask().Events(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*graph.Event)
	fc.Result = res
	return ec.marshalOEvent2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐEventᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MlschemaTask_events(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MlschemaTask",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Event_id(ctx, field)
			case "artifactId":
				return ec.fieldContext_Event_artifactId(ctx, field)
			case "executionId":
				return ec.fieldContext_Event_executionId(ctx, field)
			case "type":
				return ec.fieldContext_Event_type(ctx, field)
			case "path":
				return ec.fieldContext_Event_path(ctx, field)
			case "millisecondsSinceEpoch":
				return ec.fieldContext_Event_millisecondsSinceEpoch(ctx, field)
			case "artifact":
				return ec.fieldContext_Event_artifact(ctx, field)
			case "execution":
				return ec.fieldContext_Event_execution(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Event", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createArtifactType(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createArtifactType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateArtifactType(rctx, fc.Args["input"].(*graph.ArtifactTypeInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*graph.ArtifactType)
	fc.Result = res
	return ec.marshalNArtifactType2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐArtifactType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createArtifactType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ArtifactType_id(ctx, field)
			case "name":
				return ec.fieldContext_ArtifactType_name(ctx, field)
			case "version":
				return ec.fieldContext_ArtifactType_version(ctx, field)
			case "typeKind":
				return ec.fieldContext_ArtifactType_typeKind(ctx, field)
			case "description":
				return ec.fieldContext_ArtifactType_description(ctx, field)
			case "externalId":
				return ec.fieldContext_ArtifactType_externalId(ctx, field)
			case "properties":
				return ec.fieldContext_ArtifactType_properties(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ArtifactType", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createArtifactType_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _ProtoTypeValue_typeUrl(ctx context.Context, field graphql.CollectedField, obj *graph.ProtoTypeValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProtoTypeValue_typeUrl(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TypeURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProtoTypeValue_typeUrl(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProtoTypeValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProtoTypeValue_value(ctx context.Context, field graphql.CollectedField, obj *graph.ProtoTypeValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProtoTypeValue_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]byte)
	fc.Result = res
	return ec.marshalOByteArray2ᚕbyte(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProtoTypeValue_value(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProtoTypeValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ByteArray does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProtoValue_value(ctx context.Context, field graphql.CollectedField, obj *graph.ProtoValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProtoValue_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*graph.ProtoTypeValue)
	fc.Result = res
	return ec.marshalNProtoTypeValue2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐProtoTypeValue(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProtoValue_value(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProtoValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "typeUrl":
				return ec.fieldContext_ProtoTypeValue_typeUrl(ctx, field)
			case "value":
				return ec.fieldContext_ProtoTypeValue_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProtoTypeValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_types(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_types(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Types(rctx, fc.Args["filter"].(*graph.TypeFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]graph.Type)
	fc.Result = res
	return ec.marshalOType2ᚕgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_types(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("FieldContext.Child cannot be called on type INTERFACE")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_types_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_artifactTypes(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_artifactTypes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ArtifactTypes(rctx, fc.Args["filter"].(*graph.TypeFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*graph.ArtifactType)
	fc.Result = res
	return ec.marshalOArtifactType2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐArtifactTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_artifactTypes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ArtifactType_id(ctx, field)
			case "name":
				return ec.fieldContext_ArtifactType_name(ctx, field)
			case "version":
				return ec.fieldContext_ArtifactType_version(ctx, field)
			case "typeKind":
				return ec.fieldContext_ArtifactType_typeKind(ctx, field)
			case "description":
				return ec.fieldContext_ArtifactType_description(ctx, field)
			case "externalId":
				return ec.fieldContext_ArtifactType_externalId(ctx, field)
			case "properties":
				return ec.fieldContext_ArtifactType_properties(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ArtifactType", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_artifactTypes_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_contextTypes(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_contextTypes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ContextTypes(rctx, fc.Args["filter"].(*graph.TypeFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*graph.ContextType)
	fc.Result = res
	return ec.marshalOContextType2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐContextTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_contextTypes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ContextType_id(ctx, field)
			case "name":
				return ec.fieldContext_ContextType_name(ctx, field)
			case "version":
				return ec.fieldContext_ContextType_version(ctx, field)
			case "typeKind":
				return ec.fieldContext_ContextType_typeKind(ctx, field)
			case "description":
				return ec.fieldContext_ContextType_description(ctx, field)
			case "externalId":
				return ec.fieldContext_ContextType_externalId(ctx, field)
			case "properties":
				return ec.fieldContext_ContextType_properties(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ContextType", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_contextTypes_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_executionTypes(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_executionTypes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ExecutionTypes(rctx, fc.Args["filter"].(*graph.TypeFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*graph.ExecutionType)
	fc.Result = res
	return ec.marshalOExecutionType2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐExecutionTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_executionTypes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ExecutionType_id(ctx, field)
			case "name":
				return ec.fieldContext_ExecutionType_name(ctx, field)
			case "version":
				return ec.fieldContext_ExecutionType_version(ctx, field)
			case "typeKind":
				return ec.fieldContext_ExecutionType_typeKind(ctx, field)
			case "description":
				return ec.fieldContext_ExecutionType_description(ctx, field)
			case "externalId":
				return ec.fieldContext_ExecutionType_externalId(ctx, field)
			case "inputType":
				return ec.fieldContext_ExecutionType_inputType(ctx, field)
			case "outputType":
				return ec.fieldContext_ExecutionType_outputType(ctx, field)
			case "properties":
				return ec.fieldContext_ExecutionType_properties(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ExecutionType", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_executionTypes_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_artifacts(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_artifacts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Artifacts(rctx, fc.Args["filter"].(*graph.InstanceFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]graph.ArtifactInterface)
	fc.Result = res
	return ec.marshalOArtifactInterface2ᚕgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐArtifactInterfaceᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_artifacts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("FieldContext.Child cannot be called on type INTERFACE")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_artifacts_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_contexts(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_contexts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Contexts(rctx, fc.Args["filter"].(*graph.InstanceFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]graph.ContextInterface)
	fc.Result = res
	return ec.marshalOContextInterface2ᚕgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐContextInterfaceᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_contexts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("FieldContext.Child cannot be called on type INTERFACE")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_contexts_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_executions(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_executions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Executions(rctx, fc.Args["filter"].(*graph.InstanceFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]graph.ExecutionInterface)
	fc.Result = res
	return ec.marshalOExecutionInterface2ᚕgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐExecutionInterfaceᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_executions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("FieldContext.Child cannot be called on type INTERFACE")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_executions_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_events(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_events(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Events(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*graph.Event)
	fc.Result = res
	return ec.marshalOEvent2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐEventᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_events(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Event_id(ctx, field)
			case "artifactId":
				return ec.fieldContext_Event_artifactId(ctx, field)
			case "executionId":
				return ec.fieldContext_Event_executionId(ctx, field)
			case "type":
				return ec.fieldContext_Event_type(ctx, field)
			case "path":
				return ec.fieldContext_Event_path(ctx, field)
			case "millisecondsSinceEpoch":
				return ec.fieldContext_Event_millisecondsSinceEpoch(ctx, field)
			case "artifact":
				return ec.fieldContext_Event_artifact(ctx, field)
			case "execution":
				return ec.fieldContext_Event_execution(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Event", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_mlmdDatasets(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_mlmdDatasets(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().MlmdDatasets(rctx, fc.Args["filter"].(*graph.InstanceFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*graph.MlmdDataset)
	fc.Result = res
	return ec.marshalOMlmdDataset2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlmdDatasetᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_mlmdDatasets(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MlmdDataset_id(ctx, field)
			case "typeId":
				return ec.fieldContext_MlmdDataset_typeId(ctx, field)
			case "uri":
				return ec.fieldContext_MlmdDataset_uri(ctx, field)
			case "state":
				return ec.fieldContext_MlmdDataset_state(ctx, field)
			case "name":
				return ec.fieldContext_MlmdDataset_name(ctx, field)
			case "externalId":
				return ec.fieldContext_MlmdDataset_externalId(ctx, field)
			case "createTimeSinceEpoch":
				return ec.fieldContext_MlmdDataset_createTimeSinceEpoch(ctx, field)
			case "lastUpdateTimeSinceEpoch":
				return ec.fieldContext_MlmdDataset_lastUpdateTimeSinceEpoch(ctx, field)
			case "intProp":
				return ec.fieldContext_MlmdDataset_intProp(ctx, field)
			case "secondProp":
				return ec.fieldContext_MlmdDataset_secondProp(ctx, field)
			case "type":
				return ec.fieldContext_MlmdDataset_type(ctx, field)
			case "properties":
				return ec.fieldContext_MlmdDataset_properties(ctx, field)
			case "attributions":
				return ec.fieldContext_MlmdDataset_attributions(ctx, field)
			case "events":
				return ec.fieldContext_MlmdDataset_events(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MlmdDataset", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_mlmdDatasets_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_mlmdModels(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_mlmdModels(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().MlmdModels(rctx, fc.Args["filter"].(*graph.InstanceFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*graph.MlmdModel)
	fc.Result = res
	return ec.marshalOMlmdModel2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlmdModelᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_mlmdModels(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MlmdModel_id(ctx, field)
			case "typeId":
				return ec.fieldContext_MlmdModel_typeId(ctx, field)
			case "uri":
				return ec.fieldContext_MlmdModel_uri(ctx, field)
			case "state":
				return ec.fieldContext_MlmdModel_state(ctx, field)
			case "name":
				return ec.fieldContext_MlmdModel_name(ctx, field)
			case "externalId":
				return ec.fieldContext_MlmdModel_externalId(ctx, field)
			case "createTimeSinceEpoch":
				return ec.fieldContext_MlmdModel_createTimeSinceEpoch(ctx, field)
			case "lastUpdateTimeSinceEpoch":
				return ec.fieldContext_MlmdModel_lastUpdateTimeSinceEpoch(ctx, field)
			case "doubleProp":
				return ec.fieldContext_MlmdModel_doubleProp(ctx, field)
			case "type":
				return ec.fieldContext_MlmdModel_type(ctx, field)
			case "properties":
				return ec.fieldContext_MlmdModel_properties(ctx, field)
			case "attributions":
				return ec.fieldContext_MlmdModel_attributions(ctx, field)
			case "events":
				return ec.fieldContext_MlmdModel_events(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MlmdModel", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_mlmdModels_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_mlmdMetrics(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_mlmdMetrics(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().MlmdMetrics(rctx, fc.Args["filter"].(*graph.InstanceFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*graph.MlmdMetrics)
	fc.Result = res
	return ec.marshalOMlmdMetrics2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlmdMetricsᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_mlmdMetrics(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MlmdMetrics_id(ctx, field)
			case "typeId":
				return ec.fieldContext_MlmdMetrics_typeId(ctx, field)
			case "uri":
				return ec.fieldContext_MlmdMetrics_uri(ctx, field)
			case "state":
				return ec.fieldContext_MlmdMetrics_state(ctx, field)
			case "name":
				return ec.fieldContext_MlmdMetrics_name(ctx, field)
			case "externalId":
				return ec.fieldContext_MlmdMetrics_externalId(ctx, field)
			case "createTimeSinceEpoch":
				return ec.fieldContext_MlmdMetrics_createTimeSinceEpoch(ctx, field)
			case "lastUpdateTimeSinceEpoch":
				return ec.fieldContext_MlmdMetrics_lastUpdateTimeSinceEpoch(ctx, field)
			case "stringProp":
				return ec.fieldContext_MlmdMetrics_stringProp(ctx, field)
			case "type":
				return ec.fieldContext_MlmdMetrics_type(ctx, field)
			case "properties":
				return ec.fieldContext_MlmdMetrics_properties(ctx, field)
			case "attributions":
				return ec.fieldContext_MlmdMetrics_attributions(ctx, field)
			case "events":
				return ec.fieldContext_MlmdMetrics_events(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MlmdMetrics", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_mlmdMetrics_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_mlmdStatistics(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_mlmdStatistics(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().MlmdStatistics(rctx, fc.Args["filter"].(*graph.InstanceFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*graph.MlmdStatistics)
	fc.Result = res
	return ec.marshalOMlmdStatistics2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlmdStatisticsᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_mlmdStatistics(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MlmdStatistics_id(ctx, field)
			case "typeId":
				return ec.fieldContext_MlmdStatistics_typeId(ctx, field)
			case "uri":
				return ec.fieldContext_MlmdStatistics_uri(ctx, field)
			case "state":
				return ec.fieldContext_MlmdStatistics_state(ctx, field)
			case "name":
				return ec.fieldContext_MlmdStatistics_name(ctx, field)
			case "externalId":
				return ec.fieldContext_MlmdStatistics_externalId(ctx, field)
			case "createTimeSinceEpoch":
				return ec.fieldContext_MlmdStatistics_createTimeSinceEpoch(ctx, field)
			case "lastUpdateTimeSinceEpoch":
				return ec.fieldContext_MlmdStatistics_lastUpdateTimeSinceEpoch(ctx, field)
			case "structProp":
				return ec.fieldContext_MlmdStatistics_structProp(ctx, field)
			case "type":
				return ec.fieldContext_MlmdStatistics_type(ctx, field)
			case "properties":
				return ec.fieldContext_MlmdStatistics_properties(ctx, field)
			case "attributions":
				return ec.fieldContext_MlmdStatistics_attributions(ctx, field)
			case "events":
				return ec.fieldContext_MlmdStatistics_events(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MlmdStatistics", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_mlmdStatistics_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_mlmdTrains(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_mlmdTrains(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().MlmdTrains(rctx, fc.Args["filter"].(*graph.InstanceFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*graph.MlmdTrain)
	fc.Result = res
	return ec.marshalOMlmdTrain2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlmdTrainᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_mlmdTrains(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MlmdTrain_id(ctx, field)
			case "typeId":
				return ec.fieldContext_MlmdTrain_typeId(ctx, field)
			case "lastKnownState":
				return ec.fieldContext_MlmdTrain_lastKnownState(ctx, field)
			case "name":
				return ec.fieldContext_MlmdTrain_name(ctx, field)
			case "externalId":
				return ec.fieldContext_MlmdTrain_externalId(ctx, field)
			case "createTimeSinceEpoch":
				return ec.fieldContext_MlmdTrain_createTimeSinceEpoch(ctx, field)
			case "lastUpdateTimeSinceEpoch":
				return ec.fieldContext_MlmdTrain_lastUpdateTimeSinceEpoch(ctx, field)
			case "protoProp":
				return ec.fieldContext_MlmdTrain_protoProp(ctx, field)
			case "type":
				return ec.fieldContext_MlmdTrain_type(ctx, field)
			case "properties":
				return ec.fieldContext_MlmdTrain_properties(ctx, field)
			case "associations":
				return ec.fieldContext_MlmdTrain_associations(ctx, field)
			case "events":
				return ec.fieldContext_MlmdTrain_events(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MlmdTrain", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_mlmdTrains_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_mlmdTransforms(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_mlmdTransforms(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().MlmdTransforms(rctx, fc.Args["filter"].(*graph.InstanceFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*graph.MlmdTransform)
	fc.Result = res
	return ec.marshalOMlmdTransform2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlmdTransformᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_mlmdTransforms(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MlmdTransform_id(ctx, field)
			case "typeId":
				return ec.fieldContext_MlmdTransform_typeId(ctx, field)
			case "lastKnownState":
				return ec.fieldContext_MlmdTransform_lastKnownState(ctx, field)
			case "name":
				return ec.fieldContext_MlmdTransform_name(ctx, field)
			case "externalId":
				return ec.fieldContext_MlmdTransform_externalId(ctx, field)
			case "createTimeSinceEpoch":
				return ec.fieldContext_MlmdTransform_createTimeSinceEpoch(ctx, field)
			case "lastUpdateTimeSinceEpoch":
				return ec.fieldContext_MlmdTransform_lastUpdateTimeSinceEpoch(ctx, field)
			case "booleanProp":
				return ec.fieldContext_MlmdTransform_booleanProp(ctx, field)
			case "type":
				return ec.fieldContext_MlmdTransform_type(ctx, field)
			case "properties":
				return ec.fieldContext_MlmdTransform_properties(ctx, field)
			case "associations":
				return ec.fieldContext_MlmdTransform_associations(ctx, field)
			case "events":
				return ec.fieldContext_MlmdTransform_events(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MlmdTransform", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_mlmdTransforms_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_mlmdProcesses(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_mlmdProcesses(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().MlmdProcesses(rctx, fc.Args["filter"].(*graph.InstanceFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*graph.MlmdProcess)
	fc.Result = res
	return ec.marshalOMlmdProcess2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlmdProcessᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_mlmdProcesses(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MlmdProcess_id(ctx, field)
			case "typeId":
				return ec.fieldContext_MlmdProcess_typeId(ctx, field)
			case "lastKnownState":
				return ec.fieldContext_MlmdProcess_lastKnownState(ctx, field)
			case "name":
				return ec.fieldContext_MlmdProcess_name(ctx, field)
			case "externalId":
				return ec.fieldContext_MlmdProcess_externalId(ctx, field)
			case "createTimeSinceEpoch":
				return ec.fieldContext_MlmdProcess_createTimeSinceEpoch(ctx, field)
			case "lastUpdateTimeSinceEpoch":
				return ec.fieldContext_MlmdProcess_lastUpdateTimeSinceEpoch(ctx, field)
			case "type":
				return ec.fieldContext_MlmdProcess_type(ctx, field)
			case "properties":
				return ec.fieldContext_MlmdProcess_properties(ctx, field)
			case "associations":
				return ec.fieldContext_MlmdProcess_associations(ctx, field)
			case "events":
				return ec.fieldContext_MlmdProcess_events(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MlmdProcess", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_mlmdProcesses_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_mlmdEvaluates(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_mlmdEvaluates(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().MlmdEvaluates(rctx, fc.Args["filter"].(*graph.InstanceFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*graph.MlmdEvaluate)
	fc.Result = res
	return ec.marshalOMlmdEvaluate2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlmdEvaluateᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_mlmdEvaluates(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MlmdEvaluate_id(ctx, field)
			case "typeId":
				return ec.fieldContext_MlmdEvaluate_typeId(ctx, field)
			case "lastKnownState":
				return ec.fieldContext_MlmdEvaluate_lastKnownState(ctx, field)
			case "name":
				return ec.fieldContext_MlmdEvaluate_name(ctx, field)
			case "externalId":
				return ec.fieldContext_MlmdEvaluate_externalId(ctx, field)
			case "createTimeSinceEpoch":
				return ec.fieldContext_MlmdEvaluate_createTimeSinceEpoch(ctx, field)
			case "lastUpdateTimeSinceEpoch":
				return ec.fieldContext_MlmdEvaluate_lastUpdateTimeSinceEpoch(ctx, field)
			case "type":
				return ec.fieldContext_MlmdEvaluate_type(ctx, field)
			case "properties":
				return ec.fieldContext_MlmdEvaluate_properties(ctx, field)
			case "associations":
				return ec.fieldContext_MlmdEvaluate_associations(ctx, field)
			case "events":
				return ec.fieldContext_MlmdEvaluate_events(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MlmdEvaluate", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_mlmdEvaluates_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_mlmdDeploys(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_mlmdDeploys(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().MlmdDeploys(rctx, fc.Args["filter"].(*graph.InstanceFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*graph.MlmdDeploy)
	fc.Result = res
	return ec.marshalOMlmdDeploy2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlmdDeployᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_mlmdDeploys(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MlmdDeploy_id(ctx, field)
			case "typeId":
				return ec.fieldContext_MlmdDeploy_typeId(ctx, field)
			case "lastKnownState":
				return ec.fieldContext_MlmdDeploy_lastKnownState(ctx, field)
			case "name":
				return ec.fieldContext_MlmdDeploy_name(ctx, field)
			case "externalId":
				return ec.fieldContext_MlmdDeploy_externalId(ctx, field)
			case "createTimeSinceEpoch":
				return ec.fieldContext_MlmdDeploy_createTimeSinceEpoch(ctx, field)
			case "lastUpdateTimeSinceEpoch":
				return ec.fieldContext_MlmdDeploy_lastUpdateTimeSinceEpoch(ctx, field)
			case "type":
				return ec.fieldContext_MlmdDeploy_type(ctx, field)
			case "properties":
				return ec.fieldContext_MlmdDeploy_properties(ctx, field)
			case "associations":
				return ec.fieldContext_MlmdDeploy_associations(ctx, field)
			case "events":
				return ec.fieldContext_MlmdDeploy_events(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MlmdDeploy", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_mlmdDeploys_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_mlschemaModels(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_mlschemaModels(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().MlschemaModels(rctx, fc.Args["filter"].(*graph.InstanceFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*graph.MlschemaModel)
	fc.Result = res
	return ec.marshalOMlschemaModel2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlschemaModelᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_mlschemaModels(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MlschemaModel_id(ctx, field)
			case "typeId":
				return ec.fieldContext_MlschemaModel_typeId(ctx, field)
			case "uri":
				return ec.fieldContext_MlschemaModel_uri(ctx, field)
			case "state":
				return ec.fieldContext_MlschemaModel_state(ctx, field)
			case "name":
				return ec.fieldContext_MlschemaModel_name(ctx, field)
			case "externalId":
				return ec.fieldContext_MlschemaModel_externalId(ctx, field)
			case "createTimeSinceEpoch":
				return ec.fieldContext_MlschemaModel_createTimeSinceEpoch(ctx, field)
			case "lastUpdateTimeSinceEpoch":
				return ec.fieldContext_MlschemaModel_lastUpdateTimeSinceEpoch(ctx, field)
			case "type":
				return ec.fieldContext_MlschemaModel_type(ctx, field)
			case "properties":
				return ec.fieldContext_MlschemaModel_properties(ctx, field)
			case "attributions":
				return ec.fieldContext_MlschemaModel_attributions(ctx, field)
			case "events":
				return ec.fieldContext_MlschemaModel_events(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MlschemaModel", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_mlschemaModels_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_mlschemaModelEvaluations(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_mlschemaModelEvaluations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().MlschemaModelEvaluations(rctx, fc.Args["filter"].(*graph.InstanceFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*graph.MlschemaModelEvaluation)
	fc.Result = res
	return ec.marshalOMlschemaModelEvaluation2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlschemaModelEvaluationᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_mlschemaModelEvaluations(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MlschemaModelEvaluation_id(ctx, field)
			case "typeId":
				return ec.fieldContext_MlschemaModelEvaluation_typeId(ctx, field)
			case "uri":
				return ec.fieldContext_MlschemaModelEvaluation_uri(ctx, field)
			case "state":
				return ec.fieldContext_MlschemaModelEvaluation_state(ctx, field)
			case "name":
				return ec.fieldContext_MlschemaModelEvaluation_name(ctx, field)
			case "externalId":
				return ec.fieldContext_MlschemaModelEvaluation_externalId(ctx, field)
			case "createTimeSinceEpoch":
				return ec.fieldContext_MlschemaModelEvaluation_createTimeSinceEpoch(ctx, field)
			case "lastUpdateTimeSinceEpoch":
				return ec.fieldContext_MlschemaModelEvaluation_lastUpdateTimeSinceEpoch(ctx, field)
			case "type":
				return ec.fieldContext_MlschemaModelEvaluation_type(ctx, field)
			case "properties":
				return ec.fieldContext_MlschemaModelEvaluation_properties(ctx, field)
			case "attributions":
				return ec.fieldContext_MlschemaModelEvaluation_attributions(ctx, field)
			case "events":
				return ec.fieldContext_MlschemaModelEvaluation_events(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MlschemaModelEvaluation", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_mlschemaModelEvaluations_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_mlschemaEvaluationMeasures(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_mlschemaEvaluationMeasures(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().MlschemaEvaluationMeasures(rctx, fc.Args["filter"].(*graph.InstanceFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*graph.MlschemaEvaluationMeasure)
	fc.Result = res
	return ec.marshalOMlschemaEvaluationMeasure2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlschemaEvaluationMeasureᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_mlschemaEvaluationMeasures(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MlschemaEvaluationMeasure_id(ctx, field)
			case "typeId":
				return ec.fieldContext_MlschemaEvaluationMeasure_typeId(ctx, field)
			case "uri":
				return ec.fieldContext_MlschemaEvaluationMeasure_uri(ctx, field)
			case "state":
				return ec.fieldContext_MlschemaEvaluationMeasure_state(ctx, field)
			case "name":
				return ec.fieldContext_MlschemaEvaluationMeasure_name(ctx, field)
			case "externalId":
				return ec.fieldContext_MlschemaEvaluationMeasure_externalId(ctx, field)
			case "createTimeSinceEpoch":
				return ec.fieldContext_MlschemaEvaluationMeasure_createTimeSinceEpoch(ctx, field)
			case "lastUpdateTimeSinceEpoch":
				return ec.fieldContext_MlschemaEvaluationMeasure_lastUpdateTimeSinceEpoch(ctx, field)
			case "type":
				return ec.fieldContext_MlschemaEvaluationMeasure_type(ctx, field)
			case "properties":
				return ec.fieldContext_MlschemaEvaluationMeasure_properties(ctx, field)
			case "attributions":
				return ec.fieldContext_MlschemaEvaluationMeasure_attributions(ctx, field)
			case "events":
				return ec.fieldContext_MlschemaEvaluationMeasure_events(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MlschemaEvaluationMeasure", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_mlschemaEvaluationMeasures_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_mlschemaEvaluationSpecifications(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_mlschemaEvaluationSpecifications(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().MlschemaEvaluationSpecifications(rctx, fc.Args["filter"].(*graph.InstanceFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*graph.MlschemaEvaluationSpecification)
	fc.Result = res
	return ec.marshalOMlschemaEvaluationSpecification2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlschemaEvaluationSpecificationᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_mlschemaEvaluationSpecifications(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MlschemaEvaluationSpecification_id(ctx, field)
			case "typeId":
				return ec.fieldContext_MlschemaEvaluationSpecification_typeId(ctx, field)
			case "uri":
				return ec.fieldContext_MlschemaEvaluationSpecification_uri(ctx, field)
			case "state":
				return ec.fieldContext_MlschemaEvaluationSpecification_state(ctx, field)
			case "name":
				return ec.fieldContext_MlschemaEvaluationSpecification_name(ctx, field)
			case "externalId":
				return ec.fieldContext_MlschemaEvaluationSpecification_externalId(ctx, field)
			case "createTimeSinceEpoch":
				return ec.fieldContext_MlschemaEvaluationSpecification_createTimeSinceEpoch(ctx, field)
			case "lastUpdateTimeSinceEpoch":
				return ec.fieldContext_MlschemaEvaluationSpecification_lastUpdateTimeSinceEpoch(ctx, field)
			case "type":
				return ec.fieldContext_MlschemaEvaluationSpecification_type(ctx, field)
			case "properties":
				return ec.fieldContext_MlschemaEvaluationSpecification_properties(ctx, field)
			case "attributions":
				return ec.fieldContext_MlschemaEvaluationSpecification_attributions(ctx, field)
			case "events":
				return ec.fieldContext_MlschemaEvaluationSpecification_events(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MlschemaEvaluationSpecification", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_mlschemaEvaluationSpecifications_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_mlschemaEvaluationProcedures(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_mlschemaEvaluationProcedures(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().MlschemaEvaluationProcedures(rctx, fc.Args["filter"].(*graph.InstanceFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*graph.MlschemaEvaluationProcedure)
	fc.Result = res
	return ec.marshalOMlschemaEvaluationProcedure2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlschemaEvaluationProcedureᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_mlschemaEvaluationProcedures(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MlschemaEvaluationProcedure_id(ctx, field)
			case "typeId":
				return ec.fieldContext_MlschemaEvaluationProcedure_typeId(ctx, field)
			case "uri":
				return ec.fieldContext_MlschemaEvaluationProcedure_uri(ctx, field)
			case "state":
				return ec.fieldContext_MlschemaEvaluationProcedure_state(ctx, field)
			case "name":
				return ec.fieldContext_MlschemaEvaluationProcedure_name(ctx, field)
			case "externalId":
				return ec.fieldContext_MlschemaEvaluationProcedure_externalId(ctx, field)
			case "createTimeSinceEpoch":
				return ec.fieldContext_MlschemaEvaluationProcedure_createTimeSinceEpoch(ctx, field)
			case "lastUpdateTimeSinceEpoch":
				return ec.fieldContext_MlschemaEvaluationProcedure_lastUpdateTimeSinceEpoch(ctx, field)
			case "type":
				return ec.fieldContext_MlschemaEvaluationProcedure_type(ctx, field)
			case "properties":
				return ec.fieldContext_MlschemaEvaluationProcedure_properties(ctx, field)
			case "attributions":
				return ec.fieldContext_MlschemaEvaluationProcedure_attributions(ctx, field)
			case "events":
				return ec.fieldContext_MlschemaEvaluationProcedure_events(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MlschemaEvaluationProcedure", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_mlschemaEvaluationProcedures_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_mlschemaTasks(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_mlschemaTasks(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().MlschemaTasks(rctx, fc.Args["filter"].(*graph.InstanceFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*graph.MlschemaTask)
	fc.Result = res
	return ec.marshalOMlschemaTask2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlschemaTaskᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_mlschemaTasks(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MlschemaTask_id(ctx, field)
			case "typeId":
				return ec.fieldContext_MlschemaTask_typeId(ctx, field)
			case "uri":
				return ec.fieldContext_MlschemaTask_uri(ctx, field)
			case "state":
				return ec.fieldContext_MlschemaTask_state(ctx, field)
			case "name":
				return ec.fieldContext_MlschemaTask_name(ctx, field)
			case "externalId":
				return ec.fieldContext_MlschemaTask_externalId(ctx, field)
			case "createTimeSinceEpoch":
				return ec.fieldContext_MlschemaTask_createTimeSinceEpoch(ctx, field)
			case "lastUpdateTimeSinceEpoch":
				return ec.fieldContext_MlschemaTask_lastUpdateTimeSinceEpoch(ctx, field)
			case "type":
				return ec.fieldContext_MlschemaTask_type(ctx, field)
			case "properties":
				return ec.fieldContext_MlschemaTask_properties(ctx, field)
			case "attributions":
				return ec.fieldContext_MlschemaTask_attributions(ctx, field)
			case "events":
				return ec.fieldContext_MlschemaTask_events(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MlschemaTask", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_mlschemaTasks_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_mlschemaData(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_mlschemaData(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().MlschemaData(rctx, fc.Args["filter"].(*graph.InstanceFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*graph.MlschemaData)
	fc.Result = res
	return ec.marshalOMlschemaData2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlschemaDataᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_mlschemaData(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MlschemaData_id(ctx, field)
			case "typeId":
				return ec.fieldContext_MlschemaData_typeId(ctx, field)
			case "uri":
				return ec.fieldContext_MlschemaData_uri(ctx, field)
			case "state":
				return ec.fieldContext_MlschemaData_state(ctx, field)
			case "name":
				return ec.fieldContext_MlschemaData_name(ctx, field)
			case "externalId":
				return ec.fieldContext_MlschemaData_externalId(ctx, field)
			case "createTimeSinceEpoch":
				return ec.fieldContext_MlschemaData_createTimeSinceEpoch(ctx, field)
			case "lastUpdateTimeSinceEpoch":
				return ec.fieldContext_MlschemaData_lastUpdateTimeSinceEpoch(ctx, field)
			case "type":
				return ec.fieldContext_MlschemaData_type(ctx, field)
			case "properties":
				return ec.fieldContext_MlschemaData_properties(ctx, field)
			case "attributions":
				return ec.fieldContext_MlschemaData_attributions(ctx, field)
			case "events":
				return ec.fieldContext_MlschemaData_events(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MlschemaData", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_mlschemaData_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_mlschemaDataSets(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_mlschemaDataSets(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().MlschemaDataSets(rctx, fc.Args["filter"].(*graph.InstanceFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*graph.MlschemaDataSet)
	fc.Result = res
	return ec.marshalOMlschemaDataSet2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlschemaDataSetᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_mlschemaDataSets(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MlschemaDataSet_id(ctx, field)
			case "typeId":
				return ec.fieldContext_MlschemaDataSet_typeId(ctx, field)
			case "uri":
				return ec.fieldContext_MlschemaDataSet_uri(ctx, field)
			case "state":
				return ec.fieldContext_MlschemaDataSet_state(ctx, field)
			case "name":
				return ec.fieldContext_MlschemaDataSet_name(ctx, field)
			case "externalId":
				return ec.fieldContext_MlschemaDataSet_externalId(ctx, field)
			case "createTimeSinceEpoch":
				return ec.fieldContext_MlschemaDataSet_createTimeSinceEpoch(ctx, field)
			case "lastUpdateTimeSinceEpoch":
				return ec.fieldContext_MlschemaDataSet_lastUpdateTimeSinceEpoch(ctx, field)
			case "type":
				return ec.fieldContext_MlschemaDataSet_type(ctx, field)
			case "properties":
				return ec.fieldContext_MlschemaDataSet_properties(ctx, field)
			case "attributions":
				return ec.fieldContext_MlschemaDataSet_attributions(ctx, field)
			case "events":
				return ec.fieldContext_MlschemaDataSet_events(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MlschemaDataSet", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_mlschemaDataSets_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_mlschemaFeatures(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_mlschemaFeatures(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().MlschemaFeatures(rctx, fc.Args["filter"].(*graph.InstanceFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*graph.MlschemaFeature)
	fc.Result = res
	return ec.marshalOMlschemaFeature2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlschemaFeatureᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_mlschemaFeatures(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MlschemaFeature_id(ctx, field)
			case "typeId":
				return ec.fieldContext_MlschemaFeature_typeId(ctx, field)
			case "uri":
				return ec.fieldContext_MlschemaFeature_uri(ctx, field)
			case "state":
				return ec.fieldContext_MlschemaFeature_state(ctx, field)
			case "name":
				return ec.fieldContext_MlschemaFeature_name(ctx, field)
			case "externalId":
				return ec.fieldContext_MlschemaFeature_externalId(ctx, field)
			case "createTimeSinceEpoch":
				return ec.fieldContext_MlschemaFeature_createTimeSinceEpoch(ctx, field)
			case "lastUpdateTimeSinceEpoch":
				return ec.fieldContext_MlschemaFeature_lastUpdateTimeSinceEpoch(ctx, field)
			case "type":
				return ec.fieldContext_MlschemaFeature_type(ctx, field)
			case "properties":
				return ec.fieldContext_MlschemaFeature_properties(ctx, field)
			case "attributions":
				return ec.fieldContext_MlschemaFeature_attributions(ctx, field)
			case "events":
				return ec.fieldContext_MlschemaFeature_events(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MlschemaFeature", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_mlschemaFeatures_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_mlschemaAlgorithms(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_mlschemaAlgorithms(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().MlschemaAlgorithms(rctx, fc.Args["filter"].(*graph.InstanceFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*graph.MlschemaAlgorithm)
	fc.Result = res
	return ec.marshalOMlschemaAlgorithm2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlschemaAlgorithmᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_mlschemaAlgorithms(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MlschemaAlgorithm_id(ctx, field)
			case "typeId":
				return ec.fieldContext_MlschemaAlgorithm_typeId(ctx, field)
			case "uri":
				return ec.fieldContext_MlschemaAlgorithm_uri(ctx, field)
			case "state":
				return ec.fieldContext_MlschemaAlgorithm_state(ctx, field)
			case "name":
				return ec.fieldContext_MlschemaAlgorithm_name(ctx, field)
			case "externalId":
				return ec.fieldContext_MlschemaAlgorithm_externalId(ctx, field)
			case "createTimeSinceEpoch":
				return ec.fieldContext_MlschemaAlgorithm_createTimeSinceEpoch(ctx, field)
			case "lastUpdateTimeSinceEpoch":
				return ec.fieldContext_MlschemaAlgorithm_lastUpdateTimeSinceEpoch(ctx, field)
			case "type":
				return ec.fieldContext_MlschemaAlgorithm_type(ctx, field)
			case "properties":
				return ec.fieldContext_MlschemaAlgorithm_properties(ctx, field)
			case "attributions":
				return ec.fieldContext_MlschemaAlgorithm_attributions(ctx, field)
			case "events":
				return ec.fieldContext_MlschemaAlgorithm_events(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MlschemaAlgorithm", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_mlschemaAlgorithms_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_mlschemaSoftwares(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_mlschemaSoftwares(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().MlschemaSoftwares(rctx, fc.Args["filter"].(*graph.InstanceFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*graph.MlschemaSoftware)
	fc.Result = res
	return ec.marshalOMlschemaSoftware2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlschemaSoftwareᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_mlschemaSoftwares(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MlschemaSoftware_id(ctx, field)
			case "typeId":
				return ec.fieldContext_MlschemaSoftware_typeId(ctx, field)
			case "uri":
				return ec.fieldContext_MlschemaSoftware_uri(ctx, field)
			case "state":
				return ec.fieldContext_MlschemaSoftware_state(ctx, field)
			case "name":
				return ec.fieldContext_MlschemaSoftware_name(ctx, field)
			case "externalId":
				return ec.fieldContext_MlschemaSoftware_externalId(ctx, field)
			case "createTimeSinceEpoch":
				return ec.fieldContext_MlschemaSoftware_createTimeSinceEpoch(ctx, field)
			case "lastUpdateTimeSinceEpoch":
				return ec.fieldContext_MlschemaSoftware_lastUpdateTimeSinceEpoch(ctx, field)
			case "type":
				return ec.fieldContext_MlschemaSoftware_type(ctx, field)
			case "properties":
				return ec.fieldContext_MlschemaSoftware_properties(ctx, field)
			case "attributions":
				return ec.fieldContext_MlschemaSoftware_attributions(ctx, field)
			case "events":
				return ec.fieldContext_MlschemaSoftware_events(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MlschemaSoftware", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_mlschemaSoftwares_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_mlschemaImplementations(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_mlschemaImplementations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().MlschemaImplementations(rctx, fc.Args["filter"].(*graph.InstanceFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*graph.MlschemaImplementation)
	fc.Result = res
	return ec.marshalOMlschemaImplementation2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlschemaImplementationᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_mlschemaImplementations(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MlschemaImplementation_id(ctx, field)
			case "typeId":
				return ec.fieldContext_MlschemaImplementation_typeId(ctx, field)
			case "uri":
				return ec.fieldContext_MlschemaImplementation_uri(ctx, field)
			case "state":
				return ec.fieldContext_MlschemaImplementation_state(ctx, field)
			case "name":
				return ec.fieldContext_MlschemaImplementation_name(ctx, field)
			case "externalId":
				return ec.fieldContext_MlschemaImplementation_externalId(ctx, field)
			case "createTimeSinceEpoch":
				return ec.fieldContext_MlschemaImplementation_createTimeSinceEpoch(ctx, field)
			case "lastUpdateTimeSinceEpoch":
				return ec.fieldContext_MlschemaImplementation_lastUpdateTimeSinceEpoch(ctx, field)
			case "type":
				return ec.fieldContext_MlschemaImplementation_type(ctx, field)
			case "properties":
				return ec.fieldContext_MlschemaImplementation_properties(ctx, field)
			case "attributions":
				return ec.fieldContext_MlschemaImplementation_attributions(ctx, field)
			case "events":
				return ec.fieldContext_MlschemaImplementation_events(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MlschemaImplementation", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_mlschemaImplementations_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_mlschemaHyperParameters(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_mlschemaHyperParameters(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().MlschemaHyperParameters(rctx, fc.Args["filter"].(*graph.InstanceFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*graph.MlschemaHyperParameter)
	fc.Result = res
	return ec.marshalOMlschemaHyperParameter2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlschemaHyperParameterᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_mlschemaHyperParameters(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MlschemaHyperParameter_id(ctx, field)
			case "typeId":
				return ec.fieldContext_MlschemaHyperParameter_typeId(ctx, field)
			case "uri":
				return ec.fieldContext_MlschemaHyperParameter_uri(ctx, field)
			case "state":
				return ec.fieldContext_MlschemaHyperParameter_state(ctx, field)
			case "name":
				return ec.fieldContext_MlschemaHyperParameter_name(ctx, field)
			case "externalId":
				return ec.fieldContext_MlschemaHyperParameter_externalId(ctx, field)
			case "createTimeSinceEpoch":
				return ec.fieldContext_MlschemaHyperParameter_createTimeSinceEpoch(ctx, field)
			case "lastUpdateTimeSinceEpoch":
				return ec.fieldContext_MlschemaHyperParameter_lastUpdateTimeSinceEpoch(ctx, field)
			case "type":
				return ec.fieldContext_MlschemaHyperParameter_type(ctx, field)
			case "properties":
				return ec.fieldContext_MlschemaHyperParameter_properties(ctx, field)
			case "attributions":
				return ec.fieldContext_MlschemaHyperParameter_attributions(ctx, field)
			case "events":
				return ec.fieldContext_MlschemaHyperParameter_events(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MlschemaHyperParameter", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_mlschemaHyperParameters_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_mlschemaHyperParameterSettings(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_mlschemaHyperParameterSettings(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().MlschemaHyperParameterSettings(rctx, fc.Args["filter"].(*graph.InstanceFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*graph.MlschemaHyperParameterSetting)
	fc.Result = res
	return ec.marshalOMlschemaHyperParameterSetting2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlschemaHyperParameterSettingᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_mlschemaHyperParameterSettings(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MlschemaHyperParameterSetting_id(ctx, field)
			case "typeId":
				return ec.fieldContext_MlschemaHyperParameterSetting_typeId(ctx, field)
			case "uri":
				return ec.fieldContext_MlschemaHyperParameterSetting_uri(ctx, field)
			case "state":
				return ec.fieldContext_MlschemaHyperParameterSetting_state(ctx, field)
			case "name":
				return ec.fieldContext_MlschemaHyperParameterSetting_name(ctx, field)
			case "externalId":
				return ec.fieldContext_MlschemaHyperParameterSetting_externalId(ctx, field)
			case "createTimeSinceEpoch":
				return ec.fieldContext_MlschemaHyperParameterSetting_createTimeSinceEpoch(ctx, field)
			case "lastUpdateTimeSinceEpoch":
				return ec.fieldContext_MlschemaHyperParameterSetting_lastUpdateTimeSinceEpoch(ctx, field)
			case "type":
				return ec.fieldContext_MlschemaHyperParameterSetting_type(ctx, field)
			case "properties":
				return ec.fieldContext_MlschemaHyperParameterSetting_properties(ctx, field)
			case "attributions":
				return ec.fieldContext_MlschemaHyperParameterSetting_attributions(ctx, field)
			case "events":
				return ec.fieldContext_MlschemaHyperParameterSetting_events(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MlschemaHyperParameterSetting", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_mlschemaHyperParameterSettings_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_mlschemaImplementationCharacteristics(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_mlschemaImplementationCharacteristics(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().MlschemaImplementationCharacteristics(rctx, fc.Args["filter"].(*graph.InstanceFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*graph.MlschemaImplementationCharacteristic)
	fc.Result = res
	return ec.marshalOMlschemaImplementationCharacteristic2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlschemaImplementationCharacteristicᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_mlschemaImplementationCharacteristics(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MlschemaImplementationCharacteristic_id(ctx, field)
			case "typeId":
				return ec.fieldContext_MlschemaImplementationCharacteristic_typeId(ctx, field)
			case "uri":
				return ec.fieldContext_MlschemaImplementationCharacteristic_uri(ctx, field)
			case "state":
				return ec.fieldContext_MlschemaImplementationCharacteristic_state(ctx, field)
			case "name":
				return ec.fieldContext_MlschemaImplementationCharacteristic_name(ctx, field)
			case "externalId":
				return ec.fieldContext_MlschemaImplementationCharacteristic_externalId(ctx, field)
			case "createTimeSinceEpoch":
				return ec.fieldContext_MlschemaImplementationCharacteristic_createTimeSinceEpoch(ctx, field)
			case "lastUpdateTimeSinceEpoch":
				return ec.fieldContext_MlschemaImplementationCharacteristic_lastUpdateTimeSinceEpoch(ctx, field)
			case "type":
				return ec.fieldContext_MlschemaImplementationCharacteristic_type(ctx, field)
			case "properties":
				return ec.fieldContext_MlschemaImplementationCharacteristic_properties(ctx, field)
			case "attributions":
				return ec.fieldContext_MlschemaImplementationCharacteristic_attributions(ctx, field)
			case "events":
				return ec.fieldContext_MlschemaImplementationCharacteristic_events(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MlschemaImplementationCharacteristic", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_mlschemaImplementationCharacteristics_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_mlschemaDatasetCharacteristics(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_mlschemaDatasetCharacteristics(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().MlschemaDatasetCharacteristics(rctx, fc.Args["filter"].(*graph.InstanceFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*graph.MlschemaDatasetCharacteristic)
	fc.Result = res
	return ec.marshalOMlschemaDatasetCharacteristic2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlschemaDatasetCharacteristicᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_mlschemaDatasetCharacteristics(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MlschemaDatasetCharacteristic_id(ctx, field)
			case "typeId":
				return ec.fieldContext_MlschemaDatasetCharacteristic_typeId(ctx, field)
			case "uri":
				return ec.fieldContext_MlschemaDatasetCharacteristic_uri(ctx, field)
			case "state":
				return ec.fieldContext_MlschemaDatasetCharacteristic_state(ctx, field)
			case "name":
				return ec.fieldContext_MlschemaDatasetCharacteristic_name(ctx, field)
			case "externalId":
				return ec.fieldContext_MlschemaDatasetCharacteristic_externalId(ctx, field)
			case "createTimeSinceEpoch":
				return ec.fieldContext_MlschemaDatasetCharacteristic_createTimeSinceEpoch(ctx, field)
			case "lastUpdateTimeSinceEpoch":
				return ec.fieldContext_MlschemaDatasetCharacteristic_lastUpdateTimeSinceEpoch(ctx, field)
			case "type":
				return ec.fieldContext_MlschemaDatasetCharacteristic_type(ctx, field)
			case "properties":
				return ec.fieldContext_MlschemaDatasetCharacteristic_properties(ctx, field)
			case "attributions":
				return ec.fieldContext_MlschemaDatasetCharacteristic_attributions(ctx, field)
			case "events":
				return ec.fieldContext_MlschemaDatasetCharacteristic_events(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MlschemaDatasetCharacteristic", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_mlschemaDatasetCharacteristics_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_mlschemaFeatureCharacteristics(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_mlschemaFeatureCharacteristics(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().MlschemaFeatureCharacteristics(rctx, fc.Args["filter"].(*graph.InstanceFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*graph.MlschemaFeatureCharacteristic)
	fc.Result = res
	return ec.marshalOMlschemaFeatureCharacteristic2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlschemaFeatureCharacteristicᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_mlschemaFeatureCharacteristics(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MlschemaFeatureCharacteristic_id(ctx, field)
			case "typeId":
				return ec.fieldContext_MlschemaFeatureCharacteristic_typeId(ctx, field)
			case "uri":
				return ec.fieldContext_MlschemaFeatureCharacteristic_uri(ctx, field)
			case "state":
				return ec.fieldContext_MlschemaFeatureCharacteristic_state(ctx, field)
			case "name":
				return ec.fieldContext_MlschemaFeatureCharacteristic_name(ctx, field)
			case "externalId":
				return ec.fieldContext_MlschemaFeatureCharacteristic_externalId(ctx, field)
			case "createTimeSinceEpoch":
				return ec.fieldContext_MlschemaFeatureCharacteristic_createTimeSinceEpoch(ctx, field)
			case "lastUpdateTimeSinceEpoch":
				return ec.fieldContext_MlschemaFeatureCharacteristic_lastUpdateTimeSinceEpoch(ctx, field)
			case "type":
				return ec.fieldContext_MlschemaFeatureCharacteristic_type(ctx, field)
			case "properties":
				return ec.fieldContext_MlschemaFeatureCharacteristic_properties(ctx, field)
			case "attributions":
				return ec.fieldContext_MlschemaFeatureCharacteristic_attributions(ctx, field)
			case "events":
				return ec.fieldContext_MlschemaFeatureCharacteristic_events(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MlschemaFeatureCharacteristic", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_mlschemaFeatureCharacteristics_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_mlschemaRegisteredModels(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_mlschemaRegisteredModels(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().MlschemaRegisteredModels(rctx, fc.Args["filter"].(*graph.InstanceFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*graph.MlschemaRegisteredModel)
	fc.Result = res
	return ec.marshalOMlschemaRegisteredModel2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlschemaRegisteredModelᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_mlschemaRegisteredModels(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MlschemaRegisteredModel_id(ctx, field)
			case "typeId":
				return ec.fieldContext_MlschemaRegisteredModel_typeId(ctx, field)
			case "name":
				return ec.fieldContext_MlschemaRegisteredModel_name(ctx, field)
			case "externalId":
				return ec.fieldContext_MlschemaRegisteredModel_externalId(ctx, field)
			case "createTimeSinceEpoch":
				return ec.fieldContext_MlschemaRegisteredModel_createTimeSinceEpoch(ctx, field)
			case "lastUpdateTimeSinceEpoch":
				return ec.fieldContext_MlschemaRegisteredModel_lastUpdateTimeSinceEpoch(ctx, field)
			case "type":
				return ec.fieldContext_MlschemaRegisteredModel_type(ctx, field)
			case "properties":
				return ec.fieldContext_MlschemaRegisteredModel_properties(ctx, field)
			case "parents":
				return ec.fieldContext_MlschemaRegisteredModel_parents(ctx, field)
			case "children":
				return ec.fieldContext_MlschemaRegisteredModel_children(ctx, field)
			case "attributions":
				return ec.fieldContext_MlschemaRegisteredModel_attributions(ctx, field)
			case "associations":
				return ec.fieldContext_MlschemaRegisteredModel_associations(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MlschemaRegisteredModel", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_mlschemaRegisteredModels_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_mlschemaModelVersions(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_mlschemaModelVersions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().MlschemaModelVersions(rctx, fc.Args["filter"].(*graph.InstanceFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*graph.MlschemaModelVersion)
	fc.Result = res
	return ec.marshalOMlschemaModelVersion2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlschemaModelVersionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_mlschemaModelVersions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MlschemaModelVersion_id(ctx, field)
			case "typeId":
				return ec.fieldContext_MlschemaModelVersion_typeId(ctx, field)
			case "name":
				return ec.fieldContext_MlschemaModelVersion_name(ctx, field)
			case "externalId":
				return ec.fieldContext_MlschemaModelVersion_externalId(ctx, field)
			case "createTimeSinceEpoch":
				return ec.fieldContext_MlschemaModelVersion_createTimeSinceEpoch(ctx, field)
			case "lastUpdateTimeSinceEpoch":
				return ec.fieldContext_MlschemaModelVersion_lastUpdateTimeSinceEpoch(ctx, field)
			case "type":
				return ec.fieldContext_MlschemaModelVersion_type(ctx, field)
			case "properties":
				return ec.fieldContext_MlschemaModelVersion_properties(ctx, field)
			case "parents":
				return ec.fieldContext_MlschemaModelVersion_parents(ctx, field)
			case "children":
				return ec.fieldContext_MlschemaModelVersion_children(ctx, field)
			case "attributions":
				return ec.fieldContext_MlschemaModelVersion_attributions(ctx, field)
			case "associations":
				return ec.fieldContext_MlschemaModelVersion_associations(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MlschemaModelVersion", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_mlschemaModelVersions_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_mlschemaDataCharacteristics(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_mlschemaDataCharacteristics(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().MlschemaDataCharacteristics(rctx, fc.Args["filter"].(*graph.InstanceFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*graph.MlschemaDataCharacteristic)
	fc.Result = res
	return ec.marshalOMlschemaDataCharacteristic2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlschemaDataCharacteristicᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_mlschemaDataCharacteristics(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MlschemaDataCharacteristic_id(ctx, field)
			case "typeId":
				return ec.fieldContext_MlschemaDataCharacteristic_typeId(ctx, field)
			case "name":
				return ec.fieldContext_MlschemaDataCharacteristic_name(ctx, field)
			case "externalId":
				return ec.fieldContext_MlschemaDataCharacteristic_externalId(ctx, field)
			case "createTimeSinceEpoch":
				return ec.fieldContext_MlschemaDataCharacteristic_createTimeSinceEpoch(ctx, field)
			case "lastUpdateTimeSinceEpoch":
				return ec.fieldContext_MlschemaDataCharacteristic_lastUpdateTimeSinceEpoch(ctx, field)
			case "type":
				return ec.fieldContext_MlschemaDataCharacteristic_type(ctx, field)
			case "properties":
				return ec.fieldContext_MlschemaDataCharacteristic_properties(ctx, field)
			case "parents":
				return ec.fieldContext_MlschemaDataCharacteristic_parents(ctx, field)
			case "children":
				return ec.fieldContext_MlschemaDataCharacteristic_children(ctx, field)
			case "attributions":
				return ec.fieldContext_MlschemaDataCharacteristic_attributions(ctx, field)
			case "associations":
				return ec.fieldContext_MlschemaDataCharacteristic_associations(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MlschemaDataCharacteristic", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_mlschemaDataCharacteristics_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_mlschemaStudies(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_mlschemaStudies(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().MlschemaStudies(rctx, fc.Args["filter"].(*graph.InstanceFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*graph.MlschemaStudy)
	fc.Result = res
	return ec.marshalOMlschemaStudy2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlschemaStudyᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_mlschemaStudies(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MlschemaStudy_id(ctx, field)
			case "typeId":
				return ec.fieldContext_MlschemaStudy_typeId(ctx, field)
			case "lastKnownState":
				return ec.fieldContext_MlschemaStudy_lastKnownState(ctx, field)
			case "name":
				return ec.fieldContext_MlschemaStudy_name(ctx, field)
			case "externalId":
				return ec.fieldContext_MlschemaStudy_externalId(ctx, field)
			case "createTimeSinceEpoch":
				return ec.fieldContext_MlschemaStudy_createTimeSinceEpoch(ctx, field)
			case "lastUpdateTimeSinceEpoch":
				return ec.fieldContext_MlschemaStudy_lastUpdateTimeSinceEpoch(ctx, field)
			case "type":
				return ec.fieldContext_MlschemaStudy_type(ctx, field)
			case "properties":
				return ec.fieldContext_MlschemaStudy_properties(ctx, field)
			case "associations":
				return ec.fieldContext_MlschemaStudy_associations(ctx, field)
			case "events":
				return ec.fieldContext_MlschemaStudy_events(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MlschemaStudy", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_mlschemaStudies_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_mlschemaExperiments(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_mlschemaExperiments(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().MlschemaExperiments(rctx, fc.Args["filter"].(*graph.InstanceFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*graph.MlschemaExperiment)
	fc.Result = res
	return ec.marshalOMlschemaExperiment2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlschemaExperimentᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_mlschemaExperiments(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MlschemaExperiment_id(ctx, field)
			case "typeId":
				return ec.fieldContext_MlschemaExperiment_typeId(ctx, field)
			case "lastKnownState":
				return ec.fieldContext_MlschemaExperiment_lastKnownState(ctx, field)
			case "name":
				return ec.fieldContext_MlschemaExperiment_name(ctx, field)
			case "externalId":
				return ec.fieldContext_MlschemaExperiment_externalId(ctx, field)
			case "createTimeSinceEpoch":
				return ec.fieldContext_MlschemaExperiment_createTimeSinceEpoch(ctx, field)
			case "lastUpdateTimeSinceEpoch":
				return ec.fieldContext_MlschemaExperiment_lastUpdateTimeSinceEpoch(ctx, field)
			case "type":
				return ec.fieldContext_MlschemaExperiment_type(ctx, field)
			case "properties":
				return ec.fieldContext_MlschemaExperiment_properties(ctx, field)
			case "associations":
				return ec.fieldContext_MlschemaExperiment_associations(ctx, field)
			case "events":
				return ec.fieldContext_MlschemaExperiment_events(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MlschemaExperiment", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_mlschemaExperiments_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_mlschemaRuns(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_mlschemaRuns(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().MlschemaRuns(rctx, fc.Args["filter"].(*graph.InstanceFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*graph.MlschemaRun)
	fc.Result = res
	return ec.marshalOMlschemaRun2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlschemaRunᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_mlschemaRuns(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MlschemaRun_id(ctx, field)
			case "typeId":
				return ec.fieldContext_MlschemaRun_typeId(ctx, field)
			case "lastKnownState":
				return ec.fieldContext_MlschemaRun_lastKnownState(ctx, field)
			case "name":
				return ec.fieldContext_MlschemaRun_name(ctx, field)
			case "externalId":
				return ec.fieldContext_MlschemaRun_externalId(ctx, field)
			case "createTimeSinceEpoch":
				return ec.fieldContext_MlschemaRun_createTimeSinceEpoch(ctx, field)
			case "lastUpdateTimeSinceEpoch":
				return ec.fieldContext_MlschemaRun_lastUpdateTimeSinceEpoch(ctx, field)
			case "type":
				return ec.fieldContext_MlschemaRun_type(ctx, field)
			case "properties":
				return ec.fieldContext_MlschemaRun_properties(ctx, field)
			case "associations":
				return ec.fieldContext_MlschemaRun_associations(ctx, field)
			case "events":
				return ec.fieldContext_MlschemaRun_events(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MlschemaRun", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_mlschemaRuns_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(fc.Args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query___type_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___schema(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___schema(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "description":
				return ec.fieldContext___Schema_description(ctx, field)
			case "types":
				return ec.fieldContext___Schema_types(ctx, field)
			case "queryType":
				return ec.fieldContext___Schema_queryType(ctx, field)
			case "mutationType":
				return ec.fieldContext___Schema_mutationType(ctx, field)
			case "subscriptionType":
				return ec.fieldContext___Schema_subscriptionType(ctx, field)
			case "directives":
				return ec.fieldContext___Schema_directives(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Schema", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _StringValue_value(ctx context.Context, field graphql.CollectedField, obj *graph.StringValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StringValue_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StringValue_value(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StringValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StructTuple_key(ctx context.Context, field graphql.CollectedField, obj *graph.StructTuple) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StructTuple_key(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Key, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StructTuple_key(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StructTuple",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StructTuple_value(ctx context.Context, field graphql.CollectedField, obj *graph.StructTuple) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StructTuple_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(graph.StructValueType)
	fc.Result = res
	return ec.marshalOStructValueType2githubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐStructValueType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StructTuple_value(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StructTuple",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type StructValueType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StructValue_value(ctx context.Context, field graphql.CollectedField, obj *graph.StructValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StructValue_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*graph.StructTuple)
	fc.Result = res
	return ec.marshalNStructTuple2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐStructTupleᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StructValue_value(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StructValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "key":
				return ec.fieldContext_StructTuple_key(ctx, field)
			case "value":
				return ec.fieldContext_StructTuple_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type StructTuple", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TypeProperty_name(ctx context.Context, field graphql.CollectedField, obj *graph.TypeProperty) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TypeProperty_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TypeProperty_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TypeProperty",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TypeProperty_dataType(ctx context.Context, field graphql.CollectedField, obj *graph.TypeProperty) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TypeProperty_dataType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DataType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(graph.DataType)
	fc.Result = res
	return ec.marshalNDataType2githubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐDataType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TypeProperty_dataType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TypeProperty",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DataType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_locations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_locations(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __DirectiveLocation does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_isRepeatable(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsRepeatable, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_isDeprecated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_deprecationReason(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_defaultValue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_types(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_types(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_queryType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_queryType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_mutationType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_mutationType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_subscriptionType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_directives(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_directives(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Directive_name(ctx, field)
			case "description":
				return ec.fieldContext___Directive_description(ctx, field)
			case "locations":
				return ec.fieldContext___Directive_locations(ctx, field)
			case "args":
				return ec.fieldContext___Directive_args(ctx, field)
			case "isRepeatable":
				return ec.fieldContext___Directive_isRepeatable(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Directive", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_kind(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_kind(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __TypeKind does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_fields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_fields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Field_name(ctx, field)
			case "description":
				return ec.fieldContext___Field_description(ctx, field)
			case "args":
				return ec.fieldContext___Field_args(ctx, field)
			case "type":
				return ec.fieldContext___Field_type(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___Field_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___Field_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Field", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_fields_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_interfaces(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_interfaces(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_possibleTypes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_possibleTypes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_enumValues(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_enumValues(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___EnumValue_name(ctx, field)
			case "description":
				return ec.fieldContext___EnumValue_description(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___EnumValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___EnumValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __EnumValue", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_enumValues_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_inputFields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_inputFields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_ofType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_ofType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_specifiedByURL(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpecifiedByURL(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputArtifactTypeInput(ctx context.Context, obj interface{}) (graph.ArtifactTypeInput, error) {
	var it graph.ArtifactTypeInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "version", "typeKind", "description", "externalId", "properties"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "version":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("version"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Version = data
		case "typeKind":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("typeKind"))
			data, err := ec.unmarshalNTypeKind2githubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐTypeKind(ctx, v)
			if err != nil {
				return it, err
			}
			it.TypeKind = data
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "externalId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("externalId"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExternalID = data
		case "properties":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("properties"))
			data, err := ec.unmarshalOTypePropertyInput2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐTypePropertyInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Properties = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputInstanceFilter(ctx context.Context, obj interface{}) (graph.InstanceFilter, error) {
	var it graph.InstanceFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"ids", "typeIds", "names", "externalIds"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "ids":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ids"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Ids = data
		case "typeIds":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("typeIds"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TypeIds = data
		case "names":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("names"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Names = data
		case "externalIds":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("externalIds"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExternalIds = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTypeFilter(ctx context.Context, obj interface{}) (graph.TypeFilter, error) {
	var it graph.TypeFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"ids", "names", "versions", "externalIds"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "ids":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ids"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Ids = data
		case "names":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("names"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Names = data
		case "versions":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("versions"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Versions = data
		case "externalIds":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("externalIds"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExternalIds = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTypePropertyInput(ctx context.Context, obj interface{}) (graph.TypePropertyInput, error) {
	var it graph.TypePropertyInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "dataType"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "dataType":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dataType"))
			data, err := ec.unmarshalNDataType2githubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐDataType(ctx, v)
			if err != nil {
				return it, err
			}
			it.DataType = data
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

func (ec *executionContext) _ArtifactInterface(ctx context.Context, sel ast.SelectionSet, obj graph.ArtifactInterface) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case graph.Artifact:
		return ec._Artifact(ctx, sel, &obj)
	case *graph.Artifact:
		if obj == nil {
			return graphql.Null
		}
		return ec._Artifact(ctx, sel, obj)
	case graph.MlmdDataset:
		return ec._MlmdDataset(ctx, sel, &obj)
	case *graph.MlmdDataset:
		if obj == nil {
			return graphql.Null
		}
		return ec._MlmdDataset(ctx, sel, obj)
	case graph.MlmdModel:
		return ec._MlmdModel(ctx, sel, &obj)
	case *graph.MlmdModel:
		if obj == nil {
			return graphql.Null
		}
		return ec._MlmdModel(ctx, sel, obj)
	case graph.MlmdMetrics:
		return ec._MlmdMetrics(ctx, sel, &obj)
	case *graph.MlmdMetrics:
		if obj == nil {
			return graphql.Null
		}
		return ec._MlmdMetrics(ctx, sel, obj)
	case graph.MlmdStatistics:
		return ec._MlmdStatistics(ctx, sel, &obj)
	case *graph.MlmdStatistics:
		if obj == nil {
			return graphql.Null
		}
		return ec._MlmdStatistics(ctx, sel, obj)
	case graph.MlschemaModel:
		return ec._MlschemaModel(ctx, sel, &obj)
	case *graph.MlschemaModel:
		if obj == nil {
			return graphql.Null
		}
		return ec._MlschemaModel(ctx, sel, obj)
	case graph.MlschemaModelEvaluation:
		return ec._MlschemaModelEvaluation(ctx, sel, &obj)
	case *graph.MlschemaModelEvaluation:
		if obj == nil {
			return graphql.Null
		}
		return ec._MlschemaModelEvaluation(ctx, sel, obj)
	case graph.MlschemaEvaluationMeasure:
		return ec._MlschemaEvaluationMeasure(ctx, sel, &obj)
	case *graph.MlschemaEvaluationMeasure:
		if obj == nil {
			return graphql.Null
		}
		return ec._MlschemaEvaluationMeasure(ctx, sel, obj)
	case graph.MlschemaEvaluationSpecification:
		return ec._MlschemaEvaluationSpecification(ctx, sel, &obj)
	case *graph.MlschemaEvaluationSpecification:
		if obj == nil {
			return graphql.Null
		}
		return ec._MlschemaEvaluationSpecification(ctx, sel, obj)
	case graph.MlschemaEvaluationProcedure:
		return ec._MlschemaEvaluationProcedure(ctx, sel, &obj)
	case *graph.MlschemaEvaluationProcedure:
		if obj == nil {
			return graphql.Null
		}
		return ec._MlschemaEvaluationProcedure(ctx, sel, obj)
	case graph.MlschemaTask:
		return ec._MlschemaTask(ctx, sel, &obj)
	case *graph.MlschemaTask:
		if obj == nil {
			return graphql.Null
		}
		return ec._MlschemaTask(ctx, sel, obj)
	case graph.MlschemaData:
		return ec._MlschemaData(ctx, sel, &obj)
	case *graph.MlschemaData:
		if obj == nil {
			return graphql.Null
		}
		return ec._MlschemaData(ctx, sel, obj)
	case graph.MlschemaDataSet:
		return ec._MlschemaDataSet(ctx, sel, &obj)
	case *graph.MlschemaDataSet:
		if obj == nil {
			return graphql.Null
		}
		return ec._MlschemaDataSet(ctx, sel, obj)
	case graph.MlschemaFeature:
		return ec._MlschemaFeature(ctx, sel, &obj)
	case *graph.MlschemaFeature:
		if obj == nil {
			return graphql.Null
		}
		return ec._MlschemaFeature(ctx, sel, obj)
	case graph.MlschemaAlgorithm:
		return ec._MlschemaAlgorithm(ctx, sel, &obj)
	case *graph.MlschemaAlgorithm:
		if obj == nil {
			return graphql.Null
		}
		return ec._MlschemaAlgorithm(ctx, sel, obj)
	case graph.MlschemaSoftware:
		return ec._MlschemaSoftware(ctx, sel, &obj)
	case *graph.MlschemaSoftware:
		if obj == nil {
			return graphql.Null
		}
		return ec._MlschemaSoftware(ctx, sel, obj)
	case graph.MlschemaImplementation:
		return ec._MlschemaImplementation(ctx, sel, &obj)
	case *graph.MlschemaImplementation:
		if obj == nil {
			return graphql.Null
		}
		return ec._MlschemaImplementation(ctx, sel, obj)
	case graph.MlschemaHyperParameter:
		return ec._MlschemaHyperParameter(ctx, sel, &obj)
	case *graph.MlschemaHyperParameter:
		if obj == nil {
			return graphql.Null
		}
		return ec._MlschemaHyperParameter(ctx, sel, obj)
	case graph.MlschemaHyperParameterSetting:
		return ec._MlschemaHyperParameterSetting(ctx, sel, &obj)
	case *graph.MlschemaHyperParameterSetting:
		if obj == nil {
			return graphql.Null
		}
		return ec._MlschemaHyperParameterSetting(ctx, sel, obj)
	case graph.MlschemaImplementationCharacteristic:
		return ec._MlschemaImplementationCharacteristic(ctx, sel, &obj)
	case *graph.MlschemaImplementationCharacteristic:
		if obj == nil {
			return graphql.Null
		}
		return ec._MlschemaImplementationCharacteristic(ctx, sel, obj)
	case graph.MlschemaDatasetCharacteristic:
		return ec._MlschemaDatasetCharacteristic(ctx, sel, &obj)
	case *graph.MlschemaDatasetCharacteristic:
		if obj == nil {
			return graphql.Null
		}
		return ec._MlschemaDatasetCharacteristic(ctx, sel, obj)
	case graph.MlschemaFeatureCharacteristic:
		return ec._MlschemaFeatureCharacteristic(ctx, sel, &obj)
	case *graph.MlschemaFeatureCharacteristic:
		if obj == nil {
			return graphql.Null
		}
		return ec._MlschemaFeatureCharacteristic(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _ContextInterface(ctx context.Context, sel ast.SelectionSet, obj graph.ContextInterface) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case graph.Context:
		return ec._Context(ctx, sel, &obj)
	case *graph.Context:
		if obj == nil {
			return graphql.Null
		}
		return ec._Context(ctx, sel, obj)
	case graph.MlschemaRegisteredModel:
		return ec._MlschemaRegisteredModel(ctx, sel, &obj)
	case *graph.MlschemaRegisteredModel:
		if obj == nil {
			return graphql.Null
		}
		return ec._MlschemaRegisteredModel(ctx, sel, obj)
	case graph.MlschemaModelVersion:
		return ec._MlschemaModelVersion(ctx, sel, &obj)
	case *graph.MlschemaModelVersion:
		if obj == nil {
			return graphql.Null
		}
		return ec._MlschemaModelVersion(ctx, sel, obj)
	case graph.MlschemaDataCharacteristic:
		return ec._MlschemaDataCharacteristic(ctx, sel, &obj)
	case *graph.MlschemaDataCharacteristic:
		if obj == nil {
			return graphql.Null
		}
		return ec._MlschemaDataCharacteristic(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _EventStep(ctx context.Context, sel ast.SelectionSet, obj graph.EventStep) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case graph.EventStepIndex:
		return ec._EventStepIndex(ctx, sel, &obj)
	case *graph.EventStepIndex:
		if obj == nil {
			return graphql.Null
		}
		return ec._EventStepIndex(ctx, sel, obj)
	case graph.EventStepKey:
		return ec._EventStepKey(ctx, sel, &obj)
	case *graph.EventStepKey:
		if obj == nil {
			return graphql.Null
		}
		return ec._EventStepKey(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _ExecutionInterface(ctx context.Context, sel ast.SelectionSet, obj graph.ExecutionInterface) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case graph.MlmdTrain:
		return ec._MlmdTrain(ctx, sel, &obj)
	case *graph.MlmdTrain:
		if obj == nil {
			return graphql.Null
		}
		return ec._MlmdTrain(ctx, sel, obj)
	case graph.MlmdTransform:
		return ec._MlmdTransform(ctx, sel, &obj)
	case *graph.MlmdTransform:
		if obj == nil {
			return graphql.Null
		}
		return ec._MlmdTransform(ctx, sel, obj)
	case graph.MlmdProcess:
		return ec._MlmdProcess(ctx, sel, &obj)
	case *graph.MlmdProcess:
		if obj == nil {
			return graphql.Null
		}
		return ec._MlmdProcess(ctx, sel, obj)
	case graph.MlmdEvaluate:
		return ec._MlmdEvaluate(ctx, sel, &obj)
	case *graph.MlmdEvaluate:
		if obj == nil {
			return graphql.Null
		}
		return ec._MlmdEvaluate(ctx, sel, obj)
	case graph.MlmdDeploy:
		return ec._MlmdDeploy(ctx, sel, &obj)
	case *graph.MlmdDeploy:
		if obj == nil {
			return graphql.Null
		}
		return ec._MlmdDeploy(ctx, sel, obj)
	case graph.MlschemaStudy:
		return ec._MlschemaStudy(ctx, sel, &obj)
	case *graph.MlschemaStudy:
		if obj == nil {
			return graphql.Null
		}
		return ec._MlschemaStudy(ctx, sel, obj)
	case graph.MlschemaExperiment:
		return ec._MlschemaExperiment(ctx, sel, &obj)
	case *graph.MlschemaExperiment:
		if obj == nil {
			return graphql.Null
		}
		return ec._MlschemaExperiment(ctx, sel, obj)
	case graph.MlschemaRun:
		return ec._MlschemaRun(ctx, sel, &obj)
	case *graph.MlschemaRun:
		if obj == nil {
			return graphql.Null
		}
		return ec._MlschemaRun(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _StructValueType(ctx context.Context, sel ast.SelectionSet, obj graph.StructValueType) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case graph.IntValue:
		return ec._IntValue(ctx, sel, &obj)
	case *graph.IntValue:
		if obj == nil {
			return graphql.Null
		}
		return ec._IntValue(ctx, sel, obj)
	case graph.DoubleValue:
		return ec._DoubleValue(ctx, sel, &obj)
	case *graph.DoubleValue:
		if obj == nil {
			return graphql.Null
		}
		return ec._DoubleValue(ctx, sel, obj)
	case graph.StringValue:
		return ec._StringValue(ctx, sel, &obj)
	case *graph.StringValue:
		if obj == nil {
			return graphql.Null
		}
		return ec._StringValue(ctx, sel, obj)
	case graph.BoolValue:
		return ec._BoolValue(ctx, sel, &obj)
	case *graph.BoolValue:
		if obj == nil {
			return graphql.Null
		}
		return ec._BoolValue(ctx, sel, obj)
	case graph.StructValue:
		return ec._StructValue(ctx, sel, &obj)
	case *graph.StructValue:
		if obj == nil {
			return graphql.Null
		}
		return ec._StructValue(ctx, sel, obj)
	case graph.ListValue:
		return ec._ListValue(ctx, sel, &obj)
	case *graph.ListValue:
		if obj == nil {
			return graphql.Null
		}
		return ec._ListValue(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _Type(ctx context.Context, sel ast.SelectionSet, obj graph.Type) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case graph.ArtifactType:
		return ec._ArtifactType(ctx, sel, &obj)
	case *graph.ArtifactType:
		if obj == nil {
			return graphql.Null
		}
		return ec._ArtifactType(ctx, sel, obj)
	case graph.ContextType:
		return ec._ContextType(ctx, sel, &obj)
	case *graph.ContextType:
		if obj == nil {
			return graphql.Null
		}
		return ec._ContextType(ctx, sel, obj)
	case graph.ExecutionType:
		return ec._ExecutionType(ctx, sel, &obj)
	case *graph.ExecutionType:
		if obj == nil {
			return graphql.Null
		}
		return ec._ExecutionType(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _Value(ctx context.Context, sel ast.SelectionSet, obj graph.Value) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case graph.IntValue:
		return ec._IntValue(ctx, sel, &obj)
	case *graph.IntValue:
		if obj == nil {
			return graphql.Null
		}
		return ec._IntValue(ctx, sel, obj)
	case graph.DoubleValue:
		return ec._DoubleValue(ctx, sel, &obj)
	case *graph.DoubleValue:
		if obj == nil {
			return graphql.Null
		}
		return ec._DoubleValue(ctx, sel, obj)
	case graph.StringValue:
		return ec._StringValue(ctx, sel, &obj)
	case *graph.StringValue:
		if obj == nil {
			return graphql.Null
		}
		return ec._StringValue(ctx, sel, obj)
	case graph.BoolValue:
		return ec._BoolValue(ctx, sel, &obj)
	case *graph.BoolValue:
		if obj == nil {
			return graphql.Null
		}
		return ec._BoolValue(ctx, sel, obj)
	case graph.StructValue:
		return ec._StructValue(ctx, sel, &obj)
	case *graph.StructValue:
		if obj == nil {
			return graphql.Null
		}
		return ec._StructValue(ctx, sel, obj)
	case graph.ProtoValue:
		return ec._ProtoValue(ctx, sel, &obj)
	case *graph.ProtoValue:
		if obj == nil {
			return graphql.Null
		}
		return ec._ProtoValue(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var artifactImplementors = []string{"Artifact", "ArtifactInterface"}

func (ec *executionContext) _Artifact(ctx context.Context, sel ast.SelectionSet, obj *graph.Artifact) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, artifactImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Artifact")
		case "id":
			out.Values[i] = ec._Artifact_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "typeId":
			out.Values[i] = ec._Artifact_typeId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "uri":
			out.Values[i] = ec._Artifact_uri(ctx, field, obj)
		case "state":
			out.Values[i] = ec._Artifact_state(ctx, field, obj)
		case "name":
			out.Values[i] = ec._Artifact_name(ctx, field, obj)
		case "externalId":
			out.Values[i] = ec._Artifact_externalId(ctx, field, obj)
		case "createTimeSinceEpoch":
			out.Values[i] = ec._Artifact_createTimeSinceEpoch(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "lastUpdateTimeSinceEpoch":
			out.Values[i] = ec._Artifact_lastUpdateTimeSinceEpoch(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "type":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Artifact_type(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "properties":
			out.Values[i] = ec._Artifact_properties(ctx, field, obj)
		case "attributions":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Artifact_attributions(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "events":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Artifact_events(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var artifactTypeImplementors = []string{"ArtifactType", "Type"}

func (ec *executionContext) _ArtifactType(ctx context.Context, sel ast.SelectionSet, obj *graph.ArtifactType) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, artifactTypeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ArtifactType")
		case "id":
			out.Values[i] = ec._ArtifactType_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._ArtifactType_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "version":
			out.Values[i] = ec._ArtifactType_version(ctx, field, obj)
		case "typeKind":
			out.Values[i] = ec._ArtifactType_typeKind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec._ArtifactType_description(ctx, field, obj)
		case "externalId":
			out.Values[i] = ec._ArtifactType_externalId(ctx, field, obj)
		case "properties":
			out.Values[i] = ec._ArtifactType_properties(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var associationImplementors = []string{"Association"}

func (ec *executionContext) _Association(ctx context.Context, sel ast.SelectionSet, obj *graph.Association) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, associationImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Association")
		case "id":
			out.Values[i] = ec._Association_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "contextId":
			out.Values[i] = ec._Association_contextId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "executionId":
			out.Values[i] = ec._Association_executionId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "context":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Association_context(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "execution":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Association_execution(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var attributionImplementors = []string{"Attribution"}

func (ec *executionContext) _Attribution(ctx context.Context, sel ast.SelectionSet, obj *graph.Attribution) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, attributionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Attribution")
		case "id":
			out.Values[i] = ec._Attribution_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "contextId":
			out.Values[i] = ec._Attribution_contextId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "artifactId":
			out.Values[i] = ec._Attribution_artifactId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "context":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Attribution_context(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "artifact":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Attribution_artifact(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var boolValueImplementors = []string{"BoolValue", "Value", "StructValueType"}

func (ec *executionContext) _BoolValue(ctx context.Context, sel ast.SelectionSet, obj *graph.BoolValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, boolValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BoolValue")
		case "value":
			out.Values[i] = ec._BoolValue_value(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var contextImplementors = []string{"Context", "ContextInterface"}

func (ec *executionContext) _Context(ctx context.Context, sel ast.SelectionSet, obj *graph.Context) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, contextImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Context")
		case "id":
			out.Values[i] = ec._Context_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "typeId":
			out.Values[i] = ec._Context_typeId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "name":
			out.Values[i] = ec._Context_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "externalId":
			out.Values[i] = ec._Context_externalId(ctx, field, obj)
		case "createTimeSinceEpoch":
			out.Values[i] = ec._Context_createTimeSinceEpoch(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "lastUpdateTimeSinceEpoch":
			out.Values[i] = ec._Context_lastUpdateTimeSinceEpoch(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "type":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Context_type(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "properties":
			out.Values[i] = ec._Context_properties(ctx, field, obj)
		case "parents":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Context_parents(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "children":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Context_children(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "attributions":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Context_attributions(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "associations":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Context_associations(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var contextTypeImplementors = []string{"ContextType", "Type"}

func (ec *executionContext) _ContextType(ctx context.Context, sel ast.SelectionSet, obj *graph.ContextType) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, contextTypeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ContextType")
		case "id":
			out.Values[i] = ec._ContextType_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._ContextType_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "version":
			out.Values[i] = ec._ContextType_version(ctx, field, obj)
		case "typeKind":
			out.Values[i] = ec._ContextType_typeKind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec._ContextType_description(ctx, field, obj)
		case "externalId":
			out.Values[i] = ec._ContextType_externalId(ctx, field, obj)
		case "properties":
			out.Values[i] = ec._ContextType_properties(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var doubleValueImplementors = []string{"DoubleValue", "Value", "StructValueType"}

func (ec *executionContext) _DoubleValue(ctx context.Context, sel ast.SelectionSet, obj *graph.DoubleValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, doubleValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DoubleValue")
		case "value":
			out.Values[i] = ec._DoubleValue_value(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var eventImplementors = []string{"Event"}

func (ec *executionContext) _Event(ctx context.Context, sel ast.SelectionSet, obj *graph.Event) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, eventImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Event")
		case "id":
			out.Values[i] = ec._Event_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "artifactId":
			out.Values[i] = ec._Event_artifactId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "executionId":
			out.Values[i] = ec._Event_executionId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "type":
			out.Values[i] = ec._Event_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "path":
			out.Values[i] = ec._Event_path(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "millisecondsSinceEpoch":
			out.Values[i] = ec._Event_millisecondsSinceEpoch(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "artifact":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Event_artifact(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "execution":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Event_execution(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var eventStepIndexImplementors = []string{"EventStepIndex", "EventStep"}

func (ec *executionContext) _EventStepIndex(ctx context.Context, sel ast.SelectionSet, obj *graph.EventStepIndex) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, eventStepIndexImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EventStepIndex")
		case "index":
			out.Values[i] = ec._EventStepIndex_index(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var eventStepKeyImplementors = []string{"EventStepKey", "EventStep"}

func (ec *executionContext) _EventStepKey(ctx context.Context, sel ast.SelectionSet, obj *graph.EventStepKey) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, eventStepKeyImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EventStepKey")
		case "key":
			out.Values[i] = ec._EventStepKey_key(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var executionImplementors = []string{"Execution"}

func (ec *executionContext) _Execution(ctx context.Context, sel ast.SelectionSet, obj *graph.Execution) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, executionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Execution")
		case "id":
			out.Values[i] = ec._Execution_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "typeId":
			out.Values[i] = ec._Execution_typeId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "lastKnownState":
			out.Values[i] = ec._Execution_lastKnownState(ctx, field, obj)
		case "name":
			out.Values[i] = ec._Execution_name(ctx, field, obj)
		case "externalId":
			out.Values[i] = ec._Execution_externalId(ctx, field, obj)
		case "createTimeSinceEpoch":
			out.Values[i] = ec._Execution_createTimeSinceEpoch(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "lastUpdateTimeSinceEpoch":
			out.Values[i] = ec._Execution_lastUpdateTimeSinceEpoch(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "type":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Execution_type(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "properties":
			out.Values[i] = ec._Execution_properties(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "associations":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Execution_associations(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "events":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Execution_events(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var executionTypeImplementors = []string{"ExecutionType", "Type"}

func (ec *executionContext) _ExecutionType(ctx context.Context, sel ast.SelectionSet, obj *graph.ExecutionType) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, executionTypeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ExecutionType")
		case "id":
			out.Values[i] = ec._ExecutionType_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._ExecutionType_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "version":
			out.Values[i] = ec._ExecutionType_version(ctx, field, obj)
		case "typeKind":
			out.Values[i] = ec._ExecutionType_typeKind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec._ExecutionType_description(ctx, field, obj)
		case "externalId":
			out.Values[i] = ec._ExecutionType_externalId(ctx, field, obj)
		case "inputType":
			out.Values[i] = ec._ExecutionType_inputType(ctx, field, obj)
		case "outputType":
			out.Values[i] = ec._ExecutionType_outputType(ctx, field, obj)
		case "properties":
			out.Values[i] = ec._ExecutionType_properties(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var instancePropertyImplementors = []string{"InstanceProperty"}

func (ec *executionContext) _InstanceProperty(ctx context.Context, sel ast.SelectionSet, obj *graph.InstanceProperty) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, instancePropertyImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("InstanceProperty")
		case "name":
			out.Values[i] = ec._InstanceProperty_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "isCustomProperty":
			out.Values[i] = ec._InstanceProperty_isCustomProperty(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "propertyValue":
			out.Values[i] = ec._InstanceProperty_propertyValue(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var intValueImplementors = []string{"IntValue", "Value", "StructValueType"}

func (ec *executionContext) _IntValue(ctx context.Context, sel ast.SelectionSet, obj *graph.IntValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, intValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("IntValue")
		case "value":
			out.Values[i] = ec._IntValue_value(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var listValueImplementors = []string{"ListValue", "StructValueType"}

func (ec *executionContext) _ListValue(ctx context.Context, sel ast.SelectionSet, obj *graph.ListValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, listValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ListValue")
		case "value":
			out.Values[i] = ec._ListValue_value(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var mlmdDatasetImplementors = []string{"MlmdDataset", "ArtifactInterface"}

func (ec *executionContext) _MlmdDataset(ctx context.Context, sel ast.SelectionSet, obj *graph.MlmdDataset) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mlmdDatasetImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MlmdDataset")
		case "id":
			out.Values[i] = ec._MlmdDataset_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "typeId":
			out.Values[i] = ec._MlmdDataset_typeId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "uri":
			out.Values[i] = ec._MlmdDataset_uri(ctx, field, obj)
		case "state":
			out.Values[i] = ec._MlmdDataset_state(ctx, field, obj)
		case "name":
			out.Values[i] = ec._MlmdDataset_name(ctx, field, obj)
		case "externalId":
			out.Values[i] = ec._MlmdDataset_externalId(ctx, field, obj)
		case "createTimeSinceEpoch":
			out.Values[i] = ec._MlmdDataset_createTimeSinceEpoch(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "lastUpdateTimeSinceEpoch":
			out.Values[i] = ec._MlmdDataset_lastUpdateTimeSinceEpoch(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "intProp":
			out.Values[i] = ec._MlmdDataset_intProp(ctx, field, obj)
		case "secondProp":
			out.Values[i] = ec._MlmdDataset_secondProp(ctx, field, obj)
		case "type":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MlmdDataset_type(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "properties":
			out.Values[i] = ec._MlmdDataset_properties(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "attributions":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MlmdDataset_attributions(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "events":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MlmdDataset_events(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var mlmdDeployImplementors = []string{"MlmdDeploy", "ExecutionInterface"}

func (ec *executionContext) _MlmdDeploy(ctx context.Context, sel ast.SelectionSet, obj *graph.MlmdDeploy) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mlmdDeployImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MlmdDeploy")
		case "id":
			out.Values[i] = ec._MlmdDeploy_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "typeId":
			out.Values[i] = ec._MlmdDeploy_typeId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "lastKnownState":
			out.Values[i] = ec._MlmdDeploy_lastKnownState(ctx, field, obj)
		case "name":
			out.Values[i] = ec._MlmdDeploy_name(ctx, field, obj)
		case "externalId":
			out.Values[i] = ec._MlmdDeploy_externalId(ctx, field, obj)
		case "createTimeSinceEpoch":
			out.Values[i] = ec._MlmdDeploy_createTimeSinceEpoch(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "lastUpdateTimeSinceEpoch":
			out.Values[i] = ec._MlmdDeploy_lastUpdateTimeSinceEpoch(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "type":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MlmdDeploy_type(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "properties":
			out.Values[i] = ec._MlmdDeploy_properties(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "associations":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MlmdDeploy_associations(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "events":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MlmdDeploy_events(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var mlmdEvaluateImplementors = []string{"MlmdEvaluate", "ExecutionInterface"}

func (ec *executionContext) _MlmdEvaluate(ctx context.Context, sel ast.SelectionSet, obj *graph.MlmdEvaluate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mlmdEvaluateImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MlmdEvaluate")
		case "id":
			out.Values[i] = ec._MlmdEvaluate_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "typeId":
			out.Values[i] = ec._MlmdEvaluate_typeId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "lastKnownState":
			out.Values[i] = ec._MlmdEvaluate_lastKnownState(ctx, field, obj)
		case "name":
			out.Values[i] = ec._MlmdEvaluate_name(ctx, field, obj)
		case "externalId":
			out.Values[i] = ec._MlmdEvaluate_externalId(ctx, field, obj)
		case "createTimeSinceEpoch":
			out.Values[i] = ec._MlmdEvaluate_createTimeSinceEpoch(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "lastUpdateTimeSinceEpoch":
			out.Values[i] = ec._MlmdEvaluate_lastUpdateTimeSinceEpoch(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "type":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MlmdEvaluate_type(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "properties":
			out.Values[i] = ec._MlmdEvaluate_properties(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "associations":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MlmdEvaluate_associations(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "events":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MlmdEvaluate_events(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var mlmdMetricsImplementors = []string{"MlmdMetrics", "ArtifactInterface"}

func (ec *executionContext) _MlmdMetrics(ctx context.Context, sel ast.SelectionSet, obj *graph.MlmdMetrics) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mlmdMetricsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MlmdMetrics")
		case "id":
			out.Values[i] = ec._MlmdMetrics_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "typeId":
			out.Values[i] = ec._MlmdMetrics_typeId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "uri":
			out.Values[i] = ec._MlmdMetrics_uri(ctx, field, obj)
		case "state":
			out.Values[i] = ec._MlmdMetrics_state(ctx, field, obj)
		case "name":
			out.Values[i] = ec._MlmdMetrics_name(ctx, field, obj)
		case "externalId":
			out.Values[i] = ec._MlmdMetrics_externalId(ctx, field, obj)
		case "createTimeSinceEpoch":
			out.Values[i] = ec._MlmdMetrics_createTimeSinceEpoch(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "lastUpdateTimeSinceEpoch":
			out.Values[i] = ec._MlmdMetrics_lastUpdateTimeSinceEpoch(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "stringProp":
			out.Values[i] = ec._MlmdMetrics_stringProp(ctx, field, obj)
		case "type":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MlmdMetrics_type(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "properties":
			out.Values[i] = ec._MlmdMetrics_properties(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "attributions":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MlmdMetrics_attributions(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "events":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MlmdMetrics_events(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var mlmdModelImplementors = []string{"MlmdModel", "ArtifactInterface"}

func (ec *executionContext) _MlmdModel(ctx context.Context, sel ast.SelectionSet, obj *graph.MlmdModel) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mlmdModelImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MlmdModel")
		case "id":
			out.Values[i] = ec._MlmdModel_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "typeId":
			out.Values[i] = ec._MlmdModel_typeId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "uri":
			out.Values[i] = ec._MlmdModel_uri(ctx, field, obj)
		case "state":
			out.Values[i] = ec._MlmdModel_state(ctx, field, obj)
		case "name":
			out.Values[i] = ec._MlmdModel_name(ctx, field, obj)
		case "externalId":
			out.Values[i] = ec._MlmdModel_externalId(ctx, field, obj)
		case "createTimeSinceEpoch":
			out.Values[i] = ec._MlmdModel_createTimeSinceEpoch(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "lastUpdateTimeSinceEpoch":
			out.Values[i] = ec._MlmdModel_lastUpdateTimeSinceEpoch(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "doubleProp":
			out.Values[i] = ec._MlmdModel_doubleProp(ctx, field, obj)
		case "type":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MlmdModel_type(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "properties":
			out.Values[i] = ec._MlmdModel_properties(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "attributions":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MlmdModel_attributions(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "events":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MlmdModel_events(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var mlmdProcessImplementors = []string{"MlmdProcess", "ExecutionInterface"}

func (ec *executionContext) _MlmdProcess(ctx context.Context, sel ast.SelectionSet, obj *graph.MlmdProcess) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mlmdProcessImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MlmdProcess")
		case "id":
			out.Values[i] = ec._MlmdProcess_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "typeId":
			out.Values[i] = ec._MlmdProcess_typeId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "lastKnownState":
			out.Values[i] = ec._MlmdProcess_lastKnownState(ctx, field, obj)
		case "name":
			out.Values[i] = ec._MlmdProcess_name(ctx, field, obj)
		case "externalId":
			out.Values[i] = ec._MlmdProcess_externalId(ctx, field, obj)
		case "createTimeSinceEpoch":
			out.Values[i] = ec._MlmdProcess_createTimeSinceEpoch(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "lastUpdateTimeSinceEpoch":
			out.Values[i] = ec._MlmdProcess_lastUpdateTimeSinceEpoch(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "type":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MlmdProcess_type(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "properties":
			out.Values[i] = ec._MlmdProcess_properties(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "associations":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MlmdProcess_associations(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "events":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MlmdProcess_events(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var mlmdStatisticsImplementors = []string{"MlmdStatistics", "ArtifactInterface"}

func (ec *executionContext) _MlmdStatistics(ctx context.Context, sel ast.SelectionSet, obj *graph.MlmdStatistics) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mlmdStatisticsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MlmdStatistics")
		case "id":
			out.Values[i] = ec._MlmdStatistics_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "typeId":
			out.Values[i] = ec._MlmdStatistics_typeId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "uri":
			out.Values[i] = ec._MlmdStatistics_uri(ctx, field, obj)
		case "state":
			out.Values[i] = ec._MlmdStatistics_state(ctx, field, obj)
		case "name":
			out.Values[i] = ec._MlmdStatistics_name(ctx, field, obj)
		case "externalId":
			out.Values[i] = ec._MlmdStatistics_externalId(ctx, field, obj)
		case "createTimeSinceEpoch":
			out.Values[i] = ec._MlmdStatistics_createTimeSinceEpoch(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "lastUpdateTimeSinceEpoch":
			out.Values[i] = ec._MlmdStatistics_lastUpdateTimeSinceEpoch(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "structProp":
			out.Values[i] = ec._MlmdStatistics_structProp(ctx, field, obj)
		case "type":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MlmdStatistics_type(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "properties":
			out.Values[i] = ec._MlmdStatistics_properties(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "attributions":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MlmdStatistics_attributions(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "events":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MlmdStatistics_events(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var mlmdTrainImplementors = []string{"MlmdTrain", "ExecutionInterface"}

func (ec *executionContext) _MlmdTrain(ctx context.Context, sel ast.SelectionSet, obj *graph.MlmdTrain) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mlmdTrainImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MlmdTrain")
		case "id":
			out.Values[i] = ec._MlmdTrain_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "typeId":
			out.Values[i] = ec._MlmdTrain_typeId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "lastKnownState":
			out.Values[i] = ec._MlmdTrain_lastKnownState(ctx, field, obj)
		case "name":
			out.Values[i] = ec._MlmdTrain_name(ctx, field, obj)
		case "externalId":
			out.Values[i] = ec._MlmdTrain_externalId(ctx, field, obj)
		case "createTimeSinceEpoch":
			out.Values[i] = ec._MlmdTrain_createTimeSinceEpoch(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "lastUpdateTimeSinceEpoch":
			out.Values[i] = ec._MlmdTrain_lastUpdateTimeSinceEpoch(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "protoProp":
			out.Values[i] = ec._MlmdTrain_protoProp(ctx, field, obj)
		case "type":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MlmdTrain_type(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "properties":
			out.Values[i] = ec._MlmdTrain_properties(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "associations":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MlmdTrain_associations(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "events":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MlmdTrain_events(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var mlmdTransformImplementors = []string{"MlmdTransform", "ExecutionInterface"}

func (ec *executionContext) _MlmdTransform(ctx context.Context, sel ast.SelectionSet, obj *graph.MlmdTransform) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mlmdTransformImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MlmdTransform")
		case "id":
			out.Values[i] = ec._MlmdTransform_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "typeId":
			out.Values[i] = ec._MlmdTransform_typeId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "lastKnownState":
			out.Values[i] = ec._MlmdTransform_lastKnownState(ctx, field, obj)
		case "name":
			out.Values[i] = ec._MlmdTransform_name(ctx, field, obj)
		case "externalId":
			out.Values[i] = ec._MlmdTransform_externalId(ctx, field, obj)
		case "createTimeSinceEpoch":
			out.Values[i] = ec._MlmdTransform_createTimeSinceEpoch(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "lastUpdateTimeSinceEpoch":
			out.Values[i] = ec._MlmdTransform_lastUpdateTimeSinceEpoch(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "booleanProp":
			out.Values[i] = ec._MlmdTransform_booleanProp(ctx, field, obj)
		case "type":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MlmdTransform_type(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "properties":
			out.Values[i] = ec._MlmdTransform_properties(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "associations":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MlmdTransform_associations(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "events":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MlmdTransform_events(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var mlschemaAlgorithmImplementors = []string{"MlschemaAlgorithm", "ArtifactInterface"}

func (ec *executionContext) _MlschemaAlgorithm(ctx context.Context, sel ast.SelectionSet, obj *graph.MlschemaAlgorithm) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mlschemaAlgorithmImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MlschemaAlgorithm")
		case "id":
			out.Values[i] = ec._MlschemaAlgorithm_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "typeId":
			out.Values[i] = ec._MlschemaAlgorithm_typeId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "uri":
			out.Values[i] = ec._MlschemaAlgorithm_uri(ctx, field, obj)
		case "state":
			out.Values[i] = ec._MlschemaAlgorithm_state(ctx, field, obj)
		case "name":
			out.Values[i] = ec._MlschemaAlgorithm_name(ctx, field, obj)
		case "externalId":
			out.Values[i] = ec._MlschemaAlgorithm_externalId(ctx, field, obj)
		case "createTimeSinceEpoch":
			out.Values[i] = ec._MlschemaAlgorithm_createTimeSinceEpoch(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "lastUpdateTimeSinceEpoch":
			out.Values[i] = ec._MlschemaAlgorithm_lastUpdateTimeSinceEpoch(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "type":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MlschemaAlgorithm_type(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "properties":
			out.Values[i] = ec._MlschemaAlgorithm_properties(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "attributions":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MlschemaAlgorithm_attributions(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "events":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MlschemaAlgorithm_events(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var mlschemaDataImplementors = []string{"MlschemaData", "ArtifactInterface"}

func (ec *executionContext) _MlschemaData(ctx context.Context, sel ast.SelectionSet, obj *graph.MlschemaData) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mlschemaDataImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MlschemaData")
		case "id":
			out.Values[i] = ec._MlschemaData_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "typeId":
			out.Values[i] = ec._MlschemaData_typeId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "uri":
			out.Values[i] = ec._MlschemaData_uri(ctx, field, obj)
		case "state":
			out.Values[i] = ec._MlschemaData_state(ctx, field, obj)
		case "name":
			out.Values[i] = ec._MlschemaData_name(ctx, field, obj)
		case "externalId":
			out.Values[i] = ec._MlschemaData_externalId(ctx, field, obj)
		case "createTimeSinceEpoch":
			out.Values[i] = ec._MlschemaData_createTimeSinceEpoch(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "lastUpdateTimeSinceEpoch":
			out.Values[i] = ec._MlschemaData_lastUpdateTimeSinceEpoch(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "type":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MlschemaData_type(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "properties":
			out.Values[i] = ec._MlschemaData_properties(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "attributions":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MlschemaData_attributions(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "events":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MlschemaData_events(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var mlschemaDataCharacteristicImplementors = []string{"MlschemaDataCharacteristic", "ContextInterface"}

func (ec *executionContext) _MlschemaDataCharacteristic(ctx context.Context, sel ast.SelectionSet, obj *graph.MlschemaDataCharacteristic) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mlschemaDataCharacteristicImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MlschemaDataCharacteristic")
		case "id":
			out.Values[i] = ec._MlschemaDataCharacteristic_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "typeId":
			out.Values[i] = ec._MlschemaDataCharacteristic_typeId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "name":
			out.Values[i] = ec._MlschemaDataCharacteristic_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "externalId":
			out.Values[i] = ec._MlschemaDataCharacteristic_externalId(ctx, field, obj)
		case "createTimeSinceEpoch":
			out.Values[i] = ec._MlschemaDataCharacteristic_createTimeSinceEpoch(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "lastUpdateTimeSinceEpoch":
			out.Values[i] = ec._MlschemaDataCharacteristic_lastUpdateTimeSinceEpoch(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "type":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MlschemaDataCharacteristic_type(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "properties":
			out.Values[i] = ec._MlschemaDataCharacteristic_properties(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "parents":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MlschemaDataCharacteristic_parents(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "children":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MlschemaDataCharacteristic_children(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "attributions":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MlschemaDataCharacteristic_attributions(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "associations":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MlschemaDataCharacteristic_associations(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var mlschemaDataSetImplementors = []string{"MlschemaDataSet", "ArtifactInterface"}

func (ec *executionContext) _MlschemaDataSet(ctx context.Context, sel ast.SelectionSet, obj *graph.MlschemaDataSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mlschemaDataSetImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MlschemaDataSet")
		case "id":
			out.Values[i] = ec._MlschemaDataSet_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "typeId":
			out.Values[i] = ec._MlschemaDataSet_typeId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "uri":
			out.Values[i] = ec._MlschemaDataSet_uri(ctx, field, obj)
		case "state":
			out.Values[i] = ec._MlschemaDataSet_state(ctx, field, obj)
		case "name":
			out.Values[i] = ec._MlschemaDataSet_name(ctx, field, obj)
		case "externalId":
			out.Values[i] = ec._MlschemaDataSet_externalId(ctx, field, obj)
		case "createTimeSinceEpoch":
			out.Values[i] = ec._MlschemaDataSet_createTimeSinceEpoch(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "lastUpdateTimeSinceEpoch":
			out.Values[i] = ec._MlschemaDataSet_lastUpdateTimeSinceEpoch(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "type":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MlschemaDataSet_type(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "properties":
			out.Values[i] = ec._MlschemaDataSet_properties(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "attributions":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MlschemaDataSet_attributions(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "events":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MlschemaDataSet_events(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var mlschemaDatasetCharacteristicImplementors = []string{"MlschemaDatasetCharacteristic", "ArtifactInterface"}

func (ec *executionContext) _MlschemaDatasetCharacteristic(ctx context.Context, sel ast.SelectionSet, obj *graph.MlschemaDatasetCharacteristic) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mlschemaDatasetCharacteristicImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MlschemaDatasetCharacteristic")
		case "id":
			out.Values[i] = ec._MlschemaDatasetCharacteristic_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "typeId":
			out.Values[i] = ec._MlschemaDatasetCharacteristic_typeId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "uri":
			out.Values[i] = ec._MlschemaDatasetCharacteristic_uri(ctx, field, obj)
		case "state":
			out.Values[i] = ec._MlschemaDatasetCharacteristic_state(ctx, field, obj)
		case "name":
			out.Values[i] = ec._MlschemaDatasetCharacteristic_name(ctx, field, obj)
		case "externalId":
			out.Values[i] = ec._MlschemaDatasetCharacteristic_externalId(ctx, field, obj)
		case "createTimeSinceEpoch":
			out.Values[i] = ec._MlschemaDatasetCharacteristic_createTimeSinceEpoch(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "lastUpdateTimeSinceEpoch":
			out.Values[i] = ec._MlschemaDatasetCharacteristic_lastUpdateTimeSinceEpoch(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "type":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MlschemaDatasetCharacteristic_type(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "properties":
			out.Values[i] = ec._MlschemaDatasetCharacteristic_properties(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "attributions":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MlschemaDatasetCharacteristic_attributions(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "events":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MlschemaDatasetCharacteristic_events(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var mlschemaEvaluationMeasureImplementors = []string{"MlschemaEvaluationMeasure", "ArtifactInterface"}

func (ec *executionContext) _MlschemaEvaluationMeasure(ctx context.Context, sel ast.SelectionSet, obj *graph.MlschemaEvaluationMeasure) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mlschemaEvaluationMeasureImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MlschemaEvaluationMeasure")
		case "id":
			out.Values[i] = ec._MlschemaEvaluationMeasure_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "typeId":
			out.Values[i] = ec._MlschemaEvaluationMeasure_typeId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "uri":
			out.Values[i] = ec._MlschemaEvaluationMeasure_uri(ctx, field, obj)
		case "state":
			out.Values[i] = ec._MlschemaEvaluationMeasure_state(ctx, field, obj)
		case "name":
			out.Values[i] = ec._MlschemaEvaluationMeasure_name(ctx, field, obj)
		case "externalId":
			out.Values[i] = ec._MlschemaEvaluationMeasure_externalId(ctx, field, obj)
		case "createTimeSinceEpoch":
			out.Values[i] = ec._MlschemaEvaluationMeasure_createTimeSinceEpoch(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "lastUpdateTimeSinceEpoch":
			out.Values[i] = ec._MlschemaEvaluationMeasure_lastUpdateTimeSinceEpoch(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "type":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MlschemaEvaluationMeasure_type(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "properties":
			out.Values[i] = ec._MlschemaEvaluationMeasure_properties(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "attributions":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MlschemaEvaluationMeasure_attributions(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "events":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MlschemaEvaluationMeasure_events(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var mlschemaEvaluationProcedureImplementors = []string{"MlschemaEvaluationProcedure", "ArtifactInterface"}

func (ec *executionContext) _MlschemaEvaluationProcedure(ctx context.Context, sel ast.SelectionSet, obj *graph.MlschemaEvaluationProcedure) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mlschemaEvaluationProcedureImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MlschemaEvaluationProcedure")
		case "id":
			out.Values[i] = ec._MlschemaEvaluationProcedure_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "typeId":
			out.Values[i] = ec._MlschemaEvaluationProcedure_typeId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "uri":
			out.Values[i] = ec._MlschemaEvaluationProcedure_uri(ctx, field, obj)
		case "state":
			out.Values[i] = ec._MlschemaEvaluationProcedure_state(ctx, field, obj)
		case "name":
			out.Values[i] = ec._MlschemaEvaluationProcedure_name(ctx, field, obj)
		case "externalId":
			out.Values[i] = ec._MlschemaEvaluationProcedure_externalId(ctx, field, obj)
		case "createTimeSinceEpoch":
			out.Values[i] = ec._MlschemaEvaluationProcedure_createTimeSinceEpoch(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "lastUpdateTimeSinceEpoch":
			out.Values[i] = ec._MlschemaEvaluationProcedure_lastUpdateTimeSinceEpoch(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "type":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MlschemaEvaluationProcedure_type(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "properties":
			out.Values[i] = ec._MlschemaEvaluationProcedure_properties(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "attributions":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MlschemaEvaluationProcedure_attributions(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "events":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MlschemaEvaluationProcedure_events(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var mlschemaEvaluationSpecificationImplementors = []string{"MlschemaEvaluationSpecification", "ArtifactInterface"}

func (ec *executionContext) _MlschemaEvaluationSpecification(ctx context.Context, sel ast.SelectionSet, obj *graph.MlschemaEvaluationSpecification) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mlschemaEvaluationSpecificationImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MlschemaEvaluationSpecification")
		case "id":
			out.Values[i] = ec._MlschemaEvaluationSpecification_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "typeId":
			out.Values[i] = ec._MlschemaEvaluationSpecification_typeId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "uri":
			out.Values[i] = ec._MlschemaEvaluationSpecification_uri(ctx, field, obj)
		case "state":
			out.Values[i] = ec._MlschemaEvaluationSpecification_state(ctx, field, obj)
		case "name":
			out.Values[i] = ec._MlschemaEvaluationSpecification_name(ctx, field, obj)
		case "externalId":
			out.Values[i] = ec._MlschemaEvaluationSpecification_externalId(ctx, field, obj)
		case "createTimeSinceEpoch":
			out.Values[i] = ec._MlschemaEvaluationSpecification_createTimeSinceEpoch(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "lastUpdateTimeSinceEpoch":
			out.Values[i] = ec._MlschemaEvaluationSpecification_lastUpdateTimeSinceEpoch(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "type":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MlschemaEvaluationSpecification_type(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "properties":
			out.Values[i] = ec._MlschemaEvaluationSpecification_properties(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "attributions":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MlschemaEvaluationSpecification_attributions(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "events":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MlschemaEvaluationSpecification_events(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var mlschemaExperimentImplementors = []string{"MlschemaExperiment", "ExecutionInterface"}

func (ec *executionContext) _MlschemaExperiment(ctx context.Context, sel ast.SelectionSet, obj *graph.MlschemaExperiment) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mlschemaExperimentImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MlschemaExperiment")
		case "id":
			out.Values[i] = ec._MlschemaExperiment_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "typeId":
			out.Values[i] = ec._MlschemaExperiment_typeId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "lastKnownState":
			out.Values[i] = ec._MlschemaExperiment_lastKnownState(ctx, field, obj)
		case "name":
			out.Values[i] = ec._MlschemaExperiment_name(ctx, field, obj)
		case "externalId":
			out.Values[i] = ec._MlschemaExperiment_externalId(ctx, field, obj)
		case "createTimeSinceEpoch":
			out.Values[i] = ec._MlschemaExperiment_createTimeSinceEpoch(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "lastUpdateTimeSinceEpoch":
			out.Values[i] = ec._MlschemaExperiment_lastUpdateTimeSinceEpoch(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "type":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MlschemaExperiment_type(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "properties":
			out.Values[i] = ec._MlschemaExperiment_properties(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "associations":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MlschemaExperiment_associations(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "events":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MlschemaExperiment_events(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var mlschemaFeatureImplementors = []string{"MlschemaFeature", "ArtifactInterface"}

func (ec *executionContext) _MlschemaFeature(ctx context.Context, sel ast.SelectionSet, obj *graph.MlschemaFeature) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mlschemaFeatureImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MlschemaFeature")
		case "id":
			out.Values[i] = ec._MlschemaFeature_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "typeId":
			out.Values[i] = ec._MlschemaFeature_typeId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "uri":
			out.Values[i] = ec._MlschemaFeature_uri(ctx, field, obj)
		case "state":
			out.Values[i] = ec._MlschemaFeature_state(ctx, field, obj)
		case "name":
			out.Values[i] = ec._MlschemaFeature_name(ctx, field, obj)
		case "externalId":
			out.Values[i] = ec._MlschemaFeature_externalId(ctx, field, obj)
		case "createTimeSinceEpoch":
			out.Values[i] = ec._MlschemaFeature_createTimeSinceEpoch(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "lastUpdateTimeSinceEpoch":
			out.Values[i] = ec._MlschemaFeature_lastUpdateTimeSinceEpoch(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "type":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MlschemaFeature_type(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "properties":
			out.Values[i] = ec._MlschemaFeature_properties(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "attributions":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MlschemaFeature_attributions(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "events":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MlschemaFeature_events(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var mlschemaFeatureCharacteristicImplementors = []string{"MlschemaFeatureCharacteristic", "ArtifactInterface"}

func (ec *executionContext) _MlschemaFeatureCharacteristic(ctx context.Context, sel ast.SelectionSet, obj *graph.MlschemaFeatureCharacteristic) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mlschemaFeatureCharacteristicImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MlschemaFeatureCharacteristic")
		case "id":
			out.Values[i] = ec._MlschemaFeatureCharacteristic_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "typeId":
			out.Values[i] = ec._MlschemaFeatureCharacteristic_typeId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "uri":
			out.Values[i] = ec._MlschemaFeatureCharacteristic_uri(ctx, field, obj)
		case "state":
			out.Values[i] = ec._MlschemaFeatureCharacteristic_state(ctx, field, obj)
		case "name":
			out.Values[i] = ec._MlschemaFeatureCharacteristic_name(ctx, field, obj)
		case "externalId":
			out.Values[i] = ec._MlschemaFeatureCharacteristic_externalId(ctx, field, obj)
		case "createTimeSinceEpoch":
			out.Values[i] = ec._MlschemaFeatureCharacteristic_createTimeSinceEpoch(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "lastUpdateTimeSinceEpoch":
			out.Values[i] = ec._MlschemaFeatureCharacteristic_lastUpdateTimeSinceEpoch(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "type":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MlschemaFeatureCharacteristic_type(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "properties":
			out.Values[i] = ec._MlschemaFeatureCharacteristic_properties(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "attributions":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MlschemaFeatureCharacteristic_attributions(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "events":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MlschemaFeatureCharacteristic_events(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var mlschemaHyperParameterImplementors = []string{"MlschemaHyperParameter", "ArtifactInterface"}

func (ec *executionContext) _MlschemaHyperParameter(ctx context.Context, sel ast.SelectionSet, obj *graph.MlschemaHyperParameter) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mlschemaHyperParameterImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MlschemaHyperParameter")
		case "id":
			out.Values[i] = ec._MlschemaHyperParameter_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "typeId":
			out.Values[i] = ec._MlschemaHyperParameter_typeId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "uri":
			out.Values[i] = ec._MlschemaHyperParameter_uri(ctx, field, obj)
		case "state":
			out.Values[i] = ec._MlschemaHyperParameter_state(ctx, field, obj)
		case "name":
			out.Values[i] = ec._MlschemaHyperParameter_name(ctx, field, obj)
		case "externalId":
			out.Values[i] = ec._MlschemaHyperParameter_externalId(ctx, field, obj)
		case "createTimeSinceEpoch":
			out.Values[i] = ec._MlschemaHyperParameter_createTimeSinceEpoch(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "lastUpdateTimeSinceEpoch":
			out.Values[i] = ec._MlschemaHyperParameter_lastUpdateTimeSinceEpoch(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "type":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MlschemaHyperParameter_type(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "properties":
			out.Values[i] = ec._MlschemaHyperParameter_properties(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "attributions":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MlschemaHyperParameter_attributions(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "events":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MlschemaHyperParameter_events(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var mlschemaHyperParameterSettingImplementors = []string{"MlschemaHyperParameterSetting", "ArtifactInterface"}

func (ec *executionContext) _MlschemaHyperParameterSetting(ctx context.Context, sel ast.SelectionSet, obj *graph.MlschemaHyperParameterSetting) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mlschemaHyperParameterSettingImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MlschemaHyperParameterSetting")
		case "id":
			out.Values[i] = ec._MlschemaHyperParameterSetting_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "typeId":
			out.Values[i] = ec._MlschemaHyperParameterSetting_typeId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "uri":
			out.Values[i] = ec._MlschemaHyperParameterSetting_uri(ctx, field, obj)
		case "state":
			out.Values[i] = ec._MlschemaHyperParameterSetting_state(ctx, field, obj)
		case "name":
			out.Values[i] = ec._MlschemaHyperParameterSetting_name(ctx, field, obj)
		case "externalId":
			out.Values[i] = ec._MlschemaHyperParameterSetting_externalId(ctx, field, obj)
		case "createTimeSinceEpoch":
			out.Values[i] = ec._MlschemaHyperParameterSetting_createTimeSinceEpoch(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "lastUpdateTimeSinceEpoch":
			out.Values[i] = ec._MlschemaHyperParameterSetting_lastUpdateTimeSinceEpoch(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "type":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MlschemaHyperParameterSetting_type(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "properties":
			out.Values[i] = ec._MlschemaHyperParameterSetting_properties(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "attributions":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MlschemaHyperParameterSetting_attributions(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "events":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MlschemaHyperParameterSetting_events(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var mlschemaImplementationImplementors = []string{"MlschemaImplementation", "ArtifactInterface"}

func (ec *executionContext) _MlschemaImplementation(ctx context.Context, sel ast.SelectionSet, obj *graph.MlschemaImplementation) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mlschemaImplementationImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MlschemaImplementation")
		case "id":
			out.Values[i] = ec._MlschemaImplementation_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "typeId":
			out.Values[i] = ec._MlschemaImplementation_typeId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "uri":
			out.Values[i] = ec._MlschemaImplementation_uri(ctx, field, obj)
		case "state":
			out.Values[i] = ec._MlschemaImplementation_state(ctx, field, obj)
		case "name":
			out.Values[i] = ec._MlschemaImplementation_name(ctx, field, obj)
		case "externalId":
			out.Values[i] = ec._MlschemaImplementation_externalId(ctx, field, obj)
		case "createTimeSinceEpoch":
			out.Values[i] = ec._MlschemaImplementation_createTimeSinceEpoch(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "lastUpdateTimeSinceEpoch":
			out.Values[i] = ec._MlschemaImplementation_lastUpdateTimeSinceEpoch(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "type":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MlschemaImplementation_type(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "properties":
			out.Values[i] = ec._MlschemaImplementation_properties(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "attributions":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MlschemaImplementation_attributions(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "events":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MlschemaImplementation_events(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var mlschemaImplementationCharacteristicImplementors = []string{"MlschemaImplementationCharacteristic", "ArtifactInterface"}

func (ec *executionContext) _MlschemaImplementationCharacteristic(ctx context.Context, sel ast.SelectionSet, obj *graph.MlschemaImplementationCharacteristic) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mlschemaImplementationCharacteristicImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MlschemaImplementationCharacteristic")
		case "id":
			out.Values[i] = ec._MlschemaImplementationCharacteristic_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "typeId":
			out.Values[i] = ec._MlschemaImplementationCharacteristic_typeId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "uri":
			out.Values[i] = ec._MlschemaImplementationCharacteristic_uri(ctx, field, obj)
		case "state":
			out.Values[i] = ec._MlschemaImplementationCharacteristic_state(ctx, field, obj)
		case "name":
			out.Values[i] = ec._MlschemaImplementationCharacteristic_name(ctx, field, obj)
		case "externalId":
			out.Values[i] = ec._MlschemaImplementationCharacteristic_externalId(ctx, field, obj)
		case "createTimeSinceEpoch":
			out.Values[i] = ec._MlschemaImplementationCharacteristic_createTimeSinceEpoch(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "lastUpdateTimeSinceEpoch":
			out.Values[i] = ec._MlschemaImplementationCharacteristic_lastUpdateTimeSinceEpoch(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "type":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MlschemaImplementationCharacteristic_type(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "properties":
			out.Values[i] = ec._MlschemaImplementationCharacteristic_properties(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "attributions":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MlschemaImplementationCharacteristic_attributions(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "events":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MlschemaImplementationCharacteristic_events(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var mlschemaModelImplementors = []string{"MlschemaModel", "ArtifactInterface"}

func (ec *executionContext) _MlschemaModel(ctx context.Context, sel ast.SelectionSet, obj *graph.MlschemaModel) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mlschemaModelImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MlschemaModel")
		case "id":
			out.Values[i] = ec._MlschemaModel_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "typeId":
			out.Values[i] = ec._MlschemaModel_typeId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "uri":
			out.Values[i] = ec._MlschemaModel_uri(ctx, field, obj)
		case "state":
			out.Values[i] = ec._MlschemaModel_state(ctx, field, obj)
		case "name":
			out.Values[i] = ec._MlschemaModel_name(ctx, field, obj)
		case "externalId":
			out.Values[i] = ec._MlschemaModel_externalId(ctx, field, obj)
		case "createTimeSinceEpoch":
			out.Values[i] = ec._MlschemaModel_createTimeSinceEpoch(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "lastUpdateTimeSinceEpoch":
			out.Values[i] = ec._MlschemaModel_lastUpdateTimeSinceEpoch(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "type":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MlschemaModel_type(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "properties":
			out.Values[i] = ec._MlschemaModel_properties(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "attributions":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MlschemaModel_attributions(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "events":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MlschemaModel_events(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var mlschemaModelEvaluationImplementors = []string{"MlschemaModelEvaluation", "ArtifactInterface"}

func (ec *executionContext) _MlschemaModelEvaluation(ctx context.Context, sel ast.SelectionSet, obj *graph.MlschemaModelEvaluation) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mlschemaModelEvaluationImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MlschemaModelEvaluation")
		case "id":
			out.Values[i] = ec._MlschemaModelEvaluation_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "typeId":
			out.Values[i] = ec._MlschemaModelEvaluation_typeId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "uri":
			out.Values[i] = ec._MlschemaModelEvaluation_uri(ctx, field, obj)
		case "state":
			out.Values[i] = ec._MlschemaModelEvaluation_state(ctx, field, obj)
		case "name":
			out.Values[i] = ec._MlschemaModelEvaluation_name(ctx, field, obj)
		case "externalId":
			out.Values[i] = ec._MlschemaModelEvaluation_externalId(ctx, field, obj)
		case "createTimeSinceEpoch":
			out.Values[i] = ec._MlschemaModelEvaluation_createTimeSinceEpoch(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "lastUpdateTimeSinceEpoch":
			out.Values[i] = ec._MlschemaModelEvaluation_lastUpdateTimeSinceEpoch(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "type":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MlschemaModelEvaluation_type(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "properties":
			out.Values[i] = ec._MlschemaModelEvaluation_properties(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "attributions":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MlschemaModelEvaluation_attributions(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "events":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MlschemaModelEvaluation_events(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var mlschemaModelVersionImplementors = []string{"MlschemaModelVersion", "ContextInterface"}

func (ec *executionContext) _MlschemaModelVersion(ctx context.Context, sel ast.SelectionSet, obj *graph.MlschemaModelVersion) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mlschemaModelVersionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MlschemaModelVersion")
		case "id":
			out.Values[i] = ec._MlschemaModelVersion_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "typeId":
			out.Values[i] = ec._MlschemaModelVersion_typeId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "name":
			out.Values[i] = ec._MlschemaModelVersion_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "externalId":
			out.Values[i] = ec._MlschemaModelVersion_externalId(ctx, field, obj)
		case "createTimeSinceEpoch":
			out.Values[i] = ec._MlschemaModelVersion_createTimeSinceEpoch(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "lastUpdateTimeSinceEpoch":
			out.Values[i] = ec._MlschemaModelVersion_lastUpdateTimeSinceEpoch(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "type":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MlschemaModelVersion_type(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "properties":
			out.Values[i] = ec._MlschemaModelVersion_properties(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "parents":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MlschemaModelVersion_parents(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "children":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MlschemaModelVersion_children(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "attributions":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MlschemaModelVersion_attributions(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "associations":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MlschemaModelVersion_associations(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var mlschemaRegisteredModelImplementors = []string{"MlschemaRegisteredModel", "ContextInterface"}

func (ec *executionContext) _MlschemaRegisteredModel(ctx context.Context, sel ast.SelectionSet, obj *graph.MlschemaRegisteredModel) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mlschemaRegisteredModelImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MlschemaRegisteredModel")
		case "id":
			out.Values[i] = ec._MlschemaRegisteredModel_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "typeId":
			out.Values[i] = ec._MlschemaRegisteredModel_typeId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "name":
			out.Values[i] = ec._MlschemaRegisteredModel_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "externalId":
			out.Values[i] = ec._MlschemaRegisteredModel_externalId(ctx, field, obj)
		case "createTimeSinceEpoch":
			out.Values[i] = ec._MlschemaRegisteredModel_createTimeSinceEpoch(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "lastUpdateTimeSinceEpoch":
			out.Values[i] = ec._MlschemaRegisteredModel_lastUpdateTimeSinceEpoch(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "type":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MlschemaRegisteredModel_type(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "properties":
			out.Values[i] = ec._MlschemaRegisteredModel_properties(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "parents":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MlschemaRegisteredModel_parents(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "children":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MlschemaRegisteredModel_children(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "attributions":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MlschemaRegisteredModel_attributions(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "associations":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MlschemaRegisteredModel_associations(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var mlschemaRunImplementors = []string{"MlschemaRun", "ExecutionInterface"}

func (ec *executionContext) _MlschemaRun(ctx context.Context, sel ast.SelectionSet, obj *graph.MlschemaRun) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mlschemaRunImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MlschemaRun")
		case "id":
			out.Values[i] = ec._MlschemaRun_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "typeId":
			out.Values[i] = ec._MlschemaRun_typeId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "lastKnownState":
			out.Values[i] = ec._MlschemaRun_lastKnownState(ctx, field, obj)
		case "name":
			out.Values[i] = ec._MlschemaRun_name(ctx, field, obj)
		case "externalId":
			out.Values[i] = ec._MlschemaRun_externalId(ctx, field, obj)
		case "createTimeSinceEpoch":
			out.Values[i] = ec._MlschemaRun_createTimeSinceEpoch(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "lastUpdateTimeSinceEpoch":
			out.Values[i] = ec._MlschemaRun_lastUpdateTimeSinceEpoch(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "type":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MlschemaRun_type(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "properties":
			out.Values[i] = ec._MlschemaRun_properties(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "associations":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MlschemaRun_associations(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "events":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MlschemaRun_events(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var mlschemaSoftwareImplementors = []string{"MlschemaSoftware", "ArtifactInterface"}

func (ec *executionContext) _MlschemaSoftware(ctx context.Context, sel ast.SelectionSet, obj *graph.MlschemaSoftware) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mlschemaSoftwareImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MlschemaSoftware")
		case "id":
			out.Values[i] = ec._MlschemaSoftware_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "typeId":
			out.Values[i] = ec._MlschemaSoftware_typeId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "uri":
			out.Values[i] = ec._MlschemaSoftware_uri(ctx, field, obj)
		case "state":
			out.Values[i] = ec._MlschemaSoftware_state(ctx, field, obj)
		case "name":
			out.Values[i] = ec._MlschemaSoftware_name(ctx, field, obj)
		case "externalId":
			out.Values[i] = ec._MlschemaSoftware_externalId(ctx, field, obj)
		case "createTimeSinceEpoch":
			out.Values[i] = ec._MlschemaSoftware_createTimeSinceEpoch(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "lastUpdateTimeSinceEpoch":
			out.Values[i] = ec._MlschemaSoftware_lastUpdateTimeSinceEpoch(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "type":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MlschemaSoftware_type(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "properties":
			out.Values[i] = ec._MlschemaSoftware_properties(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "attributions":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MlschemaSoftware_attributions(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "events":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MlschemaSoftware_events(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var mlschemaStudyImplementors = []string{"MlschemaStudy", "ExecutionInterface"}

func (ec *executionContext) _MlschemaStudy(ctx context.Context, sel ast.SelectionSet, obj *graph.MlschemaStudy) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mlschemaStudyImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MlschemaStudy")
		case "id":
			out.Values[i] = ec._MlschemaStudy_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "typeId":
			out.Values[i] = ec._MlschemaStudy_typeId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "lastKnownState":
			out.Values[i] = ec._MlschemaStudy_lastKnownState(ctx, field, obj)
		case "name":
			out.Values[i] = ec._MlschemaStudy_name(ctx, field, obj)
		case "externalId":
			out.Values[i] = ec._MlschemaStudy_externalId(ctx, field, obj)
		case "createTimeSinceEpoch":
			out.Values[i] = ec._MlschemaStudy_createTimeSinceEpoch(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "lastUpdateTimeSinceEpoch":
			out.Values[i] = ec._MlschemaStudy_lastUpdateTimeSinceEpoch(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "type":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MlschemaStudy_type(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "properties":
			out.Values[i] = ec._MlschemaStudy_properties(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "associations":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MlschemaStudy_associations(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "events":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MlschemaStudy_events(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var mlschemaTaskImplementors = []string{"MlschemaTask", "ArtifactInterface"}

func (ec *executionContext) _MlschemaTask(ctx context.Context, sel ast.SelectionSet, obj *graph.MlschemaTask) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mlschemaTaskImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MlschemaTask")
		case "id":
			out.Values[i] = ec._MlschemaTask_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "typeId":
			out.Values[i] = ec._MlschemaTask_typeId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "uri":
			out.Values[i] = ec._MlschemaTask_uri(ctx, field, obj)
		case "state":
			out.Values[i] = ec._MlschemaTask_state(ctx, field, obj)
		case "name":
			out.Values[i] = ec._MlschemaTask_name(ctx, field, obj)
		case "externalId":
			out.Values[i] = ec._MlschemaTask_externalId(ctx, field, obj)
		case "createTimeSinceEpoch":
			out.Values[i] = ec._MlschemaTask_createTimeSinceEpoch(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "lastUpdateTimeSinceEpoch":
			out.Values[i] = ec._MlschemaTask_lastUpdateTimeSinceEpoch(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "type":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MlschemaTask_type(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "properties":
			out.Values[i] = ec._MlschemaTask_properties(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "attributions":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MlschemaTask_attributions(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "events":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MlschemaTask_events(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "createArtifactType":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createArtifactType(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var protoTypeValueImplementors = []string{"ProtoTypeValue"}

func (ec *executionContext) _ProtoTypeValue(ctx context.Context, sel ast.SelectionSet, obj *graph.ProtoTypeValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, protoTypeValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProtoTypeValue")
		case "typeUrl":
			out.Values[i] = ec._ProtoTypeValue_typeUrl(ctx, field, obj)
		case "value":
			out.Values[i] = ec._ProtoTypeValue_value(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var protoValueImplementors = []string{"ProtoValue", "Value"}

func (ec *executionContext) _ProtoValue(ctx context.Context, sel ast.SelectionSet, obj *graph.ProtoValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, protoValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProtoValue")
		case "value":
			out.Values[i] = ec._ProtoValue_value(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "types":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_types(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "artifactTypes":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_artifactTypes(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "contextTypes":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_contextTypes(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "executionTypes":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_executionTypes(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "artifacts":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_artifacts(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "contexts":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_contexts(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "executions":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_executions(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "events":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_events(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "mlmdDatasets":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_mlmdDatasets(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "mlmdModels":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_mlmdModels(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "mlmdMetrics":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_mlmdMetrics(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "mlmdStatistics":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_mlmdStatistics(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "mlmdTrains":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_mlmdTrains(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "mlmdTransforms":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_mlmdTransforms(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "mlmdProcesses":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_mlmdProcesses(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "mlmdEvaluates":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_mlmdEvaluates(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "mlmdDeploys":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_mlmdDeploys(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "mlschemaModels":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_mlschemaModels(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "mlschemaModelEvaluations":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_mlschemaModelEvaluations(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "mlschemaEvaluationMeasures":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_mlschemaEvaluationMeasures(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "mlschemaEvaluationSpecifications":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_mlschemaEvaluationSpecifications(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "mlschemaEvaluationProcedures":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_mlschemaEvaluationProcedures(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "mlschemaTasks":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_mlschemaTasks(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "mlschemaData":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_mlschemaData(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "mlschemaDataSets":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_mlschemaDataSets(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "mlschemaFeatures":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_mlschemaFeatures(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "mlschemaAlgorithms":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_mlschemaAlgorithms(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "mlschemaSoftwares":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_mlschemaSoftwares(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "mlschemaImplementations":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_mlschemaImplementations(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "mlschemaHyperParameters":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_mlschemaHyperParameters(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "mlschemaHyperParameterSettings":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_mlschemaHyperParameterSettings(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "mlschemaImplementationCharacteristics":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_mlschemaImplementationCharacteristics(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "mlschemaDatasetCharacteristics":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_mlschemaDatasetCharacteristics(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "mlschemaFeatureCharacteristics":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_mlschemaFeatureCharacteristics(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "mlschemaRegisteredModels":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_mlschemaRegisteredModels(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "mlschemaModelVersions":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_mlschemaModelVersions(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "mlschemaDataCharacteristics":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_mlschemaDataCharacteristics(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "mlschemaStudies":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_mlschemaStudies(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "mlschemaExperiments":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_mlschemaExperiments(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "mlschemaRuns":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_mlschemaRuns(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "__type":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___type(ctx, field)
			})
		case "__schema":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___schema(ctx, field)
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var stringValueImplementors = []string{"StringValue", "Value", "StructValueType"}

func (ec *executionContext) _StringValue(ctx context.Context, sel ast.SelectionSet, obj *graph.StringValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, stringValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("StringValue")
		case "value":
			out.Values[i] = ec._StringValue_value(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var structTupleImplementors = []string{"StructTuple"}

func (ec *executionContext) _StructTuple(ctx context.Context, sel ast.SelectionSet, obj *graph.StructTuple) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, structTupleImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("StructTuple")
		case "key":
			out.Values[i] = ec._StructTuple_key(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "value":
			out.Values[i] = ec._StructTuple_value(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var structValueImplementors = []string{"StructValue", "Value", "StructValueType"}

func (ec *executionContext) _StructValue(ctx context.Context, sel ast.SelectionSet, obj *graph.StructValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, structValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("StructValue")
		case "value":
			out.Values[i] = ec._StructValue_value(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var typePropertyImplementors = []string{"TypeProperty"}

func (ec *executionContext) _TypeProperty(ctx context.Context, sel ast.SelectionSet, obj *graph.TypeProperty) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, typePropertyImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TypeProperty")
		case "name":
			out.Values[i] = ec._TypeProperty_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "dataType":
			out.Values[i] = ec._TypeProperty_dataType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "isRepeatable":
			out.Values[i] = ec.___Directive_isRepeatable(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "description":
			out.Values[i] = ec.___Schema_description(ctx, field, obj)
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		case "specifiedByURL":
			out.Values[i] = ec.___Type_specifiedByURL(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) marshalNArtifactInterface2githubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐArtifactInterface(ctx context.Context, sel ast.SelectionSet, v graph.ArtifactInterface) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ArtifactInterface(ctx, sel, v)
}

func (ec *executionContext) marshalNArtifactType2githubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐArtifactType(ctx context.Context, sel ast.SelectionSet, v graph.ArtifactType) graphql.Marshaler {
	return ec._ArtifactType(ctx, sel, &v)
}

func (ec *executionContext) marshalNArtifactType2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐArtifactType(ctx context.Context, sel ast.SelectionSet, v *graph.ArtifactType) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ArtifactType(ctx, sel, v)
}

func (ec *executionContext) marshalNAssociation2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐAssociation(ctx context.Context, sel ast.SelectionSet, v *graph.Association) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Association(ctx, sel, v)
}

func (ec *executionContext) marshalNAttribution2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐAttribution(ctx context.Context, sel ast.SelectionSet, v *graph.Attribution) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Attribution(ctx, sel, v)
}

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNContextInterface2githubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐContextInterface(ctx context.Context, sel ast.SelectionSet, v graph.ContextInterface) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ContextInterface(ctx, sel, v)
}

func (ec *executionContext) marshalNContextType2githubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐContextType(ctx context.Context, sel ast.SelectionSet, v graph.ContextType) graphql.Marshaler {
	return ec._ContextType(ctx, sel, &v)
}

func (ec *executionContext) marshalNContextType2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐContextType(ctx context.Context, sel ast.SelectionSet, v *graph.ContextType) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ContextType(ctx, sel, v)
}

func (ec *executionContext) unmarshalNDataType2githubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐDataType(ctx context.Context, v interface{}) (graph.DataType, error) {
	var res graph.DataType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDataType2githubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐDataType(ctx context.Context, sel ast.SelectionSet, v graph.DataType) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNEvent2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐEvent(ctx context.Context, sel ast.SelectionSet, v *graph.Event) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Event(ctx, sel, v)
}

func (ec *executionContext) marshalNEventStep2githubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐEventStep(ctx context.Context, sel ast.SelectionSet, v graph.EventStep) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._EventStep(ctx, sel, v)
}

func (ec *executionContext) marshalNEventStep2ᚕgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐEventStepᚄ(ctx context.Context, sel ast.SelectionSet, v []graph.EventStep) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNEventStep2githubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐEventStep(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNEventType2githubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐEventType(ctx context.Context, v interface{}) (graph.EventType, error) {
	var res graph.EventType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNEventType2githubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐEventType(ctx context.Context, sel ast.SelectionSet, v graph.EventType) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNExecutionInterface2githubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐExecutionInterface(ctx context.Context, sel ast.SelectionSet, v graph.ExecutionInterface) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ExecutionInterface(ctx, sel, v)
}

func (ec *executionContext) marshalNExecutionType2githubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐExecutionType(ctx context.Context, sel ast.SelectionSet, v graph.ExecutionType) graphql.Marshaler {
	return ec._ExecutionType(ctx, sel, &v)
}

func (ec *executionContext) marshalNExecutionType2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐExecutionType(ctx context.Context, sel ast.SelectionSet, v *graph.ExecutionType) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ExecutionType(ctx, sel, v)
}

func (ec *executionContext) unmarshalNFloat2float64(ctx context.Context, v interface{}) (float64, error) {
	res, err := graphql.UnmarshalFloatContext(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNFloat2float64(ctx context.Context, sel ast.SelectionSet, v float64) graphql.Marshaler {
	res := graphql.MarshalFloatContext(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return graphql.WrapContextMarshaler(ctx, res)
}

func (ec *executionContext) unmarshalNID2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalID(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNID2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalID(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNInstanceProperty2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐInstancePropertyᚄ(ctx context.Context, sel ast.SelectionSet, v []*graph.InstanceProperty) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNInstanceProperty2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐInstanceProperty(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNInstanceProperty2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐInstanceProperty(ctx context.Context, sel ast.SelectionSet, v *graph.InstanceProperty) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._InstanceProperty(ctx, sel, v)
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNInt642int64(ctx context.Context, v interface{}) (int64, error) {
	res, err := graph.UnmarshalInt64(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt642int64(ctx context.Context, sel ast.SelectionSet, v int64) graphql.Marshaler {
	res := graph.MarshalInt64(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNMlmdDataset2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlmdDataset(ctx context.Context, sel ast.SelectionSet, v *graph.MlmdDataset) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MlmdDataset(ctx, sel, v)
}

func (ec *executionContext) marshalNMlmdDeploy2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlmdDeploy(ctx context.Context, sel ast.SelectionSet, v *graph.MlmdDeploy) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MlmdDeploy(ctx, sel, v)
}

func (ec *executionContext) marshalNMlmdEvaluate2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlmdEvaluate(ctx context.Context, sel ast.SelectionSet, v *graph.MlmdEvaluate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MlmdEvaluate(ctx, sel, v)
}

func (ec *executionContext) marshalNMlmdMetrics2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlmdMetrics(ctx context.Context, sel ast.SelectionSet, v *graph.MlmdMetrics) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MlmdMetrics(ctx, sel, v)
}

func (ec *executionContext) marshalNMlmdModel2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlmdModel(ctx context.Context, sel ast.SelectionSet, v *graph.MlmdModel) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MlmdModel(ctx, sel, v)
}

func (ec *executionContext) marshalNMlmdProcess2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlmdProcess(ctx context.Context, sel ast.SelectionSet, v *graph.MlmdProcess) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MlmdProcess(ctx, sel, v)
}

func (ec *executionContext) marshalNMlmdStatistics2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlmdStatistics(ctx context.Context, sel ast.SelectionSet, v *graph.MlmdStatistics) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MlmdStatistics(ctx, sel, v)
}

func (ec *executionContext) marshalNMlmdTrain2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlmdTrain(ctx context.Context, sel ast.SelectionSet, v *graph.MlmdTrain) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MlmdTrain(ctx, sel, v)
}

func (ec *executionContext) marshalNMlmdTransform2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlmdTransform(ctx context.Context, sel ast.SelectionSet, v *graph.MlmdTransform) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MlmdTransform(ctx, sel, v)
}

func (ec *executionContext) marshalNMlschemaAlgorithm2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlschemaAlgorithm(ctx context.Context, sel ast.SelectionSet, v *graph.MlschemaAlgorithm) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MlschemaAlgorithm(ctx, sel, v)
}

func (ec *executionContext) marshalNMlschemaData2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlschemaData(ctx context.Context, sel ast.SelectionSet, v *graph.MlschemaData) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MlschemaData(ctx, sel, v)
}

func (ec *executionContext) marshalNMlschemaDataCharacteristic2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlschemaDataCharacteristic(ctx context.Context, sel ast.SelectionSet, v *graph.MlschemaDataCharacteristic) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MlschemaDataCharacteristic(ctx, sel, v)
}

func (ec *executionContext) marshalNMlschemaDataSet2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlschemaDataSet(ctx context.Context, sel ast.SelectionSet, v *graph.MlschemaDataSet) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MlschemaDataSet(ctx, sel, v)
}

func (ec *executionContext) marshalNMlschemaDatasetCharacteristic2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlschemaDatasetCharacteristic(ctx context.Context, sel ast.SelectionSet, v *graph.MlschemaDatasetCharacteristic) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MlschemaDatasetCharacteristic(ctx, sel, v)
}

func (ec *executionContext) marshalNMlschemaEvaluationMeasure2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlschemaEvaluationMeasure(ctx context.Context, sel ast.SelectionSet, v *graph.MlschemaEvaluationMeasure) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MlschemaEvaluationMeasure(ctx, sel, v)
}

func (ec *executionContext) marshalNMlschemaEvaluationProcedure2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlschemaEvaluationProcedure(ctx context.Context, sel ast.SelectionSet, v *graph.MlschemaEvaluationProcedure) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MlschemaEvaluationProcedure(ctx, sel, v)
}

func (ec *executionContext) marshalNMlschemaEvaluationSpecification2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlschemaEvaluationSpecification(ctx context.Context, sel ast.SelectionSet, v *graph.MlschemaEvaluationSpecification) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MlschemaEvaluationSpecification(ctx, sel, v)
}

func (ec *executionContext) marshalNMlschemaExperiment2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlschemaExperiment(ctx context.Context, sel ast.SelectionSet, v *graph.MlschemaExperiment) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MlschemaExperiment(ctx, sel, v)
}

func (ec *executionContext) marshalNMlschemaFeature2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlschemaFeature(ctx context.Context, sel ast.SelectionSet, v *graph.MlschemaFeature) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MlschemaFeature(ctx, sel, v)
}

func (ec *executionContext) marshalNMlschemaFeatureCharacteristic2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlschemaFeatureCharacteristic(ctx context.Context, sel ast.SelectionSet, v *graph.MlschemaFeatureCharacteristic) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MlschemaFeatureCharacteristic(ctx, sel, v)
}

func (ec *executionContext) marshalNMlschemaHyperParameter2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlschemaHyperParameter(ctx context.Context, sel ast.SelectionSet, v *graph.MlschemaHyperParameter) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MlschemaHyperParameter(ctx, sel, v)
}

func (ec *executionContext) marshalNMlschemaHyperParameterSetting2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlschemaHyperParameterSetting(ctx context.Context, sel ast.SelectionSet, v *graph.MlschemaHyperParameterSetting) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MlschemaHyperParameterSetting(ctx, sel, v)
}

func (ec *executionContext) marshalNMlschemaImplementation2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlschemaImplementation(ctx context.Context, sel ast.SelectionSet, v *graph.MlschemaImplementation) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MlschemaImplementation(ctx, sel, v)
}

func (ec *executionContext) marshalNMlschemaImplementationCharacteristic2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlschemaImplementationCharacteristic(ctx context.Context, sel ast.SelectionSet, v *graph.MlschemaImplementationCharacteristic) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MlschemaImplementationCharacteristic(ctx, sel, v)
}

func (ec *executionContext) marshalNMlschemaModel2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlschemaModel(ctx context.Context, sel ast.SelectionSet, v *graph.MlschemaModel) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MlschemaModel(ctx, sel, v)
}

func (ec *executionContext) marshalNMlschemaModelEvaluation2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlschemaModelEvaluation(ctx context.Context, sel ast.SelectionSet, v *graph.MlschemaModelEvaluation) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MlschemaModelEvaluation(ctx, sel, v)
}

func (ec *executionContext) marshalNMlschemaModelVersion2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlschemaModelVersion(ctx context.Context, sel ast.SelectionSet, v *graph.MlschemaModelVersion) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MlschemaModelVersion(ctx, sel, v)
}

func (ec *executionContext) marshalNMlschemaRegisteredModel2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlschemaRegisteredModel(ctx context.Context, sel ast.SelectionSet, v *graph.MlschemaRegisteredModel) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MlschemaRegisteredModel(ctx, sel, v)
}

func (ec *executionContext) marshalNMlschemaRun2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlschemaRun(ctx context.Context, sel ast.SelectionSet, v *graph.MlschemaRun) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MlschemaRun(ctx, sel, v)
}

func (ec *executionContext) marshalNMlschemaSoftware2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlschemaSoftware(ctx context.Context, sel ast.SelectionSet, v *graph.MlschemaSoftware) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MlschemaSoftware(ctx, sel, v)
}

func (ec *executionContext) marshalNMlschemaStudy2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlschemaStudy(ctx context.Context, sel ast.SelectionSet, v *graph.MlschemaStudy) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MlschemaStudy(ctx, sel, v)
}

func (ec *executionContext) marshalNMlschemaTask2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlschemaTask(ctx context.Context, sel ast.SelectionSet, v *graph.MlschemaTask) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MlschemaTask(ctx, sel, v)
}

func (ec *executionContext) marshalNProtoTypeValue2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐProtoTypeValue(ctx context.Context, sel ast.SelectionSet, v *graph.ProtoTypeValue) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ProtoTypeValue(ctx, sel, v)
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNStructTuple2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐStructTupleᚄ(ctx context.Context, sel ast.SelectionSet, v []*graph.StructTuple) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNStructTuple2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐStructTuple(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNStructTuple2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐStructTuple(ctx context.Context, sel ast.SelectionSet, v *graph.StructTuple) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._StructTuple(ctx, sel, v)
}

func (ec *executionContext) marshalNStructValueType2githubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐStructValueType(ctx context.Context, sel ast.SelectionSet, v graph.StructValueType) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._StructValueType(ctx, sel, v)
}

func (ec *executionContext) marshalNType2githubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐType(ctx context.Context, sel ast.SelectionSet, v graph.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalNTypeKind2githubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐTypeKind(ctx context.Context, v interface{}) (graph.TypeKind, error) {
	var res graph.TypeKind
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTypeKind2githubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐTypeKind(ctx context.Context, sel ast.SelectionSet, v graph.TypeKind) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNTypeProperty2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐTypeProperty(ctx context.Context, sel ast.SelectionSet, v *graph.TypeProperty) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TypeProperty(ctx, sel, v)
}

func (ec *executionContext) unmarshalNTypePropertyInput2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐTypePropertyInput(ctx context.Context, v interface{}) (*graph.TypePropertyInput, error) {
	res, err := ec.unmarshalInputTypePropertyInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNValue2githubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐValue(ctx context.Context, sel ast.SelectionSet, v graph.Value) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Value(ctx, sel, v)
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalOArtifactInterface2githubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐArtifactInterface(ctx context.Context, sel ast.SelectionSet, v graph.ArtifactInterface) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ArtifactInterface(ctx, sel, v)
}

func (ec *executionContext) marshalOArtifactInterface2ᚕgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐArtifactInterfaceᚄ(ctx context.Context, sel ast.SelectionSet, v []graph.ArtifactInterface) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNArtifactInterface2githubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐArtifactInterface(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOArtifactState2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐArtifactState(ctx context.Context, v interface{}) (*graph.ArtifactState, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(graph.ArtifactState)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOArtifactState2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐArtifactState(ctx context.Context, sel ast.SelectionSet, v *graph.ArtifactState) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOArtifactType2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐArtifactTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []*graph.ArtifactType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNArtifactType2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐArtifactType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOArtifactTypeInput2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐArtifactTypeInput(ctx context.Context, v interface{}) (*graph.ArtifactTypeInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputArtifactTypeInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOAssociation2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐAssociationᚄ(ctx context.Context, sel ast.SelectionSet, v []*graph.Association) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAssociation2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐAssociation(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOAttribution2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐAttributionᚄ(ctx context.Context, sel ast.SelectionSet, v []*graph.Attribution) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAttribution2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐAttribution(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	return res
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalBoolean(*v)
	return res
}

func (ec *executionContext) unmarshalOByteArray2ᚕbyte(ctx context.Context, v interface{}) ([]byte, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graph.UnmarshalByteArray(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOByteArray2ᚕbyte(ctx context.Context, sel ast.SelectionSet, v []byte) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graph.MarshalByteArray(v)
	return res
}

func (ec *executionContext) marshalOContextInterface2ᚕgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐContextInterfaceᚄ(ctx context.Context, sel ast.SelectionSet, v []graph.ContextInterface) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNContextInterface2githubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐContextInterface(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOContextType2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐContextTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []*graph.ContextType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNContextType2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐContextType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOEvent2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐEventᚄ(ctx context.Context, sel ast.SelectionSet, v []*graph.Event) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNEvent2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐEvent(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOExecutionInterface2githubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐExecutionInterface(ctx context.Context, sel ast.SelectionSet, v graph.ExecutionInterface) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ExecutionInterface(ctx, sel, v)
}

func (ec *executionContext) marshalOExecutionInterface2ᚕgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐExecutionInterfaceᚄ(ctx context.Context, sel ast.SelectionSet, v []graph.ExecutionInterface) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNExecutionInterface2githubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐExecutionInterface(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOExecutionState2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐExecutionState(ctx context.Context, v interface{}) (*graph.ExecutionState, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(graph.ExecutionState)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOExecutionState2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐExecutionState(ctx context.Context, sel ast.SelectionSet, v *graph.ExecutionState) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOExecutionType2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐExecutionTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []*graph.ExecutionType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNExecutionType2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐExecutionType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOFloat2ᚖfloat64(ctx context.Context, v interface{}) (*float64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalFloatContext(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFloat2ᚖfloat64(ctx context.Context, sel ast.SelectionSet, v *float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalFloatContext(*v)
	return graphql.WrapContextMarshaler(ctx, res)
}

func (ec *executionContext) unmarshalOID2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNID2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOID2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNID2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOInstanceFilter2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐInstanceFilter(ctx context.Context, v interface{}) (*graph.InstanceFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputInstanceFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInstanceProperty2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐInstancePropertyᚄ(ctx context.Context, sel ast.SelectionSet, v []*graph.InstanceProperty) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNInstanceProperty2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐInstanceProperty(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOInt642ᚖint64(ctx context.Context, v interface{}) (*int64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graph.UnmarshalInt64(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt642ᚖint64(ctx context.Context, sel ast.SelectionSet, v *int64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graph.MarshalInt64(*v)
	return res
}

func (ec *executionContext) marshalOMlmdDataset2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlmdDatasetᚄ(ctx context.Context, sel ast.SelectionSet, v []*graph.MlmdDataset) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMlmdDataset2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlmdDataset(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOMlmdDeploy2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlmdDeployᚄ(ctx context.Context, sel ast.SelectionSet, v []*graph.MlmdDeploy) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMlmdDeploy2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlmdDeploy(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOMlmdEvaluate2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlmdEvaluateᚄ(ctx context.Context, sel ast.SelectionSet, v []*graph.MlmdEvaluate) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMlmdEvaluate2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlmdEvaluate(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOMlmdMetrics2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlmdMetricsᚄ(ctx context.Context, sel ast.SelectionSet, v []*graph.MlmdMetrics) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMlmdMetrics2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlmdMetrics(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOMlmdModel2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlmdModelᚄ(ctx context.Context, sel ast.SelectionSet, v []*graph.MlmdModel) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMlmdModel2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlmdModel(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOMlmdProcess2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlmdProcessᚄ(ctx context.Context, sel ast.SelectionSet, v []*graph.MlmdProcess) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMlmdProcess2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlmdProcess(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOMlmdStatistics2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlmdStatisticsᚄ(ctx context.Context, sel ast.SelectionSet, v []*graph.MlmdStatistics) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMlmdStatistics2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlmdStatistics(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOMlmdTrain2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlmdTrainᚄ(ctx context.Context, sel ast.SelectionSet, v []*graph.MlmdTrain) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMlmdTrain2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlmdTrain(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOMlmdTransform2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlmdTransformᚄ(ctx context.Context, sel ast.SelectionSet, v []*graph.MlmdTransform) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMlmdTransform2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlmdTransform(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOMlschemaAlgorithm2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlschemaAlgorithmᚄ(ctx context.Context, sel ast.SelectionSet, v []*graph.MlschemaAlgorithm) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMlschemaAlgorithm2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlschemaAlgorithm(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOMlschemaData2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlschemaDataᚄ(ctx context.Context, sel ast.SelectionSet, v []*graph.MlschemaData) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMlschemaData2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlschemaData(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOMlschemaDataCharacteristic2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlschemaDataCharacteristicᚄ(ctx context.Context, sel ast.SelectionSet, v []*graph.MlschemaDataCharacteristic) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMlschemaDataCharacteristic2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlschemaDataCharacteristic(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOMlschemaDataSet2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlschemaDataSetᚄ(ctx context.Context, sel ast.SelectionSet, v []*graph.MlschemaDataSet) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMlschemaDataSet2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlschemaDataSet(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOMlschemaDatasetCharacteristic2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlschemaDatasetCharacteristicᚄ(ctx context.Context, sel ast.SelectionSet, v []*graph.MlschemaDatasetCharacteristic) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMlschemaDatasetCharacteristic2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlschemaDatasetCharacteristic(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOMlschemaEvaluationMeasure2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlschemaEvaluationMeasureᚄ(ctx context.Context, sel ast.SelectionSet, v []*graph.MlschemaEvaluationMeasure) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMlschemaEvaluationMeasure2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlschemaEvaluationMeasure(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOMlschemaEvaluationProcedure2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlschemaEvaluationProcedureᚄ(ctx context.Context, sel ast.SelectionSet, v []*graph.MlschemaEvaluationProcedure) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMlschemaEvaluationProcedure2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlschemaEvaluationProcedure(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOMlschemaEvaluationSpecification2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlschemaEvaluationSpecificationᚄ(ctx context.Context, sel ast.SelectionSet, v []*graph.MlschemaEvaluationSpecification) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMlschemaEvaluationSpecification2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlschemaEvaluationSpecification(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOMlschemaExperiment2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlschemaExperimentᚄ(ctx context.Context, sel ast.SelectionSet, v []*graph.MlschemaExperiment) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMlschemaExperiment2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlschemaExperiment(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOMlschemaFeature2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlschemaFeatureᚄ(ctx context.Context, sel ast.SelectionSet, v []*graph.MlschemaFeature) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMlschemaFeature2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlschemaFeature(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOMlschemaFeatureCharacteristic2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlschemaFeatureCharacteristicᚄ(ctx context.Context, sel ast.SelectionSet, v []*graph.MlschemaFeatureCharacteristic) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMlschemaFeatureCharacteristic2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlschemaFeatureCharacteristic(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOMlschemaHyperParameter2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlschemaHyperParameterᚄ(ctx context.Context, sel ast.SelectionSet, v []*graph.MlschemaHyperParameter) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMlschemaHyperParameter2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlschemaHyperParameter(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOMlschemaHyperParameterSetting2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlschemaHyperParameterSettingᚄ(ctx context.Context, sel ast.SelectionSet, v []*graph.MlschemaHyperParameterSetting) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMlschemaHyperParameterSetting2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlschemaHyperParameterSetting(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOMlschemaImplementation2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlschemaImplementationᚄ(ctx context.Context, sel ast.SelectionSet, v []*graph.MlschemaImplementation) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMlschemaImplementation2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlschemaImplementation(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOMlschemaImplementationCharacteristic2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlschemaImplementationCharacteristicᚄ(ctx context.Context, sel ast.SelectionSet, v []*graph.MlschemaImplementationCharacteristic) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMlschemaImplementationCharacteristic2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlschemaImplementationCharacteristic(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOMlschemaModel2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlschemaModelᚄ(ctx context.Context, sel ast.SelectionSet, v []*graph.MlschemaModel) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMlschemaModel2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlschemaModel(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOMlschemaModelEvaluation2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlschemaModelEvaluationᚄ(ctx context.Context, sel ast.SelectionSet, v []*graph.MlschemaModelEvaluation) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMlschemaModelEvaluation2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlschemaModelEvaluation(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOMlschemaModelVersion2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlschemaModelVersionᚄ(ctx context.Context, sel ast.SelectionSet, v []*graph.MlschemaModelVersion) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMlschemaModelVersion2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlschemaModelVersion(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOMlschemaRegisteredModel2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlschemaRegisteredModelᚄ(ctx context.Context, sel ast.SelectionSet, v []*graph.MlschemaRegisteredModel) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMlschemaRegisteredModel2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlschemaRegisteredModel(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOMlschemaRun2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlschemaRunᚄ(ctx context.Context, sel ast.SelectionSet, v []*graph.MlschemaRun) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMlschemaRun2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlschemaRun(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOMlschemaSoftware2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlschemaSoftwareᚄ(ctx context.Context, sel ast.SelectionSet, v []*graph.MlschemaSoftware) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMlschemaSoftware2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlschemaSoftware(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOMlschemaStudy2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlschemaStudyᚄ(ctx context.Context, sel ast.SelectionSet, v []*graph.MlschemaStudy) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMlschemaStudy2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlschemaStudy(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOMlschemaTask2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlschemaTaskᚄ(ctx context.Context, sel ast.SelectionSet, v []*graph.MlschemaTask) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMlschemaTask2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐMlschemaTask(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOProtoTypeValue2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐProtoTypeValue(ctx context.Context, sel ast.SelectionSet, v *graph.ProtoTypeValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ProtoTypeValue(ctx, sel, v)
}

func (ec *executionContext) unmarshalOString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(*v)
	return res
}

func (ec *executionContext) marshalOStructTuple2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐStructTupleᚄ(ctx context.Context, sel ast.SelectionSet, v []*graph.StructTuple) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNStructTuple2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐStructTuple(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOStructValueType2githubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐStructValueType(ctx context.Context, sel ast.SelectionSet, v graph.StructValueType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._StructValueType(ctx, sel, v)
}

func (ec *executionContext) marshalOStructValueType2ᚕgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐStructValueTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []graph.StructValueType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNStructValueType2githubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐStructValueType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOType2ᚕgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []graph.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNType2githubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOTypeFilter2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐTypeFilter(ctx context.Context, v interface{}) (*graph.TypeFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputTypeFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTypeProperty2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐTypePropertyᚄ(ctx context.Context, sel ast.SelectionSet, v []*graph.TypeProperty) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTypeProperty2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐTypeProperty(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOTypePropertyInput2ᚕᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐTypePropertyInputᚄ(ctx context.Context, v interface{}) ([]*graph.TypePropertyInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*graph.TypePropertyInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNTypePropertyInput2ᚖgithubᚗcomᚋopendatahubᚑioᚋmodelᚑregistryᚋinternalᚋmodelᚋgraphᚐTypePropertyInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
