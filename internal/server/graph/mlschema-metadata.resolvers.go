package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"

	"github.com/opendatahub-io/model-registry/internal/model/graph"
)

// Type is the resolver for the type field.
func (r *mlschemaAlgorithmResolver) Type(ctx context.Context, obj *graph.MlschemaAlgorithm) (*graph.ArtifactType, error) {
	panic(fmt.Errorf("not implemented: Type - type"))
}

// Attributions is the resolver for the attributions field.
func (r *mlschemaAlgorithmResolver) Attributions(ctx context.Context, obj *graph.MlschemaAlgorithm) ([]*graph.Attribution, error) {
	panic(fmt.Errorf("not implemented: Attributions - attributions"))
}

// Events is the resolver for the events field.
func (r *mlschemaAlgorithmResolver) Events(ctx context.Context, obj *graph.MlschemaAlgorithm) ([]*graph.Event, error) {
	panic(fmt.Errorf("not implemented: Events - events"))
}

// Type is the resolver for the type field.
func (r *mlschemaDataResolver) Type(ctx context.Context, obj *graph.MlschemaData) (*graph.ArtifactType, error) {
	panic(fmt.Errorf("not implemented: Type - type"))
}

// Attributions is the resolver for the attributions field.
func (r *mlschemaDataResolver) Attributions(ctx context.Context, obj *graph.MlschemaData) ([]*graph.Attribution, error) {
	panic(fmt.Errorf("not implemented: Attributions - attributions"))
}

// Events is the resolver for the events field.
func (r *mlschemaDataResolver) Events(ctx context.Context, obj *graph.MlschemaData) ([]*graph.Event, error) {
	panic(fmt.Errorf("not implemented: Events - events"))
}

// Type is the resolver for the type field.
func (r *mlschemaDataCharacteristicResolver) Type(ctx context.Context, obj *graph.MlschemaDataCharacteristic) (*graph.ContextType, error) {
	panic(fmt.Errorf("not implemented: Type - type"))
}

// Parents is the resolver for the parents field.
func (r *mlschemaDataCharacteristicResolver) Parents(ctx context.Context, obj *graph.MlschemaDataCharacteristic) ([]graph.ContextInterface, error) {
	panic(fmt.Errorf("not implemented: Parents - parents"))
}

// Children is the resolver for the children field.
func (r *mlschemaDataCharacteristicResolver) Children(ctx context.Context, obj *graph.MlschemaDataCharacteristic) ([]graph.ContextInterface, error) {
	panic(fmt.Errorf("not implemented: Children - children"))
}

// Attributions is the resolver for the attributions field.
func (r *mlschemaDataCharacteristicResolver) Attributions(ctx context.Context, obj *graph.MlschemaDataCharacteristic) ([]*graph.Attribution, error) {
	panic(fmt.Errorf("not implemented: Attributions - attributions"))
}

// Associations is the resolver for the associations field.
func (r *mlschemaDataCharacteristicResolver) Associations(ctx context.Context, obj *graph.MlschemaDataCharacteristic) ([]*graph.Association, error) {
	panic(fmt.Errorf("not implemented: Associations - associations"))
}

// Type is the resolver for the type field.
func (r *mlschemaDataSetResolver) Type(ctx context.Context, obj *graph.MlschemaDataSet) (*graph.ArtifactType, error) {
	panic(fmt.Errorf("not implemented: Type - type"))
}

// Attributions is the resolver for the attributions field.
func (r *mlschemaDataSetResolver) Attributions(ctx context.Context, obj *graph.MlschemaDataSet) ([]*graph.Attribution, error) {
	panic(fmt.Errorf("not implemented: Attributions - attributions"))
}

// Events is the resolver for the events field.
func (r *mlschemaDataSetResolver) Events(ctx context.Context, obj *graph.MlschemaDataSet) ([]*graph.Event, error) {
	panic(fmt.Errorf("not implemented: Events - events"))
}

// Type is the resolver for the type field.
func (r *mlschemaDatasetCharacteristicResolver) Type(ctx context.Context, obj *graph.MlschemaDatasetCharacteristic) (*graph.ArtifactType, error) {
	panic(fmt.Errorf("not implemented: Type - type"))
}

// Attributions is the resolver for the attributions field.
func (r *mlschemaDatasetCharacteristicResolver) Attributions(ctx context.Context, obj *graph.MlschemaDatasetCharacteristic) ([]*graph.Attribution, error) {
	panic(fmt.Errorf("not implemented: Attributions - attributions"))
}

// Events is the resolver for the events field.
func (r *mlschemaDatasetCharacteristicResolver) Events(ctx context.Context, obj *graph.MlschemaDatasetCharacteristic) ([]*graph.Event, error) {
	panic(fmt.Errorf("not implemented: Events - events"))
}

// Type is the resolver for the type field.
func (r *mlschemaEvaluationMeasureResolver) Type(ctx context.Context, obj *graph.MlschemaEvaluationMeasure) (*graph.ArtifactType, error) {
	panic(fmt.Errorf("not implemented: Type - type"))
}

// Attributions is the resolver for the attributions field.
func (r *mlschemaEvaluationMeasureResolver) Attributions(ctx context.Context, obj *graph.MlschemaEvaluationMeasure) ([]*graph.Attribution, error) {
	panic(fmt.Errorf("not implemented: Attributions - attributions"))
}

// Events is the resolver for the events field.
func (r *mlschemaEvaluationMeasureResolver) Events(ctx context.Context, obj *graph.MlschemaEvaluationMeasure) ([]*graph.Event, error) {
	panic(fmt.Errorf("not implemented: Events - events"))
}

// Type is the resolver for the type field.
func (r *mlschemaEvaluationProcedureResolver) Type(ctx context.Context, obj *graph.MlschemaEvaluationProcedure) (*graph.ArtifactType, error) {
	panic(fmt.Errorf("not implemented: Type - type"))
}

// Attributions is the resolver for the attributions field.
func (r *mlschemaEvaluationProcedureResolver) Attributions(ctx context.Context, obj *graph.MlschemaEvaluationProcedure) ([]*graph.Attribution, error) {
	panic(fmt.Errorf("not implemented: Attributions - attributions"))
}

// Events is the resolver for the events field.
func (r *mlschemaEvaluationProcedureResolver) Events(ctx context.Context, obj *graph.MlschemaEvaluationProcedure) ([]*graph.Event, error) {
	panic(fmt.Errorf("not implemented: Events - events"))
}

// Type is the resolver for the type field.
func (r *mlschemaEvaluationSpecificationResolver) Type(ctx context.Context, obj *graph.MlschemaEvaluationSpecification) (*graph.ArtifactType, error) {
	panic(fmt.Errorf("not implemented: Type - type"))
}

// Attributions is the resolver for the attributions field.
func (r *mlschemaEvaluationSpecificationResolver) Attributions(ctx context.Context, obj *graph.MlschemaEvaluationSpecification) ([]*graph.Attribution, error) {
	panic(fmt.Errorf("not implemented: Attributions - attributions"))
}

// Events is the resolver for the events field.
func (r *mlschemaEvaluationSpecificationResolver) Events(ctx context.Context, obj *graph.MlschemaEvaluationSpecification) ([]*graph.Event, error) {
	panic(fmt.Errorf("not implemented: Events - events"))
}

// Type is the resolver for the type field.
func (r *mlschemaExperimentResolver) Type(ctx context.Context, obj *graph.MlschemaExperiment) (*graph.ExecutionType, error) {
	panic(fmt.Errorf("not implemented: Type - type"))
}

// Associations is the resolver for the associations field.
func (r *mlschemaExperimentResolver) Associations(ctx context.Context, obj *graph.MlschemaExperiment) ([]*graph.Association, error) {
	panic(fmt.Errorf("not implemented: Associations - associations"))
}

// Events is the resolver for the events field.
func (r *mlschemaExperimentResolver) Events(ctx context.Context, obj *graph.MlschemaExperiment) ([]*graph.Event, error) {
	panic(fmt.Errorf("not implemented: Events - events"))
}

// Type is the resolver for the type field.
func (r *mlschemaFeatureResolver) Type(ctx context.Context, obj *graph.MlschemaFeature) (*graph.ArtifactType, error) {
	panic(fmt.Errorf("not implemented: Type - type"))
}

// Attributions is the resolver for the attributions field.
func (r *mlschemaFeatureResolver) Attributions(ctx context.Context, obj *graph.MlschemaFeature) ([]*graph.Attribution, error) {
	panic(fmt.Errorf("not implemented: Attributions - attributions"))
}

// Events is the resolver for the events field.
func (r *mlschemaFeatureResolver) Events(ctx context.Context, obj *graph.MlschemaFeature) ([]*graph.Event, error) {
	panic(fmt.Errorf("not implemented: Events - events"))
}

// Type is the resolver for the type field.
func (r *mlschemaFeatureCharacteristicResolver) Type(ctx context.Context, obj *graph.MlschemaFeatureCharacteristic) (*graph.ArtifactType, error) {
	panic(fmt.Errorf("not implemented: Type - type"))
}

// Attributions is the resolver for the attributions field.
func (r *mlschemaFeatureCharacteristicResolver) Attributions(ctx context.Context, obj *graph.MlschemaFeatureCharacteristic) ([]*graph.Attribution, error) {
	panic(fmt.Errorf("not implemented: Attributions - attributions"))
}

// Events is the resolver for the events field.
func (r *mlschemaFeatureCharacteristicResolver) Events(ctx context.Context, obj *graph.MlschemaFeatureCharacteristic) ([]*graph.Event, error) {
	panic(fmt.Errorf("not implemented: Events - events"))
}

// Type is the resolver for the type field.
func (r *mlschemaHyperParameterResolver) Type(ctx context.Context, obj *graph.MlschemaHyperParameter) (*graph.ArtifactType, error) {
	panic(fmt.Errorf("not implemented: Type - type"))
}

// Attributions is the resolver for the attributions field.
func (r *mlschemaHyperParameterResolver) Attributions(ctx context.Context, obj *graph.MlschemaHyperParameter) ([]*graph.Attribution, error) {
	panic(fmt.Errorf("not implemented: Attributions - attributions"))
}

// Events is the resolver for the events field.
func (r *mlschemaHyperParameterResolver) Events(ctx context.Context, obj *graph.MlschemaHyperParameter) ([]*graph.Event, error) {
	panic(fmt.Errorf("not implemented: Events - events"))
}

// Type is the resolver for the type field.
func (r *mlschemaHyperParameterSettingResolver) Type(ctx context.Context, obj *graph.MlschemaHyperParameterSetting) (*graph.ArtifactType, error) {
	panic(fmt.Errorf("not implemented: Type - type"))
}

// Attributions is the resolver for the attributions field.
func (r *mlschemaHyperParameterSettingResolver) Attributions(ctx context.Context, obj *graph.MlschemaHyperParameterSetting) ([]*graph.Attribution, error) {
	panic(fmt.Errorf("not implemented: Attributions - attributions"))
}

// Events is the resolver for the events field.
func (r *mlschemaHyperParameterSettingResolver) Events(ctx context.Context, obj *graph.MlschemaHyperParameterSetting) ([]*graph.Event, error) {
	panic(fmt.Errorf("not implemented: Events - events"))
}

// Type is the resolver for the type field.
func (r *mlschemaImplementationResolver) Type(ctx context.Context, obj *graph.MlschemaImplementation) (*graph.ArtifactType, error) {
	panic(fmt.Errorf("not implemented: Type - type"))
}

// Attributions is the resolver for the attributions field.
func (r *mlschemaImplementationResolver) Attributions(ctx context.Context, obj *graph.MlschemaImplementation) ([]*graph.Attribution, error) {
	panic(fmt.Errorf("not implemented: Attributions - attributions"))
}

// Events is the resolver for the events field.
func (r *mlschemaImplementationResolver) Events(ctx context.Context, obj *graph.MlschemaImplementation) ([]*graph.Event, error) {
	panic(fmt.Errorf("not implemented: Events - events"))
}

// Type is the resolver for the type field.
func (r *mlschemaImplementationCharacteristicResolver) Type(ctx context.Context, obj *graph.MlschemaImplementationCharacteristic) (*graph.ArtifactType, error) {
	panic(fmt.Errorf("not implemented: Type - type"))
}

// Attributions is the resolver for the attributions field.
func (r *mlschemaImplementationCharacteristicResolver) Attributions(ctx context.Context, obj *graph.MlschemaImplementationCharacteristic) ([]*graph.Attribution, error) {
	panic(fmt.Errorf("not implemented: Attributions - attributions"))
}

// Events is the resolver for the events field.
func (r *mlschemaImplementationCharacteristicResolver) Events(ctx context.Context, obj *graph.MlschemaImplementationCharacteristic) ([]*graph.Event, error) {
	panic(fmt.Errorf("not implemented: Events - events"))
}

// Type is the resolver for the type field.
func (r *mlschemaModelResolver) Type(ctx context.Context, obj *graph.MlschemaModel) (*graph.ArtifactType, error) {
	panic(fmt.Errorf("not implemented: Type - type"))
}

// Attributions is the resolver for the attributions field.
func (r *mlschemaModelResolver) Attributions(ctx context.Context, obj *graph.MlschemaModel) ([]*graph.Attribution, error) {
	panic(fmt.Errorf("not implemented: Attributions - attributions"))
}

// Events is the resolver for the events field.
func (r *mlschemaModelResolver) Events(ctx context.Context, obj *graph.MlschemaModel) ([]*graph.Event, error) {
	panic(fmt.Errorf("not implemented: Events - events"))
}

// Type is the resolver for the type field.
func (r *mlschemaModelEvaluationResolver) Type(ctx context.Context, obj *graph.MlschemaModelEvaluation) (*graph.ArtifactType, error) {
	panic(fmt.Errorf("not implemented: Type - type"))
}

// Attributions is the resolver for the attributions field.
func (r *mlschemaModelEvaluationResolver) Attributions(ctx context.Context, obj *graph.MlschemaModelEvaluation) ([]*graph.Attribution, error) {
	panic(fmt.Errorf("not implemented: Attributions - attributions"))
}

// Events is the resolver for the events field.
func (r *mlschemaModelEvaluationResolver) Events(ctx context.Context, obj *graph.MlschemaModelEvaluation) ([]*graph.Event, error) {
	panic(fmt.Errorf("not implemented: Events - events"))
}

// Type is the resolver for the type field.
func (r *mlschemaModelVersionResolver) Type(ctx context.Context, obj *graph.MlschemaModelVersion) (*graph.ContextType, error) {
	panic(fmt.Errorf("not implemented: Type - type"))
}

// Parents is the resolver for the parents field.
func (r *mlschemaModelVersionResolver) Parents(ctx context.Context, obj *graph.MlschemaModelVersion) ([]graph.ContextInterface, error) {
	panic(fmt.Errorf("not implemented: Parents - parents"))
}

// Children is the resolver for the children field.
func (r *mlschemaModelVersionResolver) Children(ctx context.Context, obj *graph.MlschemaModelVersion) ([]graph.ContextInterface, error) {
	panic(fmt.Errorf("not implemented: Children - children"))
}

// Attributions is the resolver for the attributions field.
func (r *mlschemaModelVersionResolver) Attributions(ctx context.Context, obj *graph.MlschemaModelVersion) ([]*graph.Attribution, error) {
	panic(fmt.Errorf("not implemented: Attributions - attributions"))
}

// Associations is the resolver for the associations field.
func (r *mlschemaModelVersionResolver) Associations(ctx context.Context, obj *graph.MlschemaModelVersion) ([]*graph.Association, error) {
	panic(fmt.Errorf("not implemented: Associations - associations"))
}

// Type is the resolver for the type field.
func (r *mlschemaRegisteredModelResolver) Type(ctx context.Context, obj *graph.MlschemaRegisteredModel) (*graph.ContextType, error) {
	panic(fmt.Errorf("not implemented: Type - type"))
}

// Parents is the resolver for the parents field.
func (r *mlschemaRegisteredModelResolver) Parents(ctx context.Context, obj *graph.MlschemaRegisteredModel) ([]graph.ContextInterface, error) {
	panic(fmt.Errorf("not implemented: Parents - parents"))
}

// Children is the resolver for the children field.
func (r *mlschemaRegisteredModelResolver) Children(ctx context.Context, obj *graph.MlschemaRegisteredModel) ([]graph.ContextInterface, error) {
	panic(fmt.Errorf("not implemented: Children - children"))
}

// Attributions is the resolver for the attributions field.
func (r *mlschemaRegisteredModelResolver) Attributions(ctx context.Context, obj *graph.MlschemaRegisteredModel) ([]*graph.Attribution, error) {
	panic(fmt.Errorf("not implemented: Attributions - attributions"))
}

// Associations is the resolver for the associations field.
func (r *mlschemaRegisteredModelResolver) Associations(ctx context.Context, obj *graph.MlschemaRegisteredModel) ([]*graph.Association, error) {
	panic(fmt.Errorf("not implemented: Associations - associations"))
}

// Type is the resolver for the type field.
func (r *mlschemaRunResolver) Type(ctx context.Context, obj *graph.MlschemaRun) (*graph.ExecutionType, error) {
	panic(fmt.Errorf("not implemented: Type - type"))
}

// Associations is the resolver for the associations field.
func (r *mlschemaRunResolver) Associations(ctx context.Context, obj *graph.MlschemaRun) ([]*graph.Association, error) {
	panic(fmt.Errorf("not implemented: Associations - associations"))
}

// Events is the resolver for the events field.
func (r *mlschemaRunResolver) Events(ctx context.Context, obj *graph.MlschemaRun) ([]*graph.Event, error) {
	panic(fmt.Errorf("not implemented: Events - events"))
}

// Type is the resolver for the type field.
func (r *mlschemaSoftwareResolver) Type(ctx context.Context, obj *graph.MlschemaSoftware) (*graph.ArtifactType, error) {
	panic(fmt.Errorf("not implemented: Type - type"))
}

// Attributions is the resolver for the attributions field.
func (r *mlschemaSoftwareResolver) Attributions(ctx context.Context, obj *graph.MlschemaSoftware) ([]*graph.Attribution, error) {
	panic(fmt.Errorf("not implemented: Attributions - attributions"))
}

// Events is the resolver for the events field.
func (r *mlschemaSoftwareResolver) Events(ctx context.Context, obj *graph.MlschemaSoftware) ([]*graph.Event, error) {
	panic(fmt.Errorf("not implemented: Events - events"))
}

// Type is the resolver for the type field.
func (r *mlschemaStudyResolver) Type(ctx context.Context, obj *graph.MlschemaStudy) (*graph.ExecutionType, error) {
	panic(fmt.Errorf("not implemented: Type - type"))
}

// Associations is the resolver for the associations field.
func (r *mlschemaStudyResolver) Associations(ctx context.Context, obj *graph.MlschemaStudy) ([]*graph.Association, error) {
	panic(fmt.Errorf("not implemented: Associations - associations"))
}

// Events is the resolver for the events field.
func (r *mlschemaStudyResolver) Events(ctx context.Context, obj *graph.MlschemaStudy) ([]*graph.Event, error) {
	panic(fmt.Errorf("not implemented: Events - events"))
}

// Type is the resolver for the type field.
func (r *mlschemaTaskResolver) Type(ctx context.Context, obj *graph.MlschemaTask) (*graph.ArtifactType, error) {
	panic(fmt.Errorf("not implemented: Type - type"))
}

// Attributions is the resolver for the attributions field.
func (r *mlschemaTaskResolver) Attributions(ctx context.Context, obj *graph.MlschemaTask) ([]*graph.Attribution, error) {
	panic(fmt.Errorf("not implemented: Attributions - attributions"))
}

// Events is the resolver for the events field.
func (r *mlschemaTaskResolver) Events(ctx context.Context, obj *graph.MlschemaTask) ([]*graph.Event, error) {
	panic(fmt.Errorf("not implemented: Events - events"))
}

// MlschemaModels is the resolver for the mlschemaModels field.
func (r *queryResolver) MlschemaModels(ctx context.Context, filter *graph.InstanceFilter) ([]*graph.MlschemaModel, error) {
	panic(fmt.Errorf("not implemented: MlschemaModels - mlschemaModels"))
}

// MlschemaModelEvaluations is the resolver for the mlschemaModelEvaluations field.
func (r *queryResolver) MlschemaModelEvaluations(ctx context.Context, filter *graph.InstanceFilter) ([]*graph.MlschemaModelEvaluation, error) {
	panic(fmt.Errorf("not implemented: MlschemaModelEvaluations - mlschemaModelEvaluations"))
}

// MlschemaEvaluationMeasures is the resolver for the mlschemaEvaluationMeasures field.
func (r *queryResolver) MlschemaEvaluationMeasures(ctx context.Context, filter *graph.InstanceFilter) ([]*graph.MlschemaEvaluationMeasure, error) {
	panic(fmt.Errorf("not implemented: MlschemaEvaluationMeasures - mlschemaEvaluationMeasures"))
}

// MlschemaEvaluationSpecifications is the resolver for the mlschemaEvaluationSpecifications field.
func (r *queryResolver) MlschemaEvaluationSpecifications(ctx context.Context, filter *graph.InstanceFilter) ([]*graph.MlschemaEvaluationSpecification, error) {
	panic(fmt.Errorf("not implemented: MlschemaEvaluationSpecifications - mlschemaEvaluationSpecifications"))
}

// MlschemaEvaluationProcedures is the resolver for the mlschemaEvaluationProcedures field.
func (r *queryResolver) MlschemaEvaluationProcedures(ctx context.Context, filter *graph.InstanceFilter) ([]*graph.MlschemaEvaluationProcedure, error) {
	panic(fmt.Errorf("not implemented: MlschemaEvaluationProcedures - mlschemaEvaluationProcedures"))
}

// MlschemaTasks is the resolver for the mlschemaTasks field.
func (r *queryResolver) MlschemaTasks(ctx context.Context, filter *graph.InstanceFilter) ([]*graph.MlschemaTask, error) {
	panic(fmt.Errorf("not implemented: MlschemaTasks - mlschemaTasks"))
}

// MlschemaData is the resolver for the mlschemaData field.
func (r *queryResolver) MlschemaData(ctx context.Context, filter *graph.InstanceFilter) ([]*graph.MlschemaData, error) {
	panic(fmt.Errorf("not implemented: MlschemaData - mlschemaData"))
}

// MlschemaDataSets is the resolver for the mlschemaDataSets field.
func (r *queryResolver) MlschemaDataSets(ctx context.Context, filter *graph.InstanceFilter) ([]*graph.MlschemaDataSet, error) {
	panic(fmt.Errorf("not implemented: MlschemaDataSets - mlschemaDataSets"))
}

// MlschemaFeatures is the resolver for the mlschemaFeatures field.
func (r *queryResolver) MlschemaFeatures(ctx context.Context, filter *graph.InstanceFilter) ([]*graph.MlschemaFeature, error) {
	panic(fmt.Errorf("not implemented: MlschemaFeatures - mlschemaFeatures"))
}

// MlschemaAlgorithms is the resolver for the mlschemaAlgorithms field.
func (r *queryResolver) MlschemaAlgorithms(ctx context.Context, filter *graph.InstanceFilter) ([]*graph.MlschemaAlgorithm, error) {
	panic(fmt.Errorf("not implemented: MlschemaAlgorithms - mlschemaAlgorithms"))
}

// MlschemaSoftwares is the resolver for the mlschemaSoftwares field.
func (r *queryResolver) MlschemaSoftwares(ctx context.Context, filter *graph.InstanceFilter) ([]*graph.MlschemaSoftware, error) {
	panic(fmt.Errorf("not implemented: MlschemaSoftwares - mlschemaSoftwares"))
}

// MlschemaImplementations is the resolver for the mlschemaImplementations field.
func (r *queryResolver) MlschemaImplementations(ctx context.Context, filter *graph.InstanceFilter) ([]*graph.MlschemaImplementation, error) {
	panic(fmt.Errorf("not implemented: MlschemaImplementations - mlschemaImplementations"))
}

// MlschemaHyperParameters is the resolver for the mlschemaHyperParameters field.
func (r *queryResolver) MlschemaHyperParameters(ctx context.Context, filter *graph.InstanceFilter) ([]*graph.MlschemaHyperParameter, error) {
	panic(fmt.Errorf("not implemented: MlschemaHyperParameters - mlschemaHyperParameters"))
}

// MlschemaHyperParameterSettings is the resolver for the mlschemaHyperParameterSettings field.
func (r *queryResolver) MlschemaHyperParameterSettings(ctx context.Context, filter *graph.InstanceFilter) ([]*graph.MlschemaHyperParameterSetting, error) {
	panic(fmt.Errorf("not implemented: MlschemaHyperParameterSettings - mlschemaHyperParameterSettings"))
}

// MlschemaImplementationCharacteristics is the resolver for the mlschemaImplementationCharacteristics field.
func (r *queryResolver) MlschemaImplementationCharacteristics(ctx context.Context, filter *graph.InstanceFilter) ([]*graph.MlschemaImplementationCharacteristic, error) {
	panic(fmt.Errorf("not implemented: MlschemaImplementationCharacteristics - mlschemaImplementationCharacteristics"))
}

// MlschemaDatasetCharacteristics is the resolver for the mlschemaDatasetCharacteristics field.
func (r *queryResolver) MlschemaDatasetCharacteristics(ctx context.Context, filter *graph.InstanceFilter) ([]*graph.MlschemaDatasetCharacteristic, error) {
	panic(fmt.Errorf("not implemented: MlschemaDatasetCharacteristics - mlschemaDatasetCharacteristics"))
}

// MlschemaFeatureCharacteristics is the resolver for the mlschemaFeatureCharacteristics field.
func (r *queryResolver) MlschemaFeatureCharacteristics(ctx context.Context, filter *graph.InstanceFilter) ([]*graph.MlschemaFeatureCharacteristic, error) {
	panic(fmt.Errorf("not implemented: MlschemaFeatureCharacteristics - mlschemaFeatureCharacteristics"))
}

// MlschemaRegisteredModels is the resolver for the mlschemaRegisteredModels field.
func (r *queryResolver) MlschemaRegisteredModels(ctx context.Context, filter *graph.InstanceFilter) ([]*graph.MlschemaRegisteredModel, error) {
	panic(fmt.Errorf("not implemented: MlschemaRegisteredModels - mlschemaRegisteredModels"))
}

// MlschemaModelVersions is the resolver for the mlschemaModelVersions field.
func (r *queryResolver) MlschemaModelVersions(ctx context.Context, filter *graph.InstanceFilter) ([]*graph.MlschemaModelVersion, error) {
	panic(fmt.Errorf("not implemented: MlschemaModelVersions - mlschemaModelVersions"))
}

// MlschemaDataCharacteristics is the resolver for the mlschemaDataCharacteristics field.
func (r *queryResolver) MlschemaDataCharacteristics(ctx context.Context, filter *graph.InstanceFilter) ([]*graph.MlschemaDataCharacteristic, error) {
	panic(fmt.Errorf("not implemented: MlschemaDataCharacteristics - mlschemaDataCharacteristics"))
}

// MlschemaStudies is the resolver for the mlschemaStudies field.
func (r *queryResolver) MlschemaStudies(ctx context.Context, filter *graph.InstanceFilter) ([]*graph.MlschemaStudy, error) {
	panic(fmt.Errorf("not implemented: MlschemaStudies - mlschemaStudies"))
}

// MlschemaExperiments is the resolver for the mlschemaExperiments field.
func (r *queryResolver) MlschemaExperiments(ctx context.Context, filter *graph.InstanceFilter) ([]*graph.MlschemaExperiment, error) {
	panic(fmt.Errorf("not implemented: MlschemaExperiments - mlschemaExperiments"))
}

// MlschemaRuns is the resolver for the mlschemaRuns field.
func (r *queryResolver) MlschemaRuns(ctx context.Context, filter *graph.InstanceFilter) ([]*graph.MlschemaRun, error) {
	panic(fmt.Errorf("not implemented: MlschemaRuns - mlschemaRuns"))
}

// MlschemaAlgorithm returns MlschemaAlgorithmResolver implementation.
func (r *Resolver) MlschemaAlgorithm() MlschemaAlgorithmResolver {
	return &mlschemaAlgorithmResolver{r}
}

// MlschemaData returns MlschemaDataResolver implementation.
func (r *Resolver) MlschemaData() MlschemaDataResolver { return &mlschemaDataResolver{r} }

// MlschemaDataCharacteristic returns MlschemaDataCharacteristicResolver implementation.
func (r *Resolver) MlschemaDataCharacteristic() MlschemaDataCharacteristicResolver {
	return &mlschemaDataCharacteristicResolver{r}
}

// MlschemaDataSet returns MlschemaDataSetResolver implementation.
func (r *Resolver) MlschemaDataSet() MlschemaDataSetResolver { return &mlschemaDataSetResolver{r} }

// MlschemaDatasetCharacteristic returns MlschemaDatasetCharacteristicResolver implementation.
func (r *Resolver) MlschemaDatasetCharacteristic() MlschemaDatasetCharacteristicResolver {
	return &mlschemaDatasetCharacteristicResolver{r}
}

// MlschemaEvaluationMeasure returns MlschemaEvaluationMeasureResolver implementation.
func (r *Resolver) MlschemaEvaluationMeasure() MlschemaEvaluationMeasureResolver {
	return &mlschemaEvaluationMeasureResolver{r}
}

// MlschemaEvaluationProcedure returns MlschemaEvaluationProcedureResolver implementation.
func (r *Resolver) MlschemaEvaluationProcedure() MlschemaEvaluationProcedureResolver {
	return &mlschemaEvaluationProcedureResolver{r}
}

// MlschemaEvaluationSpecification returns MlschemaEvaluationSpecificationResolver implementation.
func (r *Resolver) MlschemaEvaluationSpecification() MlschemaEvaluationSpecificationResolver {
	return &mlschemaEvaluationSpecificationResolver{r}
}

// MlschemaExperiment returns MlschemaExperimentResolver implementation.
func (r *Resolver) MlschemaExperiment() MlschemaExperimentResolver {
	return &mlschemaExperimentResolver{r}
}

// MlschemaFeature returns MlschemaFeatureResolver implementation.
func (r *Resolver) MlschemaFeature() MlschemaFeatureResolver { return &mlschemaFeatureResolver{r} }

// MlschemaFeatureCharacteristic returns MlschemaFeatureCharacteristicResolver implementation.
func (r *Resolver) MlschemaFeatureCharacteristic() MlschemaFeatureCharacteristicResolver {
	return &mlschemaFeatureCharacteristicResolver{r}
}

// MlschemaHyperParameter returns MlschemaHyperParameterResolver implementation.
func (r *Resolver) MlschemaHyperParameter() MlschemaHyperParameterResolver {
	return &mlschemaHyperParameterResolver{r}
}

// MlschemaHyperParameterSetting returns MlschemaHyperParameterSettingResolver implementation.
func (r *Resolver) MlschemaHyperParameterSetting() MlschemaHyperParameterSettingResolver {
	return &mlschemaHyperParameterSettingResolver{r}
}

// MlschemaImplementation returns MlschemaImplementationResolver implementation.
func (r *Resolver) MlschemaImplementation() MlschemaImplementationResolver {
	return &mlschemaImplementationResolver{r}
}

// MlschemaImplementationCharacteristic returns MlschemaImplementationCharacteristicResolver implementation.
func (r *Resolver) MlschemaImplementationCharacteristic() MlschemaImplementationCharacteristicResolver {
	return &mlschemaImplementationCharacteristicResolver{r}
}

// MlschemaModel returns MlschemaModelResolver implementation.
func (r *Resolver) MlschemaModel() MlschemaModelResolver { return &mlschemaModelResolver{r} }

// MlschemaModelEvaluation returns MlschemaModelEvaluationResolver implementation.
func (r *Resolver) MlschemaModelEvaluation() MlschemaModelEvaluationResolver {
	return &mlschemaModelEvaluationResolver{r}
}

// MlschemaModelVersion returns MlschemaModelVersionResolver implementation.
func (r *Resolver) MlschemaModelVersion() MlschemaModelVersionResolver {
	return &mlschemaModelVersionResolver{r}
}

// MlschemaRegisteredModel returns MlschemaRegisteredModelResolver implementation.
func (r *Resolver) MlschemaRegisteredModel() MlschemaRegisteredModelResolver {
	return &mlschemaRegisteredModelResolver{r}
}

// MlschemaRun returns MlschemaRunResolver implementation.
func (r *Resolver) MlschemaRun() MlschemaRunResolver { return &mlschemaRunResolver{r} }

// MlschemaSoftware returns MlschemaSoftwareResolver implementation.
func (r *Resolver) MlschemaSoftware() MlschemaSoftwareResolver { return &mlschemaSoftwareResolver{r} }

// MlschemaStudy returns MlschemaStudyResolver implementation.
func (r *Resolver) MlschemaStudy() MlschemaStudyResolver { return &mlschemaStudyResolver{r} }

// MlschemaTask returns MlschemaTaskResolver implementation.
func (r *Resolver) MlschemaTask() MlschemaTaskResolver { return &mlschemaTaskResolver{r} }

type mlschemaAlgorithmResolver struct{ *Resolver }
type mlschemaDataResolver struct{ *Resolver }
type mlschemaDataCharacteristicResolver struct{ *Resolver }
type mlschemaDataSetResolver struct{ *Resolver }
type mlschemaDatasetCharacteristicResolver struct{ *Resolver }
type mlschemaEvaluationMeasureResolver struct{ *Resolver }
type mlschemaEvaluationProcedureResolver struct{ *Resolver }
type mlschemaEvaluationSpecificationResolver struct{ *Resolver }
type mlschemaExperimentResolver struct{ *Resolver }
type mlschemaFeatureResolver struct{ *Resolver }
type mlschemaFeatureCharacteristicResolver struct{ *Resolver }
type mlschemaHyperParameterResolver struct{ *Resolver }
type mlschemaHyperParameterSettingResolver struct{ *Resolver }
type mlschemaImplementationResolver struct{ *Resolver }
type mlschemaImplementationCharacteristicResolver struct{ *Resolver }
type mlschemaModelResolver struct{ *Resolver }
type mlschemaModelEvaluationResolver struct{ *Resolver }
type mlschemaModelVersionResolver struct{ *Resolver }
type mlschemaRegisteredModelResolver struct{ *Resolver }
type mlschemaRunResolver struct{ *Resolver }
type mlschemaSoftwareResolver struct{ *Resolver }
type mlschemaStudyResolver struct{ *Resolver }
type mlschemaTaskResolver struct{ *Resolver }
