# Code generated by github.com/opendatahub-io/model-registry/gqlmapper. DO NOT EDIT.
# schema generated from {{.FileName}}
{{- define "properties"}}
    {{- range $property := .Properties}}
    {{$property.GraphQLName}}: {{$property.GraphQLType}}
    {{- end}}
{{- end}}

# Artifacts
{{- range .Library.ArtifactTypes}}
{{- $GqlName := .GraphQLName}}

# Type name map "{{$GqlName}}":"{{.Name}}"
type {{$GqlName}} implements ArtifactInterface {
    id: ID!
    typeId: ID!
    uri: String
    state: ArtifactState
    name: String
    externalId: String
    createTimeSinceEpoch: Int64!
    lastUpdateTimeSinceEpoch: Int64!
    {{- template "properties" .}}
    type: ArtifactType!
    properties : [InstanceProperty!]!
    attributions: [Attribution!]
    events: [Event!]
}
{{- end}}
# Contexts
{{- range .Library.ContextTypes}}
{{- $GqlName := .GraphQLName}}

# Type name map "{{$GqlName}}":"{{.Name}}"
type {{$GqlName}} implements ContextInterface {
    id: ID!
    typeId: ID!
    name: String!
    externalId: String
    createTimeSinceEpoch: Int64!
    lastUpdateTimeSinceEpoch: Int64!
    {{- template "properties" .}}
    type: ContextType!
    properties: [InstanceProperty!]!
    parents: [ContextInterface!]
    children: [ContextInterface!]
    attributions: [Attribution!]
    associations: [Association!]
}
{{- end}}
# Executions
{{- range .Library.ExecutionTypes}}
{{- $GqlName := .GraphQLName}}

# Type name map "{{$GqlName}}":"{{.Name}}"
type {{$GqlName}} implements ExecutionInterface {
    id: ID!
    typeId: ID!
    lastKnownState: ExecutionState
    name: String
    externalId: String
    createTimeSinceEpoch: Int64!
    lastUpdateTimeSinceEpoch: Int64!
    {{- template "properties" .}}
    type: ExecutionType!
    properties: [InstanceProperty!]!
    associations: [Association!]
    events: [Event!]
}
{{- end}}

# queries
extend type Query {
{{- range .Library.ArtifactTypes}}
{{- $GqlName := .GraphQLName}}
{{- $GqlQueryName := .GraphQLQueryName}}
    {{$GqlQueryName}}(filter: InstanceFilter): [{{$GqlName}}!]
{{- end}}
{{- range .Library.ContextTypes}}
{{- $GqlName := .GraphQLName}}
{{- $GqlQueryName := .GraphQLQueryName}}
    {{$GqlQueryName}}(filter: InstanceFilter): [{{$GqlName}}!]
{{- end}}
{{- range .Library.ExecutionTypes}}
{{- $GqlName := .GraphQLName}}
{{- $GqlQueryName := .GraphQLQueryName}}
    {{$GqlQueryName}}(filter: InstanceFilter): [{{$GqlName}}!]
{{- end}}
}
