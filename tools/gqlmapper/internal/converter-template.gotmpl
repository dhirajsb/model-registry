// Code generated by github.com/opendatahub-io/model-registry/gqlmapper. DO NOT EDIT.
// converter generated from {{.FileName}}
{{- define "property-ignores"}}
    {{- if .Properties}}
    {{- $metadataType := .}}
    // goverter:ignore{{range $property := .Properties}} {{$property.GoName}}{{end}}
    {{- end}}
{{- end}}
{{- define "property-map"}}
{{- if .Properties}}
{{- $metadataType := .}}
{{- $GqlName := .GraphQLName}}
{{- $FieldMapName := (print "fields" $GqlName "Map")}}
var {{$FieldMapName}} = map[string]struct{}{ {{range $property := .Properties}}"{{$property.Name}}": struct{}{}, {{end}} }
{{- end}}
{{- end}}
{{- define "property-grapqhl-filter"}}
{{- if .Properties}}
{{- $metadataType := .}}
{{- $GqlName := .GraphQLName}}
{{- $FieldMapName := (print "fields" $GqlName "Map")}}
    FilterGraphQLProperties(&source.Properties, {{$FieldMapName}})
    {{- range $property := .Properties}}
    {{- $fieldGqlName := $property.GraphQLName}}
    {{- $fieldGoName := $property.GoName}}
    if source.{{$fieldGoName}} != nil {
        source.Properties = append(source.Properties, &graph.InstanceProperty{
            Name:             "{{$property.Name}}",
            IsCustomProperty: false,
            {{- $fieldWrapperType := $property.GraphQLWrapper}}
            PropertyValue:    graph.{{$fieldWrapperType}}{
                Value: {{if and (ne $fieldWrapperType "StructValue") (ne $fieldWrapperType "ProtoValue")}}*{{end}}source.{{$fieldGoName}},
            },
        })
    }
    {{- end}}
{{- end}}
{{- end}}
{{- define "property-type-filter"}}
{{- if .Properties}}
{{- $metadataType := .}}
{{- $GqlName := .GraphQLName}}
{{- $FieldMapName := (print "fields" $GqlName "Map")}}
    typeProperties := FilterTypeProperties(&result.Properties, {{$FieldMapName}})
    {{- range $property := .Properties}}
    {{- $fieldGqlName := $property.GraphQLName}}
    {{- $fieldGoName := $property.GoName}}
    if prop, ok := typeProperties["{{$property.Name}}"]; ok {
        {{- $fieldWrapperType := $property.GraphQLWrapper}}
        value := prop.PropertyValue.(graph.{{$fieldWrapperType}}).Value
        result.{{$fieldGoName}} = {{if and (ne $fieldWrapperType "StructValue") (ne $fieldWrapperType "ProtoValue")}}&{{end}}value
    }
    {{- end}}
{{- end}}
{{- end}}
package converter

import (
    "github.com/opendatahub-io/model-registry/internal/model/db"
    "github.com/opendatahub-io/model-registry/internal/model/graph"
)

{{- $DelegateConverterName := (print .LibraryGraphQLName "DelegateConverter")}}
{{- $ConverterName := (print .LibraryGraphQLName "Converter")}}
type {{$ConverterName}} struct {
    DelegateConverter {{$DelegateConverterName}}
}

{{- define "convert-func-body"}}
    {{- $GqlName := .GraphQLName}}
    {{- template "property-grapqhl-filter" .}}
    return c.DelegateConverter.Convert{{$GqlName}}(source)
{{- end}}
{{- define "convert-to-func-body"}}
    {{- $GqlName := .GraphQLName}}
    {{- if .Properties}}
    result, err := c.DelegateConverter.ConvertTo{{$GqlName}}(source)
    if err != nil {
        return result, err
    }
    {{- template "property-type-filter" .}}
    return result, nil
    {{- else}}
    return c.DelegateConverter.ConvertTo{{$GqlName}}(source)
    {{- end}}
{{- end}}
{{- range .Library.ArtifactTypes}}
{{- $GqlName := .GraphQLName}}
{{- template "property-map" .}}
func (c {{$ConverterName}}) Convert{{$GqlName}}(source *graph.{{$GqlName}}) (*db.Artifact, error) {
{{- template "convert-func-body" .}}
}
func (c {{$ConverterName}}) ConvertTo{{$GqlName}}(source *db.Artifact) (*graph.{{$GqlName}}, error) {
{{- template "convert-to-func-body" .}}
}
{{- end}}
{{- range .Library.ContextTypes}}
{{- $GqlName := .GraphQLName}}
{{- template "property-map" .}}
func (c {{$ConverterName}}) Convert{{$GqlName}}(source *graph.{{$GqlName}}) (*db.Context, error) {
{{- template "convert-func-body" .}}
}
func (c {{$ConverterName}}) ConvertTo{{$GqlName}}(source *db.Context) (*graph.{{$GqlName}}, error) {
{{- template "convert-to-func-body" .}}
}
{{- end}}
{{- range .Library.ExecutionTypes}}
{{- $GqlName := .GraphQLName}}
{{- template "property-map" .}}
func (c {{$ConverterName}}) Convert{{$GqlName}}(source *graph.{{$GqlName}}) (*db.Execution, error) {
{{- template "convert-func-body" .}}
}
func (c {{$ConverterName}}) ConvertTo{{$GqlName}}(source *db.Execution) (*graph.{{$GqlName}}, error) {
{{- template "convert-to-func-body" .}}
}
{{- end}}

// goverter:converter
// goverter:wrapErrors
// goverter:extend ConvertArtifactState
// goverter:extend ConvertToArtifactState
// goverter:extend ConvertExecutionState
// goverter:extend ConvertToExecutionState
type {{$DelegateConverterName}} interface {
{{- range .Library.ArtifactTypes}}
{{- $GqlName := .GraphQLName}}
    // goverter:map ID | ConvertArtifactID
    // goverter:map TypeID | ConvertTypeID
    // goverter:map Properties | ConvertArtifactProperties
    // goverter:ignore ArtifactType Attributions Events
    Convert{{$GqlName}}(source *graph.{{$GqlName}}) (*db.Artifact, error)
    // goverter:map ID | ConvertToArtifactID
    // goverter:map TypeID | ConvertToTypeID
    // goverter:map Properties | ConvertToArtifactProperties
    // goverter:ignore Type Attributions Events
    {{- template "property-ignores" .}}
    ConvertTo{{$GqlName}}(source *db.Artifact) (*graph.{{$GqlName}}, error)
{{- end}}
{{- range .Library.ContextTypes}}
{{- $GqlName := .GraphQLName}}
    // goverter:map ID | ConvertContextID
    // goverter:map TypeID | ConvertTypeID
    // goverter:map Properties | ConvertContextProperties
    // goverter:ignore ContextType Attributions Associations Parents Children
    Convert{{$GqlName}}(source *graph.{{$GqlName}}) (*db.Context, error)
    // goverter:map ID | ConvertToContextID
    // goverter:map TypeID | ConvertToTypeID
    // goverter:map Properties | ConvertToContextProperties
    // goverter:ignore Type Attributions Associations Parents Children
    {{- template "property-ignores" .}}
    ConvertTo{{$GqlName}}(source *db.Context) (*graph.{{$GqlName}}, error)
{{- end}}
{{- range .Library.ExecutionTypes}}
{{- $GqlName := .GraphQLName}}
    // goverter:map ID | ConvertExecutionID
    // goverter:map TypeID | ConvertTypeID
    // goverter:map Properties | ConvertExecutionProperties
    // goverter:ignore ExecutionType Associations Events
    Convert{{$GqlName}}(source *graph.{{$GqlName}}) (*db.Execution, error)
    // goverter:map ID | ConvertToExecutionID
    // goverter:map TypeID | ConvertToTypeID
    // goverter:map Properties | ConvertToExecutionProperties
    // goverter:ignore Type Associations Events
    {{- template "property-ignores" .}}
    ConvertTo{{$GqlName}}(source *db.Execution) (*graph.{{$GqlName}}, error)
{{- end}}
}
